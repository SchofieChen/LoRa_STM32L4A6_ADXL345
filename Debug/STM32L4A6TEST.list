
STM32L4A6TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c624  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006124  0800c7d8  0800c7d8  0001c7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128fc  080128fc  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080128fc  080128fc  000228fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012904  08012904  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012904  08012904  00022904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012908  08012908  00022908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801290c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001aa44  20000200  08012af4  00030200  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2001ac44  08012af4  0003ac44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cce  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004161  00000000  00000000  00053ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  00058048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002b8ea  00000000  00000000  00059278  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000138ff  00000000  00000000  00084b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001061e5  00000000  00000000  00098461  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0019e646  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ff8  00000000  00000000  0019e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000520c  00000000  00000000  0019f6c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c7bc 	.word	0x0800c7bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	0800c7bc 	.word	0x0800c7bc

080001f0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001f0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001f2:	2b01      	cmp	r3, #1
	IT       LS
 80001f4:	bf98      	it	ls
	BXLS     lr
 80001f6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001fc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000208:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800020e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000210:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000212:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000214:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800021e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000224:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000228:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800022c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000230:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800023a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800024c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800024e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000250:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800025a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800025c:	2b01      	cmp	r3, #1
	IT       LS
 800025e:	bf98      	it	ls
	BXLS     lr
 8000260:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000266:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000272:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000290:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000296:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800029a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800029e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002a2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002a4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ae:	4770      	bx	lr

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fd2:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8000fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	db0a      	blt.n	8000ff8 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000fe2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fe6:	f00b fae3 	bl	800c5b0 <sqrtf>
 8000fea:	eef0 7a40 	vmov.f32	s15, s0
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e005      	b.n	8001004 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800101e:	e082      	b.n	8001126 <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1d1a      	adds	r2, r3, #4
 8001024:	60fa      	str	r2, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1d1a      	adds	r2, r3, #4
 800102e:	60fa      	str	r2, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001034:	ed97 7a06 	vldr	s14, [r7, #24]
 8001038:	edd7 7a06 	vldr	s15, [r7, #24]
 800103c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001040:	edd7 6a05 	vldr	s13, [r7, #20]
 8001044:	edd7 7a05 	vldr	s15, [r7, #20]
 8001048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1d1a      	adds	r2, r3, #4
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	4618      	mov	r0, r3
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	f7ff ffb4 	bl	8000fc8 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1d1a      	adds	r2, r3, #4
 8001064:	60fa      	str	r2, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1d1a      	adds	r2, r3, #4
 800106e:	60fa      	str	r2, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001074:	ed97 7a06 	vldr	s14, [r7, #24]
 8001078:	edd7 7a06 	vldr	s15, [r7, #24]
 800107c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001080:	edd7 6a05 	vldr	s13, [r7, #20]
 8001084:	edd7 7a05 	vldr	s15, [r7, #20]
 8001088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1d1a      	adds	r2, r3, #4
 8001094:	60ba      	str	r2, [r7, #8]
 8001096:	4618      	mov	r0, r3
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	f7ff ff94 	bl	8000fc8 <arm_sqrt_f32>

    realIn = *pSrc++;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1d1a      	adds	r2, r3, #4
 80010a4:	60fa      	str	r2, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1d1a      	adds	r2, r3, #4
 80010ae:	60fa      	str	r2, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80010c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1d1a      	adds	r2, r3, #4
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	4618      	mov	r0, r3
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	f7ff ff74 	bl	8000fc8 <arm_sqrt_f32>

    realIn = *pSrc++;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1d1a      	adds	r2, r3, #4
 80010e4:	60fa      	str	r2, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1d1a      	adds	r2, r3, #4
 80010ee:	60fa      	str	r2, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	edd7 6a05 	vldr	s13, [r7, #20]
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	f7ff ff54 	bl	8000fc8 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3b01      	subs	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	f47f af79 	bne.w	8001020 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 8001136:	e022      	b.n	800117e <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	1d1a      	adds	r2, r3, #4
 800113c:	60fa      	str	r2, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1d1a      	adds	r2, r3, #4
 8001146:	60fa      	str	r2, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800114c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001150:	edd7 7a06 	vldr	s15, [r7, #24]
 8001154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001158:	edd7 6a05 	vldr	s13, [r7, #20]
 800115c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1d1a      	adds	r2, r3, #4
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	4618      	mov	r0, r3
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	f7ff ff28 	bl	8000fc8 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	3b01      	subs	r3, #1
 800117c:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1d9      	bne.n	8001138 <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800118c:	b480      	push	{r7}
 800118e:	b08b      	sub	sp, #44	; 0x2c
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	1d1a      	adds	r2, r3, #4
 80011a6:	60fa      	str	r2, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 80011b4:	e051      	b.n	800125a <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1d1a      	adds	r2, r3, #4
 80011ba:	60fa      	str	r2, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1d1a      	adds	r2, r3, #4
 80011c4:	60fa      	str	r2, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 80011ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d504      	bpl.n	80011e6 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	3301      	adds	r3, #1
 80011e4:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1d1a      	adds	r2, r3, #4
 80011ea:	60fa      	str	r2, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 80011f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	d504      	bpl.n	800120c <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	3302      	adds	r3, #2
 800120a:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1d1a      	adds	r2, r3, #4
 8001210:	60fa      	str	r2, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001216:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800121a:	edd7 7a05 	vldr	s15, [r7, #20]
 800121e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	d504      	bpl.n	8001232 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	3303      	adds	r3, #3
 8001230:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8001232:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001236:	edd7 7a04 	vldr	s15, [r7, #16]
 800123a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	d504      	bpl.n	800124e <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	3304      	adds	r3, #4
 800124c:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	3304      	adds	r3, #4
 8001252:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	3b01      	subs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1aa      	bne.n	80011b6 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	3b01      	subs	r3, #1
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800126a:	e016      	b.n	800129a <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1d1a      	adds	r2, r3, #4
 8001270:	60fa      	str	r2, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001276:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800127a:	edd7 7a05 	vldr	s15, [r7, #20]
 800127e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	d505      	bpl.n	8001294 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	3b01      	subs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1e5      	bne.n	800126c <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a4:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	372c      	adds	r7, #44	; 0x2c
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1d1a      	adds	r2, r3, #4
 80012d2:	60fa      	str	r2, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3b01      	subs	r3, #1
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 80012e0:	e051      	b.n	8001386 <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1d1a      	adds	r2, r3, #4
 80012e6:	60fa      	str	r2, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	60fa      	str	r2, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 80012f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	dd04      	ble.n	8001312 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	3301      	adds	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1d1a      	adds	r2, r3, #4
 8001316:	60fa      	str	r2, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 800131c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001320:	edd7 7a04 	vldr	s15, [r7, #16]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	dd04      	ble.n	8001338 <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	3302      	adds	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1d1a      	adds	r2, r3, #4
 800133c:	60fa      	str	r2, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8001342:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001346:	edd7 7a05 	vldr	s15, [r7, #20]
 800134a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	dd04      	ble.n	800135e <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	3303      	adds	r3, #3
 800135c:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 800135e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001362:	edd7 7a04 	vldr	s15, [r7, #16]
 8001366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	dd04      	ble.n	800137a <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	3304      	adds	r3, #4
 8001378:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	3304      	adds	r3, #4
 800137e:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	3b01      	subs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1aa      	bne.n	80012e2 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3b01      	subs	r3, #1
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8001396:	e016      	b.n	80013c6 <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1d1a      	adds	r2, r3, #4
 800139c:	60fa      	str	r2, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 80013a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	dd05      	ble.n	80013c0 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e5      	bne.n	8001398 <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	372c      	adds	r7, #44	; 0x2c
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <arm_sqrt_f32>:
  {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ee:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 80013f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	db0a      	blt.n	8001414 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 80013fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001402:	f00b f8d5 	bl	800c5b0 <sqrtf>
 8001406:	eef0 7a40 	vmov.f32	s15, s0
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001410:	2300      	movs	r3, #0
 8001412:	e005      	b.n	8001420 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001440:	e046      	b.n	80014d0 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1d1a      	adds	r2, r3, #4
 8001446:	60fa      	str	r2, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800144c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001450:	edd7 7a05 	vldr	s15, [r7, #20]
 8001454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001458:	ed97 7a07 	vldr	s14, [r7, #28]
 800145c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001460:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1d1a      	adds	r2, r3, #4
 8001468:	60fa      	str	r2, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800146e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001472:	edd7 7a05 	vldr	s15, [r7, #20]
 8001476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147a:	ed97 7a07 	vldr	s14, [r7, #28]
 800147e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001482:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1d1a      	adds	r2, r3, #4
 800148a:	60fa      	str	r2, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001490:	ed97 7a05 	vldr	s14, [r7, #20]
 8001494:	edd7 7a05 	vldr	s15, [r7, #20]
 8001498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149c:	ed97 7a07 	vldr	s14, [r7, #28]
 80014a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a4:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1d1a      	adds	r2, r3, #4
 80014ac:	60fa      	str	r2, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014be:	ed97 7a07 	vldr	s14, [r7, #28]
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1b5      	bne.n	8001442 <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80014de:	e013      	b.n	8001508 <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1d1a      	adds	r2, r3, #4
 80014e4:	60fa      	str	r2, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	3b01      	subs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1e8      	bne.n	80014e0 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001518:	ed97 7a07 	vldr	s14, [r7, #28]
 800151c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	eeb0 0a66 	vmov.f32	s0, s13
 8001526:	f7ff ff5d 	bl	80013e4 <arm_sqrt_f32>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b0a0      	sub	sp, #128	; 0x80
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8001542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8001556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001558:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 800155a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8001560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 800156a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001570:	4413      	add	r3, r2
 8001572:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8001574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800157a:	e1b6      	b.n	80018ea <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8001594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800159a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80015a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80015a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80015ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80015b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80015b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80015be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80015c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80015ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80015d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80015d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80015dc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80015e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	1d1a      	adds	r2, r3, #4
 80015e8:	603a      	str	r2, [r7, #0]
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80015f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80015f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	1d1a      	adds	r2, r3, #4
 80015fe:	603a      	str	r2, [r7, #0]
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8001608:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800160c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	603a      	str	r2, [r7, #0]
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800161e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001622:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	1d1a      	adds	r2, r3, #4
 800162a:	603a      	str	r2, [r7, #0]
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8001634:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001638:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800163c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001640:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8001644:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001648:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8001654:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001658:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8001664:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001668:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8001674:	ed97 7a06 	vldr	s14, [r7, #24]
 8001678:	edd7 7a02 	vldr	s15, [r7, #8]
 800167c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001686:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800168a:	ed97 7a07 	vldr	s14, [r7, #28]
 800168e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001694:	1d1a      	adds	r2, r3, #4
 8001696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80016a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80016a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016aa:	1d1a      	adds	r2, r3, #4
 80016ac:	67fa      	str	r2, [r7, #124]	; 0x7c
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80016b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80016be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016c0:	1d1a      	adds	r2, r3, #4
 80016c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80016c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c8:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80016cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80016d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80016d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d8:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80016dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80016e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e8:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80016ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80016f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80016fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001700:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001708:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800170c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800170e:	1d1a      	adds	r2, r3, #4
 8001710:	673a      	str	r2, [r7, #112]	; 0x70
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001718:	1d1a      	adds	r2, r3, #4
 800171a:	673a      	str	r2, [r7, #112]	; 0x70
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8001720:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001724:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8001730:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001734:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8001740:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001744:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8001750:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001754:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8001760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001762:	1d1a      	adds	r2, r3, #4
 8001764:	677a      	str	r2, [r7, #116]	; 0x74
 8001766:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800176a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001772:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8001776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001778:	1d1a      	adds	r2, r3, #4
 800177a:	677a      	str	r2, [r7, #116]	; 0x74
 800177c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001780:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800178c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001790:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001798:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800179c:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80017ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80017bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80017cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ce:	1d1a      	adds	r2, r3, #4
 80017d0:	67ba      	str	r2, [r7, #120]	; 0x78
 80017d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80017d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017de:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80017e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017e4:	1d1a      	adds	r2, r3, #4
 80017e6:	67ba      	str	r2, [r7, #120]	; 0x78
 80017e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80017ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f4:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 80017f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017fa:	1d1a      	adds	r2, r3, #4
 80017fc:	673a      	str	r2, [r7, #112]	; 0x70
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001804:	1d1a      	adds	r2, r3, #4
 8001806:	673a      	str	r2, [r7, #112]	; 0x70
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 800180c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001810:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800181c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001820:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800182c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001830:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001838:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800183c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001840:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001848:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 800184c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800184e:	1d1a      	adds	r2, r3, #4
 8001850:	677a      	str	r2, [r7, #116]	; 0x74
 8001852:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001856:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001864:	1d1a      	adds	r2, r3, #4
 8001866:	677a      	str	r2, [r7, #116]	; 0x74
 8001868:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800186c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001874:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 8001878:	edd7 7a04 	vldr	s15, [r7, #16]
 800187c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001884:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8001888:	edd7 7a05 	vldr	s15, [r7, #20]
 800188c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8001898:	edd7 7a05 	vldr	s15, [r7, #20]
 800189c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80018a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80018b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80018b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018ba:	1d1a      	adds	r2, r3, #4
 80018bc:	67ba      	str	r2, [r7, #120]	; 0x78
 80018be:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80018c2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80018c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ca:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80018ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018d0:	1d1a      	adds	r2, r3, #4
 80018d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80018d4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018d8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e0:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 80018e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e6:	3b01      	subs	r3, #1
 80018e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f47f ae45 	bne.w	800157c <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80018f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018f4:	b299      	uxth	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	2302      	movs	r3, #2
 80018fc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80018fe:	f000 fedb 	bl	80026b8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8001902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001904:	b299      	uxth	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	2302      	movs	r3, #2
 800190c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800190e:	f000 fed3 	bl	80026b8 <arm_radix8_butterfly_f32>
}
 8001912:	bf00      	nop
 8001914:	3780      	adds	r7, #128	; 0x80
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b0ac      	sub	sp, #176	; 0xb0
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	b29b      	uxth	r3, r3
 800192c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001930:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800193e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001948:	4413      	add	r3, r2
 800194a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800194e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001958:	4413      	add	r3, r2
 800195a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8001962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001966:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800196c:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800196e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001972:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8001974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001978:	3b04      	subs	r3, #4
 800197a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800197e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001982:	3b04      	subs	r3, #4
 8001984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800198c:	3b04      	subs	r3, #4
 800198e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800199c:	4413      	add	r3, r2
 800199e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80019ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019be:	085b      	lsrs	r3, r3, #1
 80019c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80019c8:	2304      	movs	r3, #4
 80019ca:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80019cc:	2306      	movs	r3, #6
 80019ce:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3304      	adds	r3, #4
 8001a00:	ed93 7a00 	vldr	s14, [r3]
 8001a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a08:	3304      	adds	r3, #4
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a12:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	ed93 7a00 	vldr	s14, [r3]
 8001a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a22:	3304      	adds	r3, #4
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a34:	3304      	adds	r3, #4
 8001a36:	ed93 7a00 	vldr	s14, [r3]
 8001a3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a46:	3304      	adds	r3, #4
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a50:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001a60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001a80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a90:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a98:	3304      	adds	r3, #4
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001aa2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aaa:	3304      	adds	r3, #4
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001abc:	3304      	adds	r3, #4
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ace:	3304      	adds	r3, #4
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af8:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	1d1a      	adds	r2, r3, #4
 8001b18:	603a      	str	r2, [r7, #0]
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b26:	3304      	adds	r3, #4
 8001b28:	ed93 7a00 	vldr	s14, [r3]
 8001b2c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b38:	3304      	adds	r3, #4
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	1d1a      	adds	r2, r3, #4
 8001b42:	603a      	str	r2, [r7, #0]
 8001b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b48:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001b4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b50:	1d1a      	adds	r2, r3, #4
 8001b52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b58:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b5e:	1d1a      	adds	r2, r3, #4
 8001b60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b66:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b6c:	1d1a      	adds	r2, r3, #4
 8001b6e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b7a:	1d1a      	adds	r2, r3, #4
 8001b7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b80:	6a3a      	ldr	r2, [r7, #32]
 8001b82:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b88:	1d1a      	adds	r2, r3, #4
 8001b8a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b96:	1d1a      	adds	r2, r3, #4
 8001b98:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001ba8:	4413      	add	r3, r2
 8001baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bce:	3b02      	subs	r3, #2
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bd6:	e31a      	b.n	800220e <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	ed93 7a00 	vldr	s14, [r3]
 8001bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c00:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3304      	adds	r3, #4
 8001c08:	ed93 7a00 	vldr	s14, [r3]
 8001c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c10:	3304      	adds	r3, #4
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3304      	adds	r3, #4
 8001c22:	ed93 7a00 	vldr	s14, [r3]
 8001c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c34:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c4e:	3304      	adds	r3, #4
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001c68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c98:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001c9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbc:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001cce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce0:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001ce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d08:	ed93 7a00 	vldr	s14, [r3]
 8001d0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	1d1a      	adds	r2, r3, #4
 8001d20:	603a      	str	r2, [r7, #0]
 8001d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d26:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d2e:	3304      	adds	r3, #4
 8001d30:	ed93 7a00 	vldr	s14, [r3]
 8001d34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d40:	3304      	adds	r3, #4
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	1d1a      	adds	r2, r3, #4
 8001d4a:	603a      	str	r2, [r7, #0]
 8001d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d50:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d58:	3b04      	subs	r3, #4
 8001d5a:	ed93 7a00 	vldr	s14, [r3]
 8001d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d62:	3b04      	subs	r3, #4
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d74:	3b04      	subs	r3, #4
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d88:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8001da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dd0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001df0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001df4:	3b04      	subs	r3, #4
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e02:	3b04      	subs	r3, #4
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e14:	3b04      	subs	r3, #4
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e26:	3b04      	subs	r3, #4
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e30:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e50:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e58:	ed93 7a00 	vldr	s14, [r3]
 8001e5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e70:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001e74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e78:	3b04      	subs	r3, #4
 8001e7a:	ed93 7a00 	vldr	s14, [r3]
 8001e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e82:	3b04      	subs	r3, #4
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e8c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e94:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001e98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e9c:	ed93 7a00 	vldr	s14, [r3]
 8001ea0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eb4:	1f1a      	subs	r2, r3, #4
 8001eb6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001ec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	ed93 7a00 	vldr	s14, [r3]
 8001ecc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ed8:	3b04      	subs	r3, #4
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ee2:	1f1a      	subs	r2, r3, #4
 8001ee4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8001ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ef4:	1d1a      	adds	r2, r3, #4
 8001ef6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8001efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f02:	1d1a      	adds	r2, r3, #4
 8001f04:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8001f0c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f10:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f18:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8001f1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f20:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f28:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8001f2c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f30:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f38:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8001f3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f40:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f48:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8001f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f50:	1d1a      	adds	r2, r3, #4
 8001f52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001f56:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f62:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f6a:	1d1a      	adds	r2, r3, #4
 8001f6c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001f70:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f74:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8001f80:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f84:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8001f90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f94:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8001fa0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fa4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8001fb0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001fb4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8001fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fc4:	1f1a      	subs	r2, r3, #4
 8001fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001fce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd6:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8001fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fde:	1f1a      	subs	r2, r3, #4
 8001fe0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fe4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001fe8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff0:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8001ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8001ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8002004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800200c:	4413      	add	r3, r2
 800200e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8002012:	edd7 7a07 	vldr	s15, [r7, #28]
 8002016:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8002022:	edd7 7a08 	vldr	s15, [r7, #32]
 8002026:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8002032:	edd7 7a08 	vldr	s15, [r7, #32]
 8002036:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8002042:	edd7 7a07 	vldr	s15, [r7, #28]
 8002046:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800204a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8002052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002056:	1d1a      	adds	r2, r3, #4
 8002058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800205c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002060:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 800206c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002070:	1d1a      	adds	r2, r3, #4
 8002072:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002076:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800207a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800207e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002082:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8002086:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800208a:	eef1 7a67 	vneg.f32	s15, s15
 800208e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002096:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800209a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800209e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 80020aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 80020ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80020be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 80020ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020ce:	1f1a      	subs	r2, r3, #4
 80020d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020d4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 80020e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020e8:	1f1a      	subs	r2, r3, #4
 80020ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80020f2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80020f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fa:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 80020fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8002106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 800210e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002116:	4413      	add	r3, r2
 8002118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800211c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002120:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 800212c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002130:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 800213c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002140:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 800214c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002150:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002158:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 800215c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002160:	1d1a      	adds	r2, r3, #4
 8002162:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002166:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800216a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800216e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002172:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8002176:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800217a:	1d1a      	adds	r2, r3, #4
 800217c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002180:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002184:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800218c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8002190:	edd7 7a06 	vldr	s15, [r7, #24]
 8002194:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 80021a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 80021b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021bc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 80021c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80021c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80021c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 80021d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021d4:	1f1a      	subs	r2, r3, #4
 80021d6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80021da:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80021de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e6:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 80021ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021ee:	1f1a      	subs	r2, r3, #4
 80021f0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80021f4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80021f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002208:	3b01      	subs	r3, #1
 800220a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800220e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002212:	2b00      	cmp	r3, #0
 8002214:	f47f ace0 	bne.w	8001bd8 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	ed93 7a00 	vldr	s14, [r3]
 800221e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	ed93 7a00 	vldr	s14, [r3]
 8002234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002240:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	3304      	adds	r3, #4
 8002248:	ed93 7a00 	vldr	s14, [r3]
 800224c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002250:	3304      	adds	r3, #4
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	3304      	adds	r3, #4
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800226a:	3304      	adds	r3, #4
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002274:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800227c:	3304      	adds	r3, #4
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800228e:	3304      	adds	r3, #4
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002298:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800229c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80022a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80022bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80022c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80022dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022e0:	3304      	adds	r3, #4
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80022ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022f2:	3304      	adds	r3, #4
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fc:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002304:	3304      	adds	r3, #4
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800230e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002316:	3304      	adds	r3, #4
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002320:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002328:	ed93 7a00 	vldr	s14, [r3]
 800232c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002340:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002348:	ed93 7a00 	vldr	s14, [r3]
 800234c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	1d1a      	adds	r2, r3, #4
 8002360:	603a      	str	r2, [r7, #0]
 8002362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002366:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800236a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800236e:	3304      	adds	r3, #4
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800237c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002380:	3304      	adds	r3, #4
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	1d1a      	adds	r2, r3, #4
 800238a:	603a      	str	r2, [r7, #0]
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8002394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800239c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80023a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023a8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80023ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80023b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80023c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80023d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023d8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80023dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80023e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023e8:	1d1a      	adds	r2, r3, #4
 80023ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80023ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fa:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80023fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002408:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800240c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002414:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8002418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8002420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8002428:	edd7 7a07 	vldr	s15, [r7, #28]
 800242c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002434:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8002438:	edd7 7a08 	vldr	s15, [r7, #32]
 800243c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002444:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8002448:	edd7 7a08 	vldr	s15, [r7, #32]
 800244c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002454:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8002458:	edd7 7a07 	vldr	s15, [r7, #28]
 800245c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8002468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002472:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002476:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002486:	1d1a      	adds	r2, r3, #4
 8002488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800248c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002490:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002498:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800249c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80024a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80024ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80024bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80024cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80024dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80024ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f0:	1d1a      	adds	r2, r3, #4
 80024f2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80024f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80024fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8002506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800250a:	1d1a      	adds	r2, r3, #4
 800250c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002510:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002514:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800251c:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002524:	b299      	uxth	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	2304      	movs	r3, #4
 800252c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800252e:	f000 f8c3 	bl	80026b8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8002532:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002536:	b299      	uxth	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	2304      	movs	r3, #4
 800253e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002540:	f000 f8ba 	bl	80026b8 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8002544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002548:	b299      	uxth	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2304      	movs	r3, #4
 8002550:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002552:	f000 f8b1 	bl	80026b8 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8002556:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800255a:	b299      	uxth	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	2304      	movs	r3, #4
 8002562:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002564:	f000 f8a8 	bl	80026b8 <arm_radix8_butterfly_f32>
}
 8002568:	bf00      	nop
 800256a:	37b0      	adds	r7, #176	; 0xb0
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	4611      	mov	r1, r2
 800257c:	461a      	mov	r2, r3
 800257e:	460b      	mov	r3, r1
 8002580:	71fb      	strb	r3, [r7, #7]
 8002582:	4613      	mov	r3, r2
 8002584:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d117      	bne.n	80025c2 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3304      	adds	r3, #4
 8002596:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	e00d      	b.n	80025ba <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	eef1 7a67 	vneg.f32	s15, s15
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	3308      	adds	r3, #8
 80025b2:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d3ed      	bcc.n	800259e <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c8:	d024      	beq.n	8002614 <arm_cfft_f32+0xa4>
 80025ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ce:	d80b      	bhi.n	80025e8 <arm_cfft_f32+0x78>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d01f      	beq.n	8002614 <arm_cfft_f32+0xa4>
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d802      	bhi.n	80025de <arm_cfft_f32+0x6e>
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d016      	beq.n	800260a <arm_cfft_f32+0x9a>
 80025dc:	e028      	b.n	8002630 <arm_cfft_f32+0xc0>
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d01d      	beq.n	800261e <arm_cfft_f32+0xae>
 80025e2:	2b80      	cmp	r3, #128	; 0x80
 80025e4:	d011      	beq.n	800260a <arm_cfft_f32+0x9a>
 80025e6:	e023      	b.n	8002630 <arm_cfft_f32+0xc0>
 80025e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ec:	d00d      	beq.n	800260a <arm_cfft_f32+0x9a>
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f2:	d803      	bhi.n	80025fc <arm_cfft_f32+0x8c>
 80025f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f8:	d011      	beq.n	800261e <arm_cfft_f32+0xae>
 80025fa:	e019      	b.n	8002630 <arm_cfft_f32+0xc0>
 80025fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002600:	d008      	beq.n	8002614 <arm_cfft_f32+0xa4>
 8002602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002606:	d00a      	beq.n	800261e <arm_cfft_f32+0xae>
 8002608:	e012      	b.n	8002630 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7fe ff90 	bl	8001532 <arm_cfft_radix8by2_f32>
        break;
 8002612:	e00d      	b.n	8002630 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff f97f 	bl	800191a <arm_cfft_radix8by4_f32>
        break;
 800261c:	e008      	b.n	8002630 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	b299      	uxth	r1, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	2301      	movs	r3, #1
 8002628:	68b8      	ldr	r0, [r7, #8]
 800262a:	f000 f845 	bl	80026b8 <arm_radix8_butterfly_f32>
        break;
 800262e:	bf00      	nop
    }  

    if( bitReverseFlag )
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8999      	ldrh	r1, [r3, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	461a      	mov	r2, r3
 8002640:	68b8      	ldr	r0, [r7, #8]
 8002642:	f7fd fdd5 	bl	80001f0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d130      	bne.n	80026ae <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800265a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800265e:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e01c      	b.n	80026a6 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1d1a      	adds	r2, r3, #4
 8002670:	61ba      	str	r2, [r7, #24]
 8002672:	ed93 7a00 	vldr	s14, [r3]
 8002676:	edd7 7a04 	vldr	s15, [r7, #16]
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	eeb1 7a67 	vneg.f32	s14, s15
 800268c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	3304      	adds	r3, #4
 800269e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3301      	adds	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d3de      	bcc.n	800266c <arm_cfft_f32+0xfc>
        }
    }
}
 80026ae:	bf00      	nop
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b0bd      	sub	sp, #244	; 0xf4
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	460b      	mov	r3, r1
 80026c6:	817b      	strh	r3, [r7, #10]
 80026c8:	4613      	mov	r3, r2
 80026ca:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <arm_radix8_butterfly_f32+0x3c>)
 80026ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80026e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e4:	08db      	lsrs	r3, r3, #3
 80026e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026f0:	e002      	b.n	80026f8 <arm_radix8_butterfly_f32+0x40>
 80026f2:	bf00      	nop
 80026f4:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 80026f8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80026fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002700:	4413      	add	r3, r2
 8002702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002706:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800270a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270e:	4413      	add	r3, r2
 8002710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8002714:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271c:	4413      	add	r3, r2
 800271e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8002722:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	4413      	add	r3, r2
 800272c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002730:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002738:	4413      	add	r3, r2
 800273a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800273e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002746:	4413      	add	r3, r2
 8002748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800274c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002754:	4413      	add	r3, r2
 8002756:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800275a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800277e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80027a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	ed93 7a00 	vldr	s14, [r3]
 80027b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4413      	add	r3, r2
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80027c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	ed93 7a00 	vldr	s14, [r3]
 80027d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80027ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	ed93 7a00 	vldr	s14, [r3]
 80027f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4413      	add	r3, r2
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800280e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	ed93 7a00 	vldr	s14, [r3]
 800281c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4413      	add	r3, r2
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	ed93 7a00 	vldr	s14, [r3]
 8002840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	ed93 7a00 	vldr	s14, [r3]
 8002864:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002876:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800287a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800287e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800288a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800288e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800289a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800289e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80028a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80028aa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80028ae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 80028ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028c8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80028d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028e2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80028e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ea:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80028ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	3304      	adds	r3, #4
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	3304      	adds	r3, #4
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002912:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	3304      	adds	r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	3304      	adds	r3, #4
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800293e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3304      	adds	r3, #4
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	ed93 7a00 	vldr	s14, [r3]
 800294e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3304      	adds	r3, #4
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002962:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	3304      	adds	r3, #4
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3304      	adds	r3, #4
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800298e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	3304      	adds	r3, #4
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4413      	add	r3, r2
 800299a:	ed93 7a00 	vldr	s14, [r3]
 800299e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	3304      	adds	r3, #4
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80029b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	3304      	adds	r3, #4
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4413      	add	r3, r2
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	3304      	adds	r3, #4
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029da:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80029de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	3304      	adds	r3, #4
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4413      	add	r3, r2
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	3304      	adds	r3, #4
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a02:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	ed93 7a00 	vldr	s14, [r3]
 8002a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002a2e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002a3e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a42:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002a4e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002a52:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002a5e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002a62:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002a6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	3304      	adds	r3, #4
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a7e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a86:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	3304      	adds	r3, #4
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4413      	add	r3, r2
 8002a96:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002a9a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8002aa6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002ab4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4413      	add	r3, r2
 8002aca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002ace:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002aea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	3304      	adds	r3, #4
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b06:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002b12:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002b16:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b26:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002b2a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002b2e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b36:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8002b42:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002b46:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b56:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002b5a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002b5e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8002b72:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002b76:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8002b82:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002b86:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002b92:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002b96:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002ba2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002ba6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bae:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002bb2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002bb6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002bc2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002bc6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002bd2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002bd6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bde:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8002be2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002be6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bee:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c00:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c08:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002c0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4413      	add	r3, r2
 8002c16:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c1a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c22:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002c34:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002c4e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c56:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	3304      	adds	r3, #4
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c6a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c72:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002c76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4413      	add	r3, r2
 8002c82:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c86:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002c92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	3304      	adds	r3, #4
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002ca2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002caa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002cae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4413      	add	r3, r2
 8002cba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002cbe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc6:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 8002cca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8002cd8:	897b      	ldrh	r3, [r7, #10]
 8002cda:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	f4ff ad0a 	bcc.w	80026f8 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8002ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	f240 84e3 	bls.w	80036b4 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002d00:	4413      	add	r3, r2
 8002d02:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002d0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d10:	4413      	add	r3, r2
 8002d12:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002d14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d18:	4413      	add	r3, r2
 8002d1a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002d1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d20:	4413      	add	r3, r2
 8002d22:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002d24:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d28:	4413      	add	r3, r2
 8002d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d30:	4413      	add	r3, r2
 8002d32:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002d34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d38:	4413      	add	r3, r2
 8002d3a:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8002d3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002d92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	3304      	adds	r3, #4
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	3304      	adds	r3, #4
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	3304      	adds	r3, #4
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	3304      	adds	r3, #4
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8002de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	3304      	adds	r3, #4
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8002df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002dfe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e06:	4413      	add	r3, r2
 8002e08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002e0c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e14:	4413      	add	r3, r2
 8002e16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	4413      	add	r3, r2
 8002e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002e28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e30:	4413      	add	r3, r2
 8002e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	4413      	add	r3, r2
 8002e40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002e44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002e52:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002e60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	ed93 7a00 	vldr	s14, [r3]
 8002e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002e84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	ed93 7a00 	vldr	s14, [r3]
 8002e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	ed93 7a00 	vldr	s14, [r3]
 8002eb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	ed93 7a00 	vldr	s14, [r3]
 8002eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eec:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002ef0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	ed93 7a00 	vldr	s14, [r3]
 8002efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002f14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	ed93 7a00 	vldr	s14, [r3]
 8002f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f34:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4413      	add	r3, r2
 8002f42:	ed93 7a00 	vldr	s14, [r3]
 8002f46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f58:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002f5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	ed93 7a00 	vldr	s14, [r3]
 8002f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002f80:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002f84:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002f90:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002f94:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002fa0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002fa4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fac:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002fb0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002fb4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002fc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002fce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002fda:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002fde:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	ed93 7a00 	vldr	s14, [r3]
 8002ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	3304      	adds	r3, #4
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	3304      	adds	r3, #4
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	3304      	adds	r3, #4
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003036:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800303a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	3304      	adds	r3, #4
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	ed93 7a00 	vldr	s14, [r3]
 800304a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	3304      	adds	r3, #4
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	3304      	adds	r3, #4
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	ed93 7a00 	vldr	s14, [r3]
 8003072:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	3304      	adds	r3, #4
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800308a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	3304      	adds	r3, #4
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	ed93 7a00 	vldr	s14, [r3]
 800309a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	3304      	adds	r3, #4
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ae:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80030b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	3304      	adds	r3, #4
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	ed93 7a00 	vldr	s14, [r3]
 80030c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	3304      	adds	r3, #4
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80030da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	3304      	adds	r3, #4
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	ed93 7a00 	vldr	s14, [r3]
 80030ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3304      	adds	r3, #4
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fe:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	3304      	adds	r3, #4
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	ed93 7a00 	vldr	s14, [r3]
 8003112:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	3304      	adds	r3, #4
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003126:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800312a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800312e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003136:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800313a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800313e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800314a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800314e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800315a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800315e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003166:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800316a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800316e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003176:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800317a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800317e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003186:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800318a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	3304      	adds	r3, #4
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800319a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80031a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 80031b6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80031ba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80031be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 80031c6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80031ca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80031ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 80031d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80031da:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 80031e6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80031ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 80031f6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80031fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8003206:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800320a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8003216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	ed97 7a07 	vldr	s14, [r7, #28]
 8003224:	edd7 7a06 	vldr	s15, [r7, #24]
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	3304      	adds	r3, #4
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003240:	edd7 7a04 	vldr	s15, [r7, #16]
 8003244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003248:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800324c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003250:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003258:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800325c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003260:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800326c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003270:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003278:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800327c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003280:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003288:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800328c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	ed97 7a07 	vldr	s14, [r7, #28]
 800329a:	edd7 7a06 	vldr	s15, [r7, #24]
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80032a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	3304      	adds	r3, #4
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80032c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80032c6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 80032d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80032d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80032e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80032e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 80032f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80032f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003310:	edd7 7a06 	vldr	s15, [r7, #24]
 8003314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003318:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800331c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	3304      	adds	r3, #4
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	ed97 7a05 	vldr	s14, [r7, #20]
 800332c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003338:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800333c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003344:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8003350:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003354:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003364:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8003368:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800336c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003374:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003380:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003384:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003394:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003398:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800339c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80033a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80033a8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80033ac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80033b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80033b8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80033bc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80033c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80033c8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80033cc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80033d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80033d8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80033dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80033e8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80033ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80033f8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80033fc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003404:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003408:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800340c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003414:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003418:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800341c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003424:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003428:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800342c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003434:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003438:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800343c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003444:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003448:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800344c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003454:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003458:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800345c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003464:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003468:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800346c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003478:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800347c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003484:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003488:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800348c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003494:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003498:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800349c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80034a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80034a8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80034ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80034b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80034b8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80034bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80034c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80034c8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80034cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80034d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80034d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80034e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80034ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ee:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80034f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	3304      	adds	r3, #4
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003502:	edd7 7a04 	vldr	s15, [r7, #16]
 8003506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800350a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800350e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003512:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800351e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003522:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800352e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003532:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800353e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003542:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800354e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	ed97 7a07 	vldr	s14, [r7, #28]
 800355c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003564:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	3304      	adds	r3, #4
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	ed97 7a05 	vldr	s14, [r7, #20]
 8003578:	edd7 7a04 	vldr	s15, [r7, #16]
 800357c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003580:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003584:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003588:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800358c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003590:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003594:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003598:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800359c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80035a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80035a8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80035ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80035b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80035b8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80035bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80035c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80035d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80035d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035da:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80035de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	3304      	adds	r3, #4
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4413      	add	r3, r2
 80035ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80035ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80035f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80035fa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80035fe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003606:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800360a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800360e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003616:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800361a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800361e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800362a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800362e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800363a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	ed97 7a07 	vldr	s14, [r7, #28]
 8003648:	edd7 7a06 	vldr	s15, [r7, #24]
 800364c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003650:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	3304      	adds	r3, #4
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	ed97 7a05 	vldr	s14, [r7, #20]
 8003664:	edd7 7a04 	vldr	s15, [r7, #16]
 8003668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366c:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 8003670:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003678:	4413      	add	r3, r2
 800367a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003684:	429a      	cmp	r2, r3
 8003686:	f4ff abba 	bcc.w	8002dfe <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	3301      	adds	r3, #1
 8003690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 8003694:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369c:	429a      	cmp	r2, r3
 800369e:	f4ff ab2c 	bcc.w	8002cfa <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 80036a2:	893b      	ldrh	r3, [r7, #8]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ac:	2b07      	cmp	r3, #7
 80036ae:	f63f a813 	bhi.w	80026d8 <arm_radix8_butterfly_f32+0x20>
}
 80036b2:	e000      	b.n	80036b6 <arm_radix8_butterfly_f32+0xffe>
         break;
 80036b4:	bf00      	nop
}
 80036b6:	bf00      	nop
 80036b8:	37f4      	adds	r7, #244	; 0xf4
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop

080036c4 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
void writeRegister(uint8_t address,uint8_t value)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	460a      	mov	r2, r1
 80036ce:	71fb      	strb	r3, [r7, #7]
 80036d0:	4613      	mov	r3, r2
 80036d2:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	2b3f      	cmp	r3, #63	; 0x3f
 80036d8:	d901      	bls.n	80036de <writeRegister+0x1a>
		address = 63;
 80036da:	233f      	movs	r3, #63	; 0x3f
 80036dc:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80036e8:	2200      	movs	r2, #0
 80036ea:	2110      	movs	r1, #16
 80036ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f0:	f003 fd6a 	bl	80071c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 80036f4:	1df9      	adds	r1, r7, #7
 80036f6:	2364      	movs	r3, #100	; 0x64
 80036f8:	2201      	movs	r2, #1
 80036fa:	4809      	ldr	r0, [pc, #36]	; (8003720 <writeRegister+0x5c>)
 80036fc:	f005 fadd 	bl	8008cba <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,100);
 8003700:	1db9      	adds	r1, r7, #6
 8003702:	2364      	movs	r3, #100	; 0x64
 8003704:	2201      	movs	r2, #1
 8003706:	4806      	ldr	r0, [pc, #24]	; (8003720 <writeRegister+0x5c>)
 8003708:	f005 fad7 	bl	8008cba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800370c:	2201      	movs	r2, #1
 800370e:	2110      	movs	r1, #16
 8003710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003714:	f003 fd58 	bl	80071c8 <HAL_GPIO_WritePin>
	

}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20012bcc 	.word	0x20012bcc

08003724 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	71fb      	strb	r3, [r7, #7]
 8003730:	4613      	mov	r3, r2
 8003732:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	2b3f      	cmp	r3, #63	; 0x3f
 8003738:	d901      	bls.n	800373e <readRegister+0x1a>
		address = 63;
 800373a:	233f      	movs	r3, #63	; 0x3f
 800373c:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 800373e:	79bb      	ldrb	r3, [r7, #6]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d905      	bls.n	8003750 <readRegister+0x2c>
		address |= 0x40;
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374a:	b2db      	uxtb	r3, r3
 800374c:	71fb      	strb	r3, [r7, #7]
 800374e:	e004      	b.n	800375a <readRegister+0x36>
		else	
		address &= ~(0x40);
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003756:	b2db      	uxtb	r3, r3
 8003758:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003760:	b2db      	uxtb	r3, r3
 8003762:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8003764:	2200      	movs	r2, #0
 8003766:	2110      	movs	r1, #16
 8003768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800376c:	f003 fd2c 	bl	80071c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 8003770:	1df9      	adds	r1, r7, #7
 8003772:	2364      	movs	r3, #100	; 0x64
 8003774:	2201      	movs	r2, #1
 8003776:	480a      	ldr	r0, [pc, #40]	; (80037a0 <readRegister+0x7c>)
 8003778:	f005 fa9f 	bl	8008cba <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,100);
 800377c:	79bb      	ldrb	r3, [r7, #6]
 800377e:	b29a      	uxth	r2, r3
 8003780:	2364      	movs	r3, #100	; 0x64
 8003782:	6839      	ldr	r1, [r7, #0]
 8003784:	4806      	ldr	r0, [pc, #24]	; (80037a0 <readRegister+0x7c>)
 8003786:	f005 fbfe 	bl	8008f86 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800378a:	2201      	movs	r2, #1
 800378c:	2110      	movs	r1, #16
 800378e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003792:	f003 fd19 	bl	80071c8 <HAL_GPIO_WritePin>
	
	
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20012bcc 	.word	0x20012bcc

080037a4 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
void adxlBW(ADXL_InitTypeDef * adxl)
		{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	4619      	mov	r1, r3
 80037b4:	202c      	movs	r0, #44	; 0x2c
 80037b6:	f7ff ff85 	bl	80036c4 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	789b      	ldrb	r3, [r3, #2]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d11a      	bne.n	80037f8 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	f043 0310 	orr.w	r3, r3, #16
 80037c8:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) || ((adxl->Rate)>12) ) bwreg += 7;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	78db      	ldrb	r3, [r3, #3]
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d903      	bls.n	80037da <adxlBW+0x36>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	78db      	ldrb	r3, [r3, #3]
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d903      	bls.n	80037e2 <adxlBW+0x3e>
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	3307      	adds	r3, #7
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	e004      	b.n	80037ec <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	78da      	ldrb	r2, [r3, #3]
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	4413      	add	r3, r2
 80037ea:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	4619      	mov	r1, r3
 80037f0:	202c      	movs	r0, #44	; 0x2c
 80037f2:	f7ff ff67 	bl	80036c4 <writeRegister>
	
				if ( ((adxl->Rate) <6) || ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 80037f6:	e015      	b.n	8003824 <adxlBW+0x80>
				if ( ((adxl->Rate) <6) || ((adxl->Rate)>15) ) bwreg += 6;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	78db      	ldrb	r3, [r3, #3]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d903      	bls.n	8003808 <adxlBW+0x64>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	78db      	ldrb	r3, [r3, #3]
 8003804:	2b0f      	cmp	r3, #15
 8003806:	d903      	bls.n	8003810 <adxlBW+0x6c>
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	3306      	adds	r3, #6
 800380c:	73fb      	strb	r3, [r7, #15]
 800380e:	e004      	b.n	800381a <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	78da      	ldrb	r2, [r3, #3]
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	4413      	add	r3, r2
 8003818:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	4619      	mov	r1, r3
 800381e:	202c      	movs	r0, #44	; 0x2c
 8003820:	f7ff ff50 	bl	80036c4 <writeRegister>
		}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 8003834:	2300      	movs	r3, #0
 8003836:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	4619      	mov	r1, r3
 800383c:	2031      	movs	r0, #49	; 0x31
 800383e:	f7ff ff41 	bl	80036c4 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	019b      	lsls	r3, r3, #6
 8003848:	b25a      	sxtb	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	015b      	lsls	r3, r3, #5
 8003850:	b25b      	sxtb	r3, r3
 8003852:	4313      	orrs	r3, r2
 8003854:	b25a      	sxtb	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	799b      	ldrb	r3, [r3, #6]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	b25b      	sxtb	r3, r3
 800385e:	4313      	orrs	r3, r2
 8003860:	b25a      	sxtb	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	795b      	ldrb	r3, [r3, #5]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	b25b      	sxtb	r3, r3
 800386a:	4313      	orrs	r3, r2
 800386c:	b25b      	sxtb	r3, r3
 800386e:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	791a      	ldrb	r2, [r3, #4]
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	4413      	add	r3, r2
 8003878:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	4619      	mov	r1, r3
 800387e:	2031      	movs	r0, #49	; 0x31
 8003880:	f7ff ff20 	bl	80036c4 <writeRegister>
			}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl, uint8_t * id)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	//delay_init();
	//TM_Delay_Init();
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8003896:	2201      	movs	r2, #1
 8003898:	2110      	movs	r1, #16
 800389a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800389e:	f003 fc93 	bl	80071c8 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	//TM_DelayMicros(10);
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID, id,1);
 80038a2:	2201      	movs	r2, #1
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	2000      	movs	r0, #0
 80038a8:	f7ff ff3c 	bl	8003724 <readRegister>
	//TM_DelayMicros(10);

	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff79 	bl	80037a4 <adxlBW>
	adxlFormat(adxl);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ffba 	bl	800382c <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	795b      	ldrb	r3, [r3, #5]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d140      	bne.n	8003942 <ADXL_Init+0xb6>
			{
			switch (adxl->Range) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	791b      	ldrb	r3, [r3, #4]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d847      	bhi.n	8003958 <ADXL_Init+0xcc>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <ADXL_Init+0x44>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003911 	.word	0x08003911
 80038dc:	08003929 	.word	0x08003929
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <ADXL_Init+0x12c>)
 80038e2:	4a36      	ldr	r2, [pc, #216]	; (80039bc <ADXL_Init+0x130>)
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <ADXL_Init+0x12c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a35      	ldr	r2, [pc, #212]	; (80039c0 <ADXL_Init+0x134>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <ADXL_Init+0x134>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a34      	ldr	r2, [pc, #208]	; (80039c4 <ADXL_Init+0x138>)
 80038f4:	6013      	str	r3, [r2, #0]
								break;
 80038f6:	e02f      	b.n	8003958 <ADXL_Init+0xcc>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 80038f8:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <ADXL_Init+0x12c>)
 80038fa:	4a33      	ldr	r2, [pc, #204]	; (80039c8 <ADXL_Init+0x13c>)
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <ADXL_Init+0x12c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a2f      	ldr	r2, [pc, #188]	; (80039c0 <ADXL_Init+0x134>)
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <ADXL_Init+0x134>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2e      	ldr	r2, [pc, #184]	; (80039c4 <ADXL_Init+0x138>)
 800390c:	6013      	str	r3, [r2, #0]
								break;
 800390e:	e023      	b.n	8003958 <ADXL_Init+0xcc>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8003910:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <ADXL_Init+0x12c>)
 8003912:	4a2e      	ldr	r2, [pc, #184]	; (80039cc <ADXL_Init+0x140>)
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <ADXL_Init+0x12c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <ADXL_Init+0x134>)
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <ADXL_Init+0x134>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <ADXL_Init+0x138>)
 8003924:	6013      	str	r3, [r2, #0]
								break;
 8003926:	e017      	b.n	8003958 <ADXL_Init+0xcc>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 8003928:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <ADXL_Init+0x12c>)
 800392a:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <ADXL_Init+0x144>)
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <ADXL_Init+0x12c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <ADXL_Init+0x134>)
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <ADXL_Init+0x134>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <ADXL_Init+0x138>)
 800393c:	6013      	str	r3, [r2, #0]
								break;
 800393e:	bf00      	nop
 8003940:	e00a      	b.n	8003958 <ADXL_Init+0xcc>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <ADXL_Init+0x12c>)
 8003944:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <ADXL_Init+0x130>)
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <ADXL_Init+0x12c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1c      	ldr	r2, [pc, #112]	; (80039c0 <ADXL_Init+0x134>)
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <ADXL_Init+0x134>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <ADXL_Init+0x138>)
 8003956:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8003958:	f107 030f 	add.w	r3, r7, #15
 800395c:	2201      	movs	r2, #1
 800395e:	4619      	mov	r1, r3
 8003960:	202d      	movs	r0, #45	; 0x2d
 8003962:	f7ff fedf 	bl	8003724 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	79db      	ldrb	r3, [r3, #7]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <ADXL_Init+0xee>
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	f043 0310 	orr.w	r3, r3, #16
 8003974:	b2db      	uxtb	r3, r3
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e004      	b.n	8003984 <ADXL_Init+0xf8>
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	f023 0310 	bic.w	r3, r3, #16
 8003980:	b2db      	uxtb	r3, r3
 8003982:	73fb      	strb	r3, [r7, #15]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7a1b      	ldrb	r3, [r3, #8]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <ADXL_Init+0x10c>
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	f043 0320 	orr.w	r3, r3, #32
 8003992:	b2db      	uxtb	r3, r3
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e004      	b.n	80039a2 <ADXL_Init+0x116>
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	f023 0320 	bic.w	r3, r3, #32
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	73fb      	strb	r3, [r7, #15]
			writeRegister(POWER_CTL,reg);
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	4619      	mov	r1, r3
 80039a6:	202d      	movs	r0, #45	; 0x2d
 80039a8:	f7ff fe8c 	bl	80036c4 <writeRegister>
			

			//writeRegister(INT_ENABLE, 0x80);

	return ADXL_OK;
 80039ac:	2300      	movs	r3, #0
	
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000224 	.word	0x20000224
 80039bc:	3b808081 	.word	0x3b808081
 80039c0:	20000220 	.word	0x20000220
 80039c4:	2000021c 	.word	0x2000021c
 80039c8:	3c010204 	.word	0x3c010204
 80039cc:	3c820821 	.word	0x3c820821
 80039d0:	3d042108 	.word	0x3d042108

080039d4 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80039de:	f107 030f 	add.w	r3, r7, #15
 80039e2:	2201      	movs	r2, #1
 80039e4:	4619      	mov	r1, r3
 80039e6:	202d      	movs	r0, #45	; 0x2d
 80039e8:	f7ff fe9c 	bl	8003724 <readRegister>
			switch (s) {
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <ADXL_Measure+0x24>
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d010      	beq.n	8003a18 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 80039f6:	e01a      	b.n	8003a2e <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	f023 0304 	bic.w	r3, r3, #4
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	202d      	movs	r0, #45	; 0x2d
 8003a12:	f7ff fe57 	bl	80036c4 <writeRegister>
				break;
 8003a16:	e00a      	b.n	8003a2e <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	f023 0308 	bic.w	r3, r3, #8
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4619      	mov	r1, r3
 8003a26:	202d      	movs	r0, #45	; 0x2d
 8003a28:	f7ff fe4c 	bl	80036c4 <writeRegister>
				break;				
 8003a2c:	bf00      	nop
		}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <ADXL_test>:
regs[0] = BW_RATE
regs[1] = DATA_FORMAT
regs[2] = POWER_CTL
*/
void ADXL_test(uint8_t * regs)
		{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
			readRegister(BW_RATE,&regs[0],1);
 8003a3e:	2201      	movs	r2, #1
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	202c      	movs	r0, #44	; 0x2c
 8003a44:	f7ff fe6e 	bl	8003724 <readRegister>
			readRegister(DATA_FORMAT,&regs[1],1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4619      	mov	r1, r3
 8003a50:	2031      	movs	r0, #49	; 0x31
 8003a52:	f7ff fe67 	bl	8003724 <readRegister>
			readRegister(POWER_CTL,&regs[2],1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3302      	adds	r3, #2
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	202d      	movs	r0, #45	; 0x2d
 8003a60:	f7ff fe60 	bl	8003724 <readRegister>
			__NOP();
 8003a64:	bf00      	nop
		}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <ADXL_IntProto>:
* Put this function wherever you want to implement interrupt routines, e.g. EXTI_Callback
*/

void ADXL_IntProto(void)
	
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
			uint8_t reg=0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	71fb      	strb	r3, [r7, #7]
			readRegister(INT_SOURCE,&reg,1);
 8003a78:	1dfb      	adds	r3, r7, #7
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	2030      	movs	r0, #48	; 0x30
 8003a80:	f7ff fe50 	bl	8003724 <readRegister>
	
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <ADXL345_Init>:
/*
 * TODO: Init ADXL345 parameter and Start measurement
 * */

void ADXL345_Init()
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0

	  ADXL_InitTypeDef adxl_config;
	  adxl_config.Range = RANGE_16G;
 8003a92:	2303      	movs	r3, #3
 8003a94:	723b      	strb	r3, [r7, #8]
	  adxl_config.Resolution = RESOLUTION_FULL;
 8003a96:	2301      	movs	r3, #1
 8003a98:	727b      	strb	r3, [r7, #9]
	  adxl_config.AutoSleep = AUTOSLEEPOFF;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	72fb      	strb	r3, [r7, #11]
	  adxl_config.LPMode = LPMODE_NORMAL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	71bb      	strb	r3, [r7, #6]
	  //adxl_config.LPMode = LPMODE_LOWPOWER;
	  adxl_config.Rate = BWRATE_3200;
 8003aa2:	230f      	movs	r3, #15
 8003aa4:	71fb      	strb	r3, [r7, #7]
	  adxl_config.SPIMode = SPIMODE_4WIRE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	713b      	strb	r3, [r7, #4]
	  adxl_config.IntMode = INT_ACTIVEHIGH;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	717b      	strb	r3, [r7, #5]

	  adxlStatus InitStatus = ADXL_Init(&adxl_config, &ADXLid);
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	490f      	ldr	r1, [pc, #60]	; (8003af0 <ADXL345_Init+0x64>)
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff feea 	bl	800388c <ADXL_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]
	  if(ADXLid == 0xE5)InitStatus = ADXL_OK;
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <ADXL345_Init+0x64>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2be5      	cmp	r3, #229	; 0xe5
 8003ac2:	d101      	bne.n	8003ac8 <ADXL345_Init+0x3c>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
	  if(InitStatus == ADXL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d100      	bne.n	8003ad0 <ADXL345_Init+0x44>
	  {
		  __NOP();
 8003ace:	bf00      	nop

	  }

	  ADXL_Measure(ON);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7ff ff7f 	bl	80039d4 <ADXL_Measure>
	  writeRegister(INT_MAP, 0x10);
 8003ad6:	2110      	movs	r1, #16
 8003ad8:	202f      	movs	r0, #47	; 0x2f
 8003ada:	f7ff fdf3 	bl	80036c4 <writeRegister>
	  writeRegister(INT_ENABLE, 0x80);
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	202e      	movs	r0, #46	; 0x2e
 8003ae2:	f7ff fdef 	bl	80036c4 <writeRegister>
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000228 	.word	0x20000228
 8003af4:	00000000 	.word	0x00000000

08003af8 <AcquireData>:
/*
 *TODO: AcquireData from SPI
 * */
void AcquireData(uint8_t *data)
//void AcquireData()
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

	readRegister(DATA0,data,6);
 8003b00:	2206      	movs	r2, #6
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	2032      	movs	r0, #50	; 0x32
 8003b06:	f7ff fe0d 	bl	8003724 <readRegister>
	XfftInstance.data0 = data[0];
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	4bb1      	ldr	r3, [pc, #708]	; (8003dd8 <AcquireData+0x2e0>)
 8003b12:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b16:	801a      	strh	r2, [r3, #0]
	XfftInstance.data1 = data[1];
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	4bad      	ldr	r3, [pc, #692]	; (8003dd8 <AcquireData+0x2e0>)
 8003b22:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b26:	3302      	adds	r3, #2
 8003b28:	801a      	strh	r2, [r3, #0]
	YfftInstance.data0 = data[2];
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	4baa      	ldr	r3, [pc, #680]	; (8003ddc <AcquireData+0x2e4>)
 8003b34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b38:	801a      	strh	r2, [r3, #0]
	YfftInstance.data1 = data[3];
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3303      	adds	r3, #3
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	4ba6      	ldr	r3, [pc, #664]	; (8003ddc <AcquireData+0x2e4>)
 8003b44:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b48:	3302      	adds	r3, #2
 8003b4a:	801a      	strh	r2, [r3, #0]
	ZfftInstance.data0 = data[4];
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	4ba2      	ldr	r3, [pc, #648]	; (8003de0 <AcquireData+0x2e8>)
 8003b56:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b5a:	801a      	strh	r2, [r3, #0]
	ZfftInstance.data1 = data[5];
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3305      	adds	r3, #5
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	4b9e      	ldr	r3, [pc, #632]	; (8003de0 <AcquireData+0x2e8>)
 8003b66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	801a      	strh	r2, [r3, #0]
	XfftInstance.acceleration = ((uint8_t)XfftInstance.data1<<8)|(uint8_t)XfftInstance.data0;
 8003b6e:	4b9a      	ldr	r3, [pc, #616]	; (8003dd8 <AcquireData+0x2e0>)
 8003b70:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b74:	3302      	adds	r3, #2
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	b21a      	sxth	r2, r3
 8003b7e:	4b96      	ldr	r3, [pc, #600]	; (8003dd8 <AcquireData+0x2e0>)
 8003b80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	b21b      	sxth	r3, r3
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	b21a      	sxth	r2, r3
 8003b8e:	4b92      	ldr	r3, [pc, #584]	; (8003dd8 <AcquireData+0x2e0>)
 8003b90:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b94:	3304      	adds	r3, #4
 8003b96:	801a      	strh	r2, [r3, #0]
	YfftInstance.acceleration = ((uint8_t)YfftInstance.data1<<8)|(uint8_t)YfftInstance.data0;
 8003b98:	4b90      	ldr	r3, [pc, #576]	; (8003ddc <AcquireData+0x2e4>)
 8003b9a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	b21a      	sxth	r2, r3
 8003ba8:	4b8c      	ldr	r3, [pc, #560]	; (8003ddc <AcquireData+0x2e4>)
 8003baa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	b21b      	sxth	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b21a      	sxth	r2, r3
 8003bb8:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <AcquireData+0x2e4>)
 8003bba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	801a      	strh	r2, [r3, #0]
	ZfftInstance.acceleration = ((uint8_t)ZfftInstance.data1<<8)|(uint8_t)ZfftInstance.data0;
 8003bc2:	4b87      	ldr	r3, [pc, #540]	; (8003de0 <AcquireData+0x2e8>)
 8003bc4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bc8:	3302      	adds	r3, #2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	b21a      	sxth	r2, r3
 8003bd2:	4b83      	ldr	r3, [pc, #524]	; (8003de0 <AcquireData+0x2e8>)
 8003bd4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	4313      	orrs	r3, r2
 8003be0:	b21a      	sxth	r2, r3
 8003be2:	4b7f      	ldr	r3, [pc, #508]	; (8003de0 <AcquireData+0x2e8>)
 8003be4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003be8:	3304      	adds	r3, #4
 8003bea:	801a      	strh	r2, [r3, #0]

	//3.9 is scale of LSB(one bit) mg, 1000 is scale to g
	XfftInstance.accelerationfloat = (float)XfftInstance.acceleration * 3.9 / 1000;
 8003bec:	4b7a      	ldr	r3, [pc, #488]	; (8003dd8 <AcquireData+0x2e0>)
 8003bee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c00:	ee17 0a90 	vmov	r0, s15
 8003c04:	f7fc fcc0 	bl	8000588 <__aeabi_f2d>
 8003c08:	a371      	add	r3, pc, #452	; (adr r3, 8003dd0 <AcquireData+0x2d8>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fd13 	bl	8000638 <__aeabi_dmul>
 8003c12:	4603      	mov	r3, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	4618      	mov	r0, r3
 8003c18:	4621      	mov	r1, r4
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	4b71      	ldr	r3, [pc, #452]	; (8003de4 <AcquireData+0x2ec>)
 8003c20:	f7fc fe34 	bl	800088c <__aeabi_ddiv>
 8003c24:	4603      	mov	r3, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	f7fc fffc 	bl	8000c28 <__aeabi_d2f>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <AcquireData+0x2e0>)
 8003c34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c38:	3308      	adds	r3, #8
 8003c3a:	601a      	str	r2, [r3, #0]
	YfftInstance.accelerationfloat = (float)YfftInstance.acceleration  * 3.9 / 1000;
 8003c3c:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <AcquireData+0x2e4>)
 8003c3e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c42:	3304      	adds	r3, #4
 8003c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c50:	ee17 0a90 	vmov	r0, s15
 8003c54:	f7fc fc98 	bl	8000588 <__aeabi_f2d>
 8003c58:	a35d      	add	r3, pc, #372	; (adr r3, 8003dd0 <AcquireData+0x2d8>)
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f7fc fceb 	bl	8000638 <__aeabi_dmul>
 8003c62:	4603      	mov	r3, r0
 8003c64:	460c      	mov	r4, r1
 8003c66:	4618      	mov	r0, r3
 8003c68:	4621      	mov	r1, r4
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	4b5d      	ldr	r3, [pc, #372]	; (8003de4 <AcquireData+0x2ec>)
 8003c70:	f7fc fe0c 	bl	800088c <__aeabi_ddiv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	4618      	mov	r0, r3
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	f7fc ffd4 	bl	8000c28 <__aeabi_d2f>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <AcquireData+0x2e4>)
 8003c84:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c88:	3308      	adds	r3, #8
 8003c8a:	601a      	str	r2, [r3, #0]
	ZfftInstance.accelerationfloat = (float)ZfftInstance.acceleration  * 3.9 / 1000;
 8003c8c:	4b54      	ldr	r3, [pc, #336]	; (8003de0 <AcquireData+0x2e8>)
 8003c8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c92:	3304      	adds	r3, #4
 8003c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c98:	ee07 3a90 	vmov	s15, r3
 8003c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca0:	ee17 0a90 	vmov	r0, s15
 8003ca4:	f7fc fc70 	bl	8000588 <__aeabi_f2d>
 8003ca8:	a349      	add	r3, pc, #292	; (adr r3, 8003dd0 <AcquireData+0x2d8>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc fcc3 	bl	8000638 <__aeabi_dmul>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	4621      	mov	r1, r4
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b49      	ldr	r3, [pc, #292]	; (8003de4 <AcquireData+0x2ec>)
 8003cc0:	f7fc fde4 	bl	800088c <__aeabi_ddiv>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	4621      	mov	r1, r4
 8003ccc:	f7fc ffac 	bl	8000c28 <__aeabi_d2f>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <AcquireData+0x2e8>)
 8003cd4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003cd8:	3308      	adds	r3, #8
 8003cda:	601a      	str	r2, [r3, #0]

	// move X axis data to buffer
	XfftInstance.bufferforFFT[sampleIndex * 2] = XfftInstance.accelerationfloat;
 8003cdc:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <AcquireData+0x2f0>)
 8003cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ce2:	0059      	lsls	r1, r3, #1
 8003ce4:	4b3c      	ldr	r3, [pc, #240]	; (8003dd8 <AcquireData+0x2e0>)
 8003ce6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003cea:	3308      	adds	r3, #8
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	483a      	ldr	r0, [pc, #232]	; (8003dd8 <AcquireData+0x2e0>)
 8003cf0:	008b      	lsls	r3, r1, #2
 8003cf2:	4403      	add	r3, r0
 8003cf4:	601a      	str	r2, [r3, #0]
	XfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003cf6:	4b3c      	ldr	r3, [pc, #240]	; (8003de8 <AcquireData+0x2f0>)
 8003cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4a35      	ldr	r2, [pc, #212]	; (8003dd8 <AcquireData+0x2e0>)
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
	XfftInstance.bufferforTimeSV[sampleIndex] = XfftInstance.accelerationfloat;
 8003d0c:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <AcquireData+0x2f0>)
 8003d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d12:	4618      	mov	r0, r3
 8003d14:	4b30      	ldr	r3, [pc, #192]	; (8003dd8 <AcquireData+0x2e0>)
 8003d16:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	492e      	ldr	r1, [pc, #184]	; (8003dd8 <AcquireData+0x2e0>)
 8003d20:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	601a      	str	r2, [r3, #0]

	// move Y axis data to buffer
	YfftInstance.bufferforFFT[sampleIndex * 2] = YfftInstance.accelerationfloat;
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <AcquireData+0x2f0>)
 8003d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d30:	0059      	lsls	r1, r3, #1
 8003d32:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <AcquireData+0x2e4>)
 8003d34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d38:	3308      	adds	r3, #8
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4827      	ldr	r0, [pc, #156]	; (8003ddc <AcquireData+0x2e4>)
 8003d3e:	008b      	lsls	r3, r1, #2
 8003d40:	4403      	add	r3, r0
 8003d42:	601a      	str	r2, [r3, #0]
	YfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003d44:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <AcquireData+0x2f0>)
 8003d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <AcquireData+0x2e4>)
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
	YfftInstance.bufferforTimeSV[sampleIndex] = YfftInstance.accelerationfloat;
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <AcquireData+0x2f0>)
 8003d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d60:	4618      	mov	r0, r3
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <AcquireData+0x2e4>)
 8003d64:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d68:	3308      	adds	r3, #8
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	491b      	ldr	r1, [pc, #108]	; (8003ddc <AcquireData+0x2e4>)
 8003d6e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	601a      	str	r2, [r3, #0]

	// move Z axis data to buffer
	ZfftInstance.bufferforFFT[sampleIndex * 2] = ZfftInstance.accelerationfloat;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <AcquireData+0x2f0>)
 8003d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d7e:	0059      	lsls	r1, r3, #1
 8003d80:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <AcquireData+0x2e8>)
 8003d82:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d86:	3308      	adds	r3, #8
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4815      	ldr	r0, [pc, #84]	; (8003de0 <AcquireData+0x2e8>)
 8003d8c:	008b      	lsls	r3, r1, #2
 8003d8e:	4403      	add	r3, r0
 8003d90:	601a      	str	r2, [r3, #0]
	ZfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <AcquireData+0x2f0>)
 8003d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <AcquireData+0x2e8>)
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
	ZfftInstance.bufferforTimeSV[sampleIndex] = ZfftInstance.accelerationfloat;
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <AcquireData+0x2f0>)
 8003daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dae:	4618      	mov	r0, r3
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <AcquireData+0x2e8>)
 8003db2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003db6:	3308      	adds	r3, #8
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4909      	ldr	r1, [pc, #36]	; (8003de0 <AcquireData+0x2e8>)
 8003dbc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	601a      	str	r2, [r3, #0]


}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	33333333 	.word	0x33333333
 8003dd4:	400f3333 	.word	0x400f3333
 8003dd8:	2000abc0 	.word	0x2000abc0
 8003ddc:	20012c30 	.word	0x20012c30
 8003de0:	20002940 	.word	0x20002940
 8003de4:	408f4000 	.word	0x408f4000
 8003de8:	20000236 	.word	0x20000236

08003dec <FeatureExtraction>:
 *TODO : Calculate Time domain and Frequency Domain
 * */


void FeatureExtraction()
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
	//Calculate Z axis statistic
	movingAverage_filter(ZfftInstance.bufferforTimeSV, ZfftInstance.bufferforfilter, 2048,5);
 8003df0:	2305      	movs	r3, #5
 8003df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df6:	491d      	ldr	r1, [pc, #116]	; (8003e6c <FeatureExtraction+0x80>)
 8003df8:	481d      	ldr	r0, [pc, #116]	; (8003e70 <FeatureExtraction+0x84>)
 8003dfa:	f000 f853 	bl	8003ea4 <movingAverage_filter>
	Calculate_FFT_RMS(ZfftInstance.bufferforFFT, testOutput, fftSize, &Zstatistic_value);
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <FeatureExtraction+0x88>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <FeatureExtraction+0x8c>)
 8003e04:	491d      	ldr	r1, [pc, #116]	; (8003e7c <FeatureExtraction+0x90>)
 8003e06:	481e      	ldr	r0, [pc, #120]	; (8003e80 <FeatureExtraction+0x94>)
 8003e08:	f000 f98e 	bl	8004128 <Calculate_FFT_RMS>
	Calculate_All_statisitc(ZfftInstance.bufferforfilter, dataLength/2, &Zstatistic_value);
 8003e0c:	4a1a      	ldr	r2, [pc, #104]	; (8003e78 <FeatureExtraction+0x8c>)
 8003e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e12:	4816      	ldr	r0, [pc, #88]	; (8003e6c <FeatureExtraction+0x80>)
 8003e14:	f000 f958 	bl	80040c8 <Calculate_All_statisitc>

	//Calculate X axis statistic
	movingAverage_filter(XfftInstance.bufferforTimeSV, XfftInstance.bufferforfilter, 2048,5);
 8003e18:	2305      	movs	r3, #5
 8003e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e1e:	4919      	ldr	r1, [pc, #100]	; (8003e84 <FeatureExtraction+0x98>)
 8003e20:	4819      	ldr	r0, [pc, #100]	; (8003e88 <FeatureExtraction+0x9c>)
 8003e22:	f000 f83f 	bl	8003ea4 <movingAverage_filter>
	Calculate_FFT_RMS(XfftInstance.bufferforFFT, testOutput, fftSize, &Xstatistic_value);
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <FeatureExtraction+0x88>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <FeatureExtraction+0xa0>)
 8003e2c:	4913      	ldr	r1, [pc, #76]	; (8003e7c <FeatureExtraction+0x90>)
 8003e2e:	4818      	ldr	r0, [pc, #96]	; (8003e90 <FeatureExtraction+0xa4>)
 8003e30:	f000 f97a 	bl	8004128 <Calculate_FFT_RMS>
	Calculate_All_statisitc(XfftInstance.bufferforfilter, dataLength/2, &Xstatistic_value);
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <FeatureExtraction+0xa0>)
 8003e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e3a:	4812      	ldr	r0, [pc, #72]	; (8003e84 <FeatureExtraction+0x98>)
 8003e3c:	f000 f944 	bl	80040c8 <Calculate_All_statisitc>

	//Calculate Y axis statistic
	movingAverage_filter(YfftInstance.bufferforTimeSV, YfftInstance.bufferforfilter, 2048,5);
 8003e40:	2305      	movs	r3, #5
 8003e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e46:	4913      	ldr	r1, [pc, #76]	; (8003e94 <FeatureExtraction+0xa8>)
 8003e48:	4813      	ldr	r0, [pc, #76]	; (8003e98 <FeatureExtraction+0xac>)
 8003e4a:	f000 f82b 	bl	8003ea4 <movingAverage_filter>
	Calculate_FFT_RMS(YfftInstance.bufferforFFT , testOutput, fftSize, &Ystatistic_value);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <FeatureExtraction+0x88>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <FeatureExtraction+0xb0>)
 8003e54:	4909      	ldr	r1, [pc, #36]	; (8003e7c <FeatureExtraction+0x90>)
 8003e56:	4812      	ldr	r0, [pc, #72]	; (8003ea0 <FeatureExtraction+0xb4>)
 8003e58:	f000 f966 	bl	8004128 <Calculate_FFT_RMS>
	Calculate_All_statisitc(YfftInstance.bufferforfilter, dataLength/2, &Ystatistic_value);
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <FeatureExtraction+0xb0>)
 8003e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e62:	480c      	ldr	r0, [pc, #48]	; (8003e94 <FeatureExtraction+0xa8>)
 8003e64:	f000 f930 	bl	80040c8 <Calculate_All_statisitc>


}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	2000894c 	.word	0x2000894c
 8003e70:	20006940 	.word	0x20006940
 8003e74:	20000000 	.word	0x20000000
 8003e78:	20002448 	.word	0x20002448
 8003e7c:	20000448 	.word	0x20000448
 8003e80:	20002940 	.word	0x20002940
 8003e84:	20010bcc 	.word	0x20010bcc
 8003e88:	2000ebc0 	.word	0x2000ebc0
 8003e8c:	20000244 	.word	0x20000244
 8003e90:	2000abc0 	.word	0x2000abc0
 8003e94:	20018c3c 	.word	0x20018c3c
 8003e98:	20016c30 	.word	0x20016c30
 8003e9c:	200002f0 	.word	0x200002f0
 8003ea0:	20012c30 	.word	0x20012c30

08003ea4 <movingAverage_filter>:

void movingAverage_filter(float * input_data, float * filterdata, int length, int filterOrder)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]

	for(uint16_t i=0; i<length; i++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	82fb      	strh	r3, [r7, #22]
 8003eb6:	e07d      	b.n	8003fb4 <movingAverage_filter+0x110>
	{
		if(i > filterOrder )
 8003eb8:	8afb      	ldrh	r3, [r7, #22]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	da3f      	bge.n	8003f40 <movingAverage_filter+0x9c>
		{
			filterdata[i] = (input_data[i] + input_data[i-1] + input_data[i-2]+ input_data[i-3]+ input_data[i-4]) / filterOrder;
 8003ec0:	8afb      	ldrh	r3, [r7, #22]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	ed93 7a00 	vldr	s14, [r3]
 8003ecc:	8afb      	ldrh	r3, [r7, #22]
 8003ece:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	edd3 7a00 	vldr	s15, [r3]
 8003ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ee2:	8afb      	ldrh	r3, [r7, #22]
 8003ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ee8:	3b02      	subs	r3, #2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	edd3 7a00 	vldr	s15, [r3]
 8003ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ef8:	8afb      	ldrh	r3, [r7, #22]
 8003efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003efe:	3b03      	subs	r3, #3
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f0e:	8afb      	ldrh	r3, [r7, #22]
 8003f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f14:	3b04      	subs	r3, #4
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f2e:	8afb      	ldrh	r3, [r7, #22]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	4413      	add	r3, r2
 8003f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f3a:	edc3 7a00 	vstr	s15, [r3]
 8003f3e:	e036      	b.n	8003fae <movingAverage_filter+0x10a>
		}
		else
		{
			filterdata[i] = (input_data[i] + input_data[i+1] + input_data[i+2]+ input_data[i+3]+  input_data[i+4]) / filterOrder  ;
 8003f40:	8afb      	ldrh	r3, [r7, #22]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	ed93 7a00 	vldr	s14, [r3]
 8003f4c:	8afb      	ldrh	r3, [r7, #22]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	edd3 7a00 	vldr	s15, [r3]
 8003f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f5e:	8afb      	ldrh	r3, [r7, #22]
 8003f60:	3302      	adds	r3, #2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	edd3 7a00 	vldr	s15, [r3]
 8003f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f70:	8afb      	ldrh	r3, [r7, #22]
 8003f72:	3303      	adds	r3, #3
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4413      	add	r3, r2
 8003f7a:	edd3 7a00 	vldr	s15, [r3]
 8003f7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f82:	8afb      	ldrh	r3, [r7, #22]
 8003f84:	3304      	adds	r3, #4
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	edd3 7a00 	vldr	s15, [r3]
 8003f90:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9e:	8afb      	ldrh	r3, [r7, #22]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003faa:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i=0; i<length; i++)
 8003fae:	8afb      	ldrh	r3, [r7, #22]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	82fb      	strh	r3, [r7, #22]
 8003fb4:	8afb      	ldrh	r3, [r7, #22]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	f73f af7d 	bgt.w	8003eb8 <movingAverage_filter+0x14>
		}
	}

}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <Calculate_FreqOverAll>:
	float Kurtosis = m4 / (m2 * m2) - 3.0;
    return Kurtosis;
}

float Calculate_FreqOverAll(float *x, int n)
{
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	b08b      	sub	sp, #44	; 0x2c
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
	float ParsevalFftPower = 0;
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24

	float32_t samplingRate = 3200;
 8003fdc:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <Calculate_FreqOverAll+0xf4>)
 8003fde:	61fb      	str	r3, [r7, #28]
	float32_t frequencyScale = samplingRate/(float)n;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff2:	edc7 7a06 	vstr	s15, [r7, #24]
	int target_fre_calculation_end = 1000 / frequencyScale;
 8003ff6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80040c4 <Calculate_FreqOverAll+0xf8>
 8003ffa:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004006:	ee17 3a90 	vmov	r3, s15
 800400a:	617b      	str	r3, [r7, #20]
	int target_fre_calculation_start = 10 / (float)frequencyScale;
 800400c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004010:	ed97 7a06 	vldr	s14, [r7, #24]
 8004014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800401c:	ee17 3a90 	vmov	r3, s15
 8004020:	613b      	str	r3, [r7, #16]
	float SpeedparsevalFftPower = 0;
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
	float ans = 0;
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
	for(int i = target_fre_calculation_start; i<target_fre_calculation_end; i++)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	623b      	str	r3, [r7, #32]
 8004032:	e016      	b.n	8004062 <Calculate_FreqOverAll+0x96>
	{
		//FFTRMSArray[i] = (testOutput[i]*2)/4096;
		ParsevalFftPower += x[i] * x[i];
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	ed93 7a00 	vldr	s14, [r3]
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004050:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004058:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = target_fre_calculation_start; i<target_fre_calculation_end; i++)
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	3301      	adds	r3, #1
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	6a3a      	ldr	r2, [r7, #32]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	429a      	cmp	r2, r3
 8004068:	dbe4      	blt.n	8004034 <Calculate_FreqOverAll+0x68>
	}

	ans = sqrt(2 * ParsevalFftPower)/n;
 800406a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800406e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004072:	ee17 0a90 	vmov	r0, s15
 8004076:	f7fc fa87 	bl	8000588 <__aeabi_f2d>
 800407a:	4603      	mov	r3, r0
 800407c:	460c      	mov	r4, r1
 800407e:	ec44 3b10 	vmov	d0, r3, r4
 8004082:	f008 fa3b 	bl	800c4fc <sqrt>
 8004086:	ec56 5b10 	vmov	r5, r6, d0
 800408a:	6838      	ldr	r0, [r7, #0]
 800408c:	f7fc fa6a 	bl	8000564 <__aeabi_i2d>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	461a      	mov	r2, r3
 8004096:	4623      	mov	r3, r4
 8004098:	4628      	mov	r0, r5
 800409a:	4631      	mov	r1, r6
 800409c:	f7fc fbf6 	bl	800088c <__aeabi_ddiv>
 80040a0:	4603      	mov	r3, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	4618      	mov	r0, r3
 80040a6:	4621      	mov	r1, r4
 80040a8:	f7fc fdbe 	bl	8000c28 <__aeabi_d2f>
 80040ac:	4603      	mov	r3, r0
 80040ae:	60bb      	str	r3, [r7, #8]


	return ans;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	ee07 3a90 	vmov	s15, r3
}
 80040b6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ba:	372c      	adds	r7, #44	; 0x2c
 80040bc:	46bd      	mov	sp, r7
 80040be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c0:	45480000 	.word	0x45480000
 80040c4:	447a0000 	.word	0x447a0000

080040c8 <Calculate_All_statisitc>:

void Calculate_All_statisitc(float32_t *statisticDataSet, uint16_t dataLength, Sv *staticInstance)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	460b      	mov	r3, r1
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	817b      	strh	r3, [r7, #10]
	uint32_t maxtestIndex = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
	uint32_t mintestIndex = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]

	arm_max_f32(statisticDataSet, dataLength, &staticInstance->Statistic_max, &maxtestIndex);
 80040de:	8979      	ldrh	r1, [r7, #10]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7fd f850 	bl	800118c <arm_max_f32>
	arm_min_f32(statisticDataSet, dataLength, &staticInstance->Statistic_min, &mintestIndex);
 80040ec:	8979      	ldrh	r1, [r7, #10]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	1d1a      	adds	r2, r3, #4
 80040f2:	f107 0310 	add.w	r3, r7, #16
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7fd f8de 	bl	80012b8 <arm_min_f32>
	arm_rms_f32(statisticDataSet, dataLength, &staticInstance->Statistic_rms);
 80040fc:	8979      	ldrh	r1, [r7, #10]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	330c      	adds	r3, #12
 8004102:	461a      	mov	r2, r3
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7fd f98f 	bl	8001428 <arm_rms_f32>
	staticInstance->Statistic_p2p = 1 * (staticInstance->Statistic_max - staticInstance->Statistic_min);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	ed93 7a00 	vldr	s14, [r3]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	edd3 7a01 	vldr	s15, [r3, #4]
 8004116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

}
 8004120:	bf00      	nop
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <Calculate_FFT_RMS>:

void Calculate_FFT_RMS(float32_t * bufferforFFT, float32_t * OutputFFTbuffer, int32_t fftSize, Sv *staticInstance)
{
 8004128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800412c:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8004130:	b08e      	sub	sp, #56	; 0x38
 8004132:	af00      	add	r7, sp, #0
 8004134:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004138:	3c2c      	subs	r4, #44	; 0x2c
 800413a:	6020      	str	r0, [r4, #0]
 800413c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004140:	3830      	subs	r0, #48	; 0x30
 8004142:	6001      	str	r1, [r0, #0]
 8004144:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004148:	3934      	subs	r1, #52	; 0x34
 800414a:	600a      	str	r2, [r1, #0]
 800414c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004150:	3a38      	subs	r2, #56	; 0x38
 8004152:	6013      	str	r3, [r2, #0]
	float32_t maxValue = 0;
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800415c:	f102 0218 	add.w	r2, r2, #24
 8004160:	6013      	str	r3, [r2, #0]
	float32_t Speeddatabuffer[2048];
	float32_t displacementbuffer[2048];
	uint32_t testIndex = 0;
 8004162:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004166:	3b24      	subs	r3, #36	; 0x24
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
	uint32_t ifftFlag = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004172:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8004176:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8004178:	2301      	movs	r3, #1
 800417a:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800417e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8004182:	6013      	str	r3, [r2, #0]

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, bufferforFFT, ifftFlag, doBitReverse);
 8004184:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004188:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004194:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80041a0:	392c      	subs	r1, #44	; 0x2c
 80041a2:	6809      	ldr	r1, [r1, #0]
 80041a4:	4887      	ldr	r0, [pc, #540]	; (80043c4 <Calculate_FFT_RMS+0x29c>)
 80041a6:	f7fe f9e3 	bl	8002570 <arm_cfft_f32>

	/* Process the data through the Complex Magnitude Module for
	calculating the magnitude at each bin */
	arm_cmplx_mag_f32(bufferforFFT, OutputFFTbuffer, fftSize);
 80041aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041ae:	3b34      	subs	r3, #52	; 0x34
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80041b6:	3930      	subs	r1, #48	; 0x30
 80041b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041bc:	3b2c      	subs	r3, #44	; 0x2c
 80041be:	6809      	ldr	r1, [r1, #0]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	f7fc ff23 	bl	800100c <arm_cmplx_mag_f32>

	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(OutputFFTbuffer, fftSize, &maxValue, &testIndex);
 80041c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041ca:	3b34      	subs	r3, #52	; 0x34
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041d2:	3b24      	subs	r3, #36	; 0x24
 80041d4:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80041d8:	f102 0218 	add.w	r2, r2, #24
 80041dc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80041e0:	3830      	subs	r0, #48	; 0x30
 80041e2:	6800      	ldr	r0, [r0, #0]
 80041e4:	f7fc ffd2 	bl	800118c <arm_max_f32>


	for(uint16_t i = 0; i < fftSize; i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80041ee:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80041f2:	8013      	strh	r3, [r2, #0]
 80041f4:	e023      	b.n	800423e <Calculate_FFT_RMS+0x116>
	{
		Speeddatabuffer[i] = OutputFFTbuffer[i];
 80041f6:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80041fa:	f103 0336 	add.w	r3, r3, #54	; 0x36
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	009a      	lsls	r2, r3, #2
 8004202:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004206:	3b30      	subs	r3, #48	; 0x30
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4413      	add	r3, r2
 800420c:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004210:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8004214:	8811      	ldrh	r1, [r2, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800421c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004220:	3b20      	subs	r3, #32
 8004222:	0089      	lsls	r1, r1, #2
 8004224:	440b      	add	r3, r1
 8004226:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < fftSize; i++)
 8004228:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800422c:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004238:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800423c:	8013      	strh	r3, [r2, #0]
 800423e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004242:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8004246:	881a      	ldrh	r2, [r3, #0]
 8004248:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800424c:	3b34      	subs	r3, #52	; 0x34
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4293      	cmp	r3, r2
 8004252:	dcd0      	bgt.n	80041f6 <Calculate_FFT_RMS+0xce>
	}

	//TODO: remove low frequency noise (DC component)
	OutputFFTbuffer[0] = 0;
 8004254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004258:	3b30      	subs	r3, #48	; 0x30
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[1] = 0;
 8004262:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004266:	3b30      	subs	r3, #48	; 0x30
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3304      	adds	r3, #4
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[2] = 0;
 8004272:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004276:	3b30      	subs	r3, #48	; 0x30
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[3] = 0;
 8004282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004286:	3b30      	subs	r3, #48	; 0x30
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[4] = 0;
 8004292:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004296:	3b30      	subs	r3, #48	; 0x30
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3310      	adds	r3, #16
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[5] = 0;
 80042a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042a6:	3b30      	subs	r3, #48	; 0x30
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[6] = 0;
 80042b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042b6:	3b30      	subs	r3, #48	; 0x30
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3318      	adds	r3, #24
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[7] = 0;
 80042c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042c6:	3b30      	subs	r3, #48	; 0x30
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	331c      	adds	r3, #28
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[8] = 0;
 80042d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042d6:	3b30      	subs	r3, #48	; 0x30
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3320      	adds	r3, #32
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[9] = 0;
 80042e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042e6:	3b30      	subs	r3, #48	; 0x30
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3324      	adds	r3, #36	; 0x24
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

	staticInstance->Statistic_FreqOvall = Calculate_FreqOverAll(OutputFFTbuffer,2048);
 80042f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042f6:	3b30      	subs	r3, #48	; 0x30
 80042f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f7ff fe65 	bl	8003fcc <Calculate_FreqOverAll>
 8004302:	eef0 7a40 	vmov.f32	s15, s0
 8004306:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800430a:	3b38      	subs	r3, #56	; 0x38
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/*
	 * Compute Speed Ovall
	 *
	 * */
	float32_t sampleCount = 2048;
 8004312:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8004316:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800431a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800431e:	6013      	str	r3, [r2, #0]
	float32_t samplingRate = 3200;
 8004320:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <Calculate_FFT_RMS+0x2a0>)
 8004322:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004326:	f102 0220 	add.w	r2, r2, #32
 800432a:	6013      	str	r3, [r2, #0]
	float32_t frequencyScale = samplingRate/sampleCount;
 800432c:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004330:	f103 0320 	add.w	r3, r3, #32
 8004334:	edd3 6a00 	vldr	s13, [r3]
 8004338:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800433c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8004340:	ed93 7a00 	vldr	s14, [r3]
 8004344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004348:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800434c:	f103 031c 	add.w	r3, r3, #28
 8004350:	edc3 7a00 	vstr	s15, [r3]

	//2021/0202/George
	//TODO : calculate velocity (speed) overall(RMS)
	for(uint16_t i = 1; i < fftSize / 2; i++)
 8004354:	2301      	movs	r3, #1
 8004356:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800435a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800435e:	8013      	strh	r3, [r2, #0]
 8004360:	e093      	b.n	800448a <Calculate_FFT_RMS+0x362>
	{
		if(i < fftSize/2)
 8004362:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004366:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800436a:	881a      	ldrh	r2, [r3, #0]
 800436c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004370:	3b34      	subs	r3, #52	; 0x34
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	0fd9      	lsrs	r1, r3, #31
 8004376:	440b      	add	r3, r1
 8004378:	105b      	asrs	r3, r3, #1
 800437a:	429a      	cmp	r2, r3
 800437c:	da7a      	bge.n	8004474 <Calculate_FFT_RMS+0x34c>
		{
			if(i ==0)
 800437e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004382:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d121      	bne.n	80043d0 <Calculate_FFT_RMS+0x2a8>
			{
				Speeddatabuffer[i] = Speeddatabuffer[i];
 800438c:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004390:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004394:	881a      	ldrh	r2, [r3, #0]
 8004396:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800439a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800439e:	8819      	ldrh	r1, [r3, #0]
 80043a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80043a4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80043a8:	3b20      	subs	r3, #32
 80043aa:	0092      	lsls	r2, r2, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80043b4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80043b8:	3b20      	subs	r3, #32
 80043ba:	0089      	lsls	r1, r1, #2
 80043bc:	440b      	add	r3, r1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e058      	b.n	8004474 <Calculate_FFT_RMS+0x34c>
 80043c2:	bf00      	nop
 80043c4:	080125bc 	.word	0x080125bc
 80043c8:	45480000 	.word	0x45480000
 80043cc:	46193c00 	.word	0x46193c00
			}
			else
			{
				Speeddatabuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 80043d0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80043d4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80043de:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80043e2:	3b20      	subs	r3, #32
 80043e4:	0092      	lsls	r2, r2, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80043cc <Calculate_FFT_RMS+0x2a4>
 80043f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043f4:	ee17 0a90 	vmov	r0, s15
 80043f8:	f7fc f8c6 	bl	8000588 <__aeabi_f2d>
 80043fc:	4604      	mov	r4, r0
 80043fe:	460d      	mov	r5, r1
 8004400:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004404:	f103 031c 	add.w	r3, r3, #28
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	f7fc f8bd 	bl	8000588 <__aeabi_f2d>
 800440e:	a3be      	add	r3, pc, #760	; (adr r3, 8004708 <Calculate_FFT_RMS+0x5e0>)
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f7fc f910 	bl	8000638 <__aeabi_dmul>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4690      	mov	r8, r2
 800441e:	4699      	mov	r9, r3
 8004420:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004424:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fc f89a 	bl	8000564 <__aeabi_i2d>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4640      	mov	r0, r8
 8004436:	4649      	mov	r1, r9
 8004438:	f7fc f8fe 	bl	8000638 <__aeabi_dmul>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4620      	mov	r0, r4
 8004442:	4629      	mov	r1, r5
 8004444:	f7fc fa22 	bl	800088c <__aeabi_ddiv>
 8004448:	4603      	mov	r3, r0
 800444a:	460c      	mov	r4, r1
 800444c:	461a      	mov	r2, r3
 800444e:	4623      	mov	r3, r4
 8004450:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8004454:	f101 0134 	add.w	r1, r1, #52	; 0x34
 8004458:	880c      	ldrh	r4, [r1, #0]
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	f7fc fbe3 	bl	8000c28 <__aeabi_d2f>
 8004462:	4601      	mov	r1, r0
 8004464:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004468:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800446c:	3b20      	subs	r3, #32
 800446e:	00a2      	lsls	r2, r4, #2
 8004470:	4413      	add	r3, r2
 8004472:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 1; i < fftSize / 2; i++)
 8004474:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004478:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004484:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8004488:	8013      	strh	r3, [r2, #0]
 800448a:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800448e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004492:	881a      	ldrh	r2, [r3, #0]
 8004494:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004498:	3b34      	subs	r3, #52	; 0x34
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0fd9      	lsrs	r1, r3, #31
 800449e:	440b      	add	r3, r1
 80044a0:	105b      	asrs	r3, r3, #1
 80044a2:	429a      	cmp	r2, r3
 80044a4:	f6ff af5d 	blt.w	8004362 <Calculate_FFT_RMS+0x23a>

		}

	}

	Speeddatabuffer[0] = 0;
 80044a8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80044ac:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80044b0:	3b20      	subs	r3, #32
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[1] = 0;
 80044b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80044bc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80044c0:	3b20      	subs	r3, #32
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	605a      	str	r2, [r3, #4]
	Speeddatabuffer[2] = 0;
 80044c8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80044cc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80044d0:	3b20      	subs	r3, #32
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	609a      	str	r2, [r3, #8]
	Speeddatabuffer[3] = 0;
 80044d8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80044dc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80044e0:	3b20      	subs	r3, #32
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	60da      	str	r2, [r3, #12]
	Speeddatabuffer[4] = 0;
 80044e8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80044ec:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80044f0:	3b20      	subs	r3, #32
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	611a      	str	r2, [r3, #16]
	Speeddatabuffer[5] = 0;
 80044f8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80044fc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004500:	3b20      	subs	r3, #32
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
	Speeddatabuffer[6] = 0;
 8004508:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800450c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004510:	3b20      	subs	r3, #32
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	619a      	str	r2, [r3, #24]
	Speeddatabuffer[7] = 0;
 8004518:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800451c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004520:	3b20      	subs	r3, #32
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	61da      	str	r2, [r3, #28]
	Speeddatabuffer[8] = 0;
 8004528:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800452c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004530:	3b20      	subs	r3, #32
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	621a      	str	r2, [r3, #32]
	Speeddatabuffer[9] = 0;
 8004538:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800453c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004540:	3b20      	subs	r3, #32
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	625a      	str	r2, [r3, #36]	; 0x24
	Speeddatabuffer[10] = 0;
 8004548:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800454c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004550:	3b20      	subs	r3, #32
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	629a      	str	r2, [r3, #40]	; 0x28

	//2021/0202/George
	//TODO : calculate displacement overall(RMS)
	for(uint16_t i = 1; i < fftSize / 2; i++)
 8004558:	2301      	movs	r3, #1
 800455a:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800455e:	f102 0232 	add.w	r2, r2, #50	; 0x32
 8004562:	8013      	strh	r3, [r2, #0]
 8004564:	e088      	b.n	8004678 <Calculate_FFT_RMS+0x550>
	{
		if(i < fftSize/2)
 8004566:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800456a:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004574:	3b34      	subs	r3, #52	; 0x34
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0fd9      	lsrs	r1, r3, #31
 800457a:	440b      	add	r3, r1
 800457c:	105b      	asrs	r3, r3, #1
 800457e:	429a      	cmp	r2, r3
 8004580:	da6f      	bge.n	8004662 <Calculate_FFT_RMS+0x53a>
		{
			if(i ==0)
 8004582:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004586:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d118      	bne.n	80045c2 <Calculate_FFT_RMS+0x49a>
			{
				displacementbuffer[i] = Speeddatabuffer[i];
 8004590:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004594:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8004598:	881a      	ldrh	r2, [r3, #0]
 800459a:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800459e:	f103 0332 	add.w	r3, r3, #50	; 0x32
 80045a2:	8819      	ldrh	r1, [r3, #0]
 80045a4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80045a8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80045ac:	3b20      	subs	r3, #32
 80045ae:	0092      	lsls	r2, r2, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045b8:	3b20      	subs	r3, #32
 80045ba:	0089      	lsls	r1, r1, #2
 80045bc:	440b      	add	r3, r1
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e04f      	b.n	8004662 <Calculate_FFT_RMS+0x53a>
			}
			else
			{
				displacementbuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 80045c2:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80045c6:	f103 0332 	add.w	r3, r3, #50	; 0x32
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80045d0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80045d4:	3b20      	subs	r3, #32
 80045d6:	0092      	lsls	r2, r2, #2
 80045d8:	4413      	add	r3, r2
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004710 <Calculate_FFT_RMS+0x5e8>
 80045e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045e6:	ee17 0a90 	vmov	r0, s15
 80045ea:	f7fb ffcd 	bl	8000588 <__aeabi_f2d>
 80045ee:	4604      	mov	r4, r0
 80045f0:	460d      	mov	r5, r1
 80045f2:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80045f6:	f103 031c 	add.w	r3, r3, #28
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	f7fb ffc4 	bl	8000588 <__aeabi_f2d>
 8004600:	a341      	add	r3, pc, #260	; (adr r3, 8004708 <Calculate_FFT_RMS+0x5e0>)
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f7fc f817 	bl	8000638 <__aeabi_dmul>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4690      	mov	r8, r2
 8004610:	4699      	mov	r9, r3
 8004612:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004616:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fb ffa1 	bl	8000564 <__aeabi_i2d>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4640      	mov	r0, r8
 8004628:	4649      	mov	r1, r9
 800462a:	f7fc f805 	bl	8000638 <__aeabi_dmul>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4620      	mov	r0, r4
 8004634:	4629      	mov	r1, r5
 8004636:	f7fc f929 	bl	800088c <__aeabi_ddiv>
 800463a:	4603      	mov	r3, r0
 800463c:	460c      	mov	r4, r1
 800463e:	461a      	mov	r2, r3
 8004640:	4623      	mov	r3, r4
 8004642:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8004646:	f101 0132 	add.w	r1, r1, #50	; 0x32
 800464a:	880c      	ldrh	r4, [r1, #0]
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	f7fc faea 	bl	8000c28 <__aeabi_d2f>
 8004654:	4601      	mov	r1, r0
 8004656:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800465a:	3b20      	subs	r3, #32
 800465c:	00a2      	lsls	r2, r4, #2
 800465e:	4413      	add	r3, r2
 8004660:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 1; i < fftSize / 2; i++)
 8004662:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004666:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004672:	f102 0232 	add.w	r2, r2, #50	; 0x32
 8004676:	8013      	strh	r3, [r2, #0]
 8004678:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800467c:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8004680:	881a      	ldrh	r2, [r3, #0]
 8004682:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004686:	3b34      	subs	r3, #52	; 0x34
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	0fd9      	lsrs	r1, r3, #31
 800468c:	440b      	add	r3, r1
 800468e:	105b      	asrs	r3, r3, #1
 8004690:	429a      	cmp	r2, r3
 8004692:	f6ff af68 	blt.w	8004566 <Calculate_FFT_RMS+0x43e>
		}

	}


	staticInstance->Statistic_SpeedOvall = Calculate_FreqOverAll(Speeddatabuffer,sampleCount);
 8004696:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800469a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800469e:	edd3 7a00 	vldr	s15, [r3]
 80046a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046a6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80046aa:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80046ae:	3b20      	subs	r3, #32
 80046b0:	ee17 1a90 	vmov	r1, s15
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fc89 	bl	8003fcc <Calculate_FreqOverAll>
 80046ba:	eef0 7a40 	vmov.f32	s15, s0
 80046be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046c2:	3b38      	subs	r3, #56	; 0x38
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	staticInstance->Statistic_DisplacementOvall =  Calculate_FreqOverAll(displacementbuffer,sampleCount);
 80046ca:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80046ce:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046de:	3b20      	subs	r3, #32
 80046e0:	ee17 1a90 	vmov	r1, s15
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fc71 	bl	8003fcc <Calculate_FreqOverAll>
 80046ea:	eef0 7a40 	vmov.f32	s15, s0
 80046ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046f2:	3b38      	subs	r3, #56	; 0x38
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80046fa:	bf00      	nop
 80046fc:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8004700:	3738      	adds	r7, #56	; 0x38
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004708:	4d12d84a 	.word	0x4d12d84a
 800470c:	401921fb 	.word	0x401921fb
 8004710:	46193c00 	.word	0x46193c00

08004714 <delay_init>:

//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 800471e:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <delay_init+0x44>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a0d      	ldr	r2, [pc, #52]	; (8004758 <delay_init+0x44>)
 8004724:	f023 0304 	bic.w	r3, r3, #4
 8004728:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	b2da      	uxtb	r2, r3
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <delay_init+0x48>)
 8004732:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <delay_init+0x48>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	0152      	lsls	r2, r2, #5
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4413      	add	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	b29a      	uxth	r2, r3
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <delay_init+0x4c>)
 800474a:	801a      	strh	r2, [r3, #0]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	e000e010 	.word	0xe000e010
 800475c:	20000229 	.word	0x20000229
 8004760:	2000022a 	.word	0x2000022a

08004764 <delay_ms>:
	SysTick->CTRL=0x00;       //關閉計數器
	SysTick->VAL =0X00;       //清空計數器
}

void delay_ms(uint16_t nms)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <delay_ms+0x60>)
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	4611      	mov	r1, r2
 8004776:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <delay_ms+0x64>)
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	6053      	str	r3, [r2, #4]
	//SysTick->LOAD=32;
	SysTick->VAL =0x00;           //清空計數器
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <delay_ms+0x64>)
 8004780:	2200      	movs	r2, #0
 8004782:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <delay_ms+0x64>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <delay_ms+0x64>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8004790:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <delay_ms+0x64>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <delay_ms+0x46>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f2      	beq.n	8004790 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <delay_ms+0x64>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <delay_ms+0x64>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	609a      	str	r2, [r3, #8]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	2000022a 	.word	0x2000022a
 80047c8:	e000e010 	.word	0xe000e010

080047cc <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <delay_us+0x5c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	4a14      	ldr	r2, [pc, #80]	; (800482c <delay_us+0x60>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	fb03 f301 	mul.w	r3, r3, r1
 80047e2:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <delay_us+0x60>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <delay_us+0x60>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a0f      	ldr	r2, [pc, #60]	; (800482c <delay_us+0x60>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <delay_us+0x60>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <delay_us+0x44>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f2      	beq.n	80047f6 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <delay_us+0x60>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <delay_us+0x60>)
 8004818:	2200      	movs	r2, #0
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000229 	.word	0x20000229
 800482c:	e000e010 	.word	0xe000e010

08004830 <RUN_PWR_Mode_Init>:
	/* Request to enter STANDBY mode  */
	HAL_PWR_EnterSTANDBYMode();
}

void RUN_PWR_Mode_Init(RTC_HandleTypeDef *hrtc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
	}
	*/
	//-------RTC Wake up setting---------------------
	//Disable RTC WakeUpTimer
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f004 f957 	bl	8008aec <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800484e:	f002 f94e 	bl	8006aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004852:	f000 f89b 	bl	800498c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004856:	f000 f9af 	bl	8004bb8 <MX_GPIO_Init>
  MX_RTC_Init();
 800485a:	f000 f917 	bl	8004a8c <MX_RTC_Init>
  MX_SPI1_Init();
 800485e:	f000 f93d 	bl	8004adc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8004862:	f000 f979 	bl	8004b58 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  //TODO--Wayne20200925
  RUN_PWR_Mode_Init(&hrtc);
 8004866:	483c      	ldr	r0, [pc, #240]	; (8004958 <main+0x110>)
 8004868:	f7ff ffe2 	bl	8004830 <RUN_PWR_Mode_Init>
  USARTLoRa.Status=WakeUp;
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <main+0x114>)
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
  while(HAL_UART_Receive_IT(&huart3,&USARTLoRa.Rbuffer,1)!=HAL_OK);
 8004874:	bf00      	nop
 8004876:	2201      	movs	r2, #1
 8004878:	4939      	ldr	r1, [pc, #228]	; (8004960 <main+0x118>)
 800487a:	483a      	ldr	r0, [pc, #232]	; (8004964 <main+0x11c>)
 800487c:	f005 f914 	bl	8009aa8 <HAL_UART_Receive_IT>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f7      	bne.n	8004876 <main+0x2e>
  //delay_init(168);
  //delay_init(80);//STM32L4A6 HCLK=80MHz
  delay_init(72);//STM32L4A6 HCLK=16MHz
 8004886:	2048      	movs	r0, #72	; 0x48
 8004888:	f7ff ff44 	bl	8004714 <delay_init>
  ADXL345_Init();
 800488c:	f7ff f8fe 	bl	8003a8c <ADXL345_Init>
  setting Device power mode:
  PWRST.PowerMode =
  			 	 ---RunMode
  			 	 ---StandbyMode
  */
  PWRST.PowerMode = RunMode;
 8004890:	4b35      	ldr	r3, [pc, #212]	; (8004968 <main+0x120>)
 8004892:	2200      	movs	r2, #0
 8004894:	711a      	strb	r2, [r3, #4]
  

  ADXL_test(reg_read);
 8004896:	4835      	ldr	r0, [pc, #212]	; (800496c <main+0x124>)
 8004898:	f7ff f8cd 	bl	8003a36 <ADXL_test>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//TODO:ADXL345 Measure
    while(sampleIndex < dataLength/2)
 800489c:	e01c      	b.n	80048d8 <main+0x90>
    {
    	ADXL_IntProto();
 800489e:	f7ff f8e6 	bl	8003a6e <ADXL_IntProto>
    	readRegister(DATA0,data,6);
 80048a2:	2206      	movs	r2, #6
 80048a4:	4932      	ldr	r1, [pc, #200]	; (8004970 <main+0x128>)
 80048a6:	2032      	movs	r0, #50	; 0x32
 80048a8:	f7fe ff3c 	bl	8003724 <readRegister>
    	if(dataReady == true)
 80048ac:	4b31      	ldr	r3, [pc, #196]	; (8004974 <main+0x12c>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d111      	bne.n	80048d8 <main+0x90>
    	    {
    			delay_us(5);
 80048b4:	2005      	movs	r0, #5
 80048b6:	f7ff ff89 	bl	80047cc <delay_us>
    	    	 AcquireData(&data);
 80048ba:	482d      	ldr	r0, [pc, #180]	; (8004970 <main+0x128>)
 80048bc:	f7ff f91c 	bl	8003af8 <AcquireData>

    			sampleIndex++;
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <main+0x130>)
 80048c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3301      	adds	r3, #1
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <main+0x130>)
 80048d0:	801a      	strh	r2, [r3, #0]
    			dataReady = false;
 80048d2:	4b28      	ldr	r3, [pc, #160]	; (8004974 <main+0x12c>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
    while(sampleIndex < dataLength/2)
 80048d8:	4b27      	ldr	r3, [pc, #156]	; (8004978 <main+0x130>)
 80048da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e2:	dbdc      	blt.n	800489e <main+0x56>
    	    }
    }
    FeatureExtraction();
 80048e4:	f7ff fa82 	bl	8003dec <FeatureExtraction>
    sampleIndex = 0;
 80048e8:	4b23      	ldr	r3, [pc, #140]	; (8004978 <main+0x130>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	801a      	strh	r2, [r3, #0]


	snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f", Zstatistic_value.Statistic_FreqOvall,Zstatistic_value.Statistic_SpeedOvall);
 80048ee:	4b23      	ldr	r3, [pc, #140]	; (800497c <main+0x134>)
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fe48 	bl	8000588 <__aeabi_f2d>
 80048f8:	4604      	mov	r4, r0
 80048fa:	460d      	mov	r5, r1
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <main+0x134>)
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fe41 	bl	8000588 <__aeabi_f2d>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800490e:	e9cd 4500 	strd	r4, r5, [sp]
 8004912:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <main+0x138>)
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	481b      	ldr	r0, [pc, #108]	; (8004984 <main+0x13c>)
 8004918:	f001 ff2c 	bl	8006774 <snprintf_>

	USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 800491c:	4819      	ldr	r0, [pc, #100]	; (8004984 <main+0x13c>)
 800491e:	f7fb fcc7 	bl	80002b0 <strlen>
 8004922:	4603      	mov	r3, r0
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	d804      	bhi.n	8004932 <main+0xea>
 8004928:	4816      	ldr	r0, [pc, #88]	; (8004984 <main+0x13c>)
 800492a:	f7fb fcc1 	bl	80002b0 <strlen>
 800492e:	4603      	mov	r3, r0
 8004930:	e000      	b.n	8004934 <main+0xec>
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	4a14      	ldr	r2, [pc, #80]	; (8004988 <main+0x140>)
 8004936:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
	//USARTBLE.sendTimeout = 100 ;
	if(HAL_UART_Transmit(&huart3, USARTBLE.buffer, USARTBLE.bufferSize,50)==HAL_OK)
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <main+0x140>)
 800493c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004940:	b29a      	uxth	r2, r3
 8004942:	2332      	movs	r3, #50	; 0x32
 8004944:	490f      	ldr	r1, [pc, #60]	; (8004984 <main+0x13c>)
 8004946:	4807      	ldr	r0, [pc, #28]	; (8004964 <main+0x11c>)
 8004948:	f005 f81b 	bl	8009982 <HAL_UART_Transmit>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1c2      	bne.n	80048d8 <main+0x90>
	{
		__NOP();
 8004952:	bf00      	nop
    while(sampleIndex < dataLength/2)
 8004954:	e7c0      	b.n	80048d8 <main+0x90>
 8004956:	bf00      	nop
 8004958:	2000a950 	.word	0x2000a950
 800495c:	20002500 	.word	0x20002500
 8004960:	20002816 	.word	0x20002816
 8004964:	200028c0 	.word	0x200028c0
 8004968:	200028a0 	.word	0x200028a0
 800496c:	2000a94c 	.word	0x2000a94c
 8004970:	20000230 	.word	0x20000230
 8004974:	20000004 	.word	0x20000004
 8004978:	20000236 	.word	0x20000236
 800497c:	20002448 	.word	0x20002448
 8004980:	0800c7d8 	.word	0x0800c7d8
 8004984:	2000aa20 	.word	0x2000aa20
 8004988:	2000a980 	.word	0x2000a980

0800498c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b0ba      	sub	sp, #232	; 0xe8
 8004990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004992:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004996:	2244      	movs	r2, #68	; 0x44
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f006 f882 	bl	800aaa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049b0:	1d3b      	adds	r3, r7, #4
 80049b2:	228c      	movs	r2, #140	; 0x8c
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f006 f874 	bl	800aaa4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80049bc:	2318      	movs	r3, #24
 80049be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80049d4:	2360      	movs	r3, #96	; 0x60
 80049d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049da:	2302      	movs	r3, #2
 80049dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 36;
 80049ec:	2324      	movs	r3, #36	; 0x24
 80049ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049f2:	2302      	movs	r3, #2
 80049f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049f8:	2302      	movs	r3, #2
 80049fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049fe:	2302      	movs	r3, #2
 8004a00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f002 fc71 	bl	80072f0 <HAL_RCC_OscConfig>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004a14:	f000 fa6c 	bl	8004ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a18:	230f      	movs	r3, #15
 8004a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004a36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f003 f87d 	bl	8007b3c <HAL_RCC_ClockConfig>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004a48:	f000 fa52 	bl	8004ef0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3;
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <SystemClock_Config+0xfc>)
 8004a4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004a50:	2300      	movs	r3, #0
 8004a52:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f003 fa70 	bl	8007f44 <HAL_RCCEx_PeriphCLKConfig>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8004a6a:	f000 fa41 	bl	8004ef0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a72:	f002 fbe7 	bl	8007244 <HAL_PWREx_ControlVoltageScaling>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004a7c:	f000 fa38 	bl	8004ef0 <Error_Handler>
  }
}
 8004a80:	bf00      	nop
 8004a82:	37e8      	adds	r7, #232	; 0xe8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	00020004 	.word	0x00020004

08004a8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004a90:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004a92:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <MX_RTC_Init+0x4c>)
 8004a94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004a96:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004a9e:	227f      	movs	r2, #127	; 0x7f
 8004aa0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004ac0:	4804      	ldr	r0, [pc, #16]	; (8004ad4 <MX_RTC_Init+0x48>)
 8004ac2:	f003 ff01 	bl	80088c8 <HAL_RTC_Init>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8004acc:	f000 fa10 	bl	8004ef0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	2000a950 	.word	0x2000a950
 8004ad8:	40002800 	.word	0x40002800

08004adc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004ae2:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <MX_SPI1_Init+0x78>)
 8004ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004aee:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004af4:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004af6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004afa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004afc:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004afe:	2202      	movs	r2, #2
 8004b00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004b02:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b12:	2218      	movs	r2, #24
 8004b14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b2a:	2207      	movs	r2, #7
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b3a:	4805      	ldr	r0, [pc, #20]	; (8004b50 <MX_SPI1_Init+0x74>)
 8004b3c:	f004 f833 	bl	8008ba6 <HAL_SPI_Init>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004b46:	f000 f9d3 	bl	8004ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20012bcc 	.word	0x20012bcc
 8004b54:	40013000 	.word	0x40013000

08004b58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b5c:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b5e:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <MX_USART3_UART_Init+0x5c>)
 8004b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b62:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b6a:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b76:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b7e:	220c      	movs	r2, #12
 8004b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b9a:	4805      	ldr	r0, [pc, #20]	; (8004bb0 <MX_USART3_UART_Init+0x58>)
 8004b9c:	f004 fea3 	bl	80098e6 <HAL_UART_Init>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004ba6:	f000 f9a3 	bl	8004ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004baa:	bf00      	nop
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200028c0 	.word	0x200028c0
 8004bb4:	40004800 	.word	0x40004800

08004bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bce:	4b4d      	ldr	r3, [pc, #308]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	4a4c      	ldr	r2, [pc, #304]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bda:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be6:	4b47      	ldr	r3, [pc, #284]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	4a46      	ldr	r2, [pc, #280]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bf2:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bfe:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	4a40      	ldr	r2, [pc, #256]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004c04:	f043 0308 	orr.w	r3, r3, #8
 8004c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c0a:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c16:	4b3b      	ldr	r3, [pc, #236]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	4a3a      	ldr	r2, [pc, #232]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004c1c:	f043 0302 	orr.w	r3, r3, #2
 8004c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c22:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <MX_GPIO_Init+0x14c>)
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	607b      	str	r3, [r7, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2110      	movs	r1, #16
 8004c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c36:	f002 fac7 	bl	80071c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c40:	4831      	ldr	r0, [pc, #196]	; (8004d08 <MX_GPIO_Init+0x150>)
 8004c42:	f002 fac1 	bl	80071c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004c46:	2200      	movs	r2, #0
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	4830      	ldr	r0, [pc, #192]	; (8004d0c <MX_GPIO_Init+0x154>)
 8004c4c:	f002 fabc 	bl	80071c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c56:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <MX_GPIO_Init+0x158>)
 8004c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	4619      	mov	r1, r3
 8004c64:	482b      	ldr	r0, [pc, #172]	; (8004d14 <MX_GPIO_Init+0x15c>)
 8004c66:	f002 f905 	bl	8006e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c6e:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <MX_GPIO_Init+0x158>)
 8004c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c80:	f002 f8f8 	bl	8006e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c84:	2310      	movs	r3, #16
 8004c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c90:	2300      	movs	r3, #0
 8004c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c94:	f107 0314 	add.w	r3, r7, #20
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c9e:	f002 f8e9 	bl	8006e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cac:	2301      	movs	r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cb4:	f107 0314 	add.w	r3, r7, #20
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4813      	ldr	r0, [pc, #76]	; (8004d08 <MX_GPIO_Init+0x150>)
 8004cbc:	f002 f8da 	bl	8006e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	480d      	ldr	r0, [pc, #52]	; (8004d0c <MX_GPIO_Init+0x154>)
 8004cd8:	f002 f8cc 	bl	8006e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2008      	movs	r0, #8
 8004ce2:	f002 f850 	bl	8006d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004ce6:	2008      	movs	r0, #8
 8004ce8:	f002 f869 	bl	8006dbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8004cec:	2200      	movs	r2, #0
 8004cee:	2101      	movs	r1, #1
 8004cf0:	2028      	movs	r0, #40	; 0x28
 8004cf2:	f002 f848 	bl	8006d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004cf6:	2028      	movs	r0, #40	; 0x28
 8004cf8:	f002 f861 	bl	8006dbe <HAL_NVIC_EnableIRQ>

}
 8004cfc:	bf00      	nop
 8004cfe:	3728      	adds	r7, #40	; 0x28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000
 8004d08:	48000c00 	.word	0x48000c00
 8004d0c:	48000400 	.word	0x48000400
 8004d10:	10110000 	.word	0x10110000
 8004d14:	48000800 	.word	0x48000800

08004d18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//TODO-Wayne0200924
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)//trigger start pin PC13
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d28:	d114      	bne.n	8004d54 <HAL_GPIO_EXTI_Callback+0x3c>
  {
	  delay_ms(10);
 8004d2a:	200a      	movs	r0, #10
 8004d2c:	f7ff fd1a 	bl	8004764 <delay_ms>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_SET)
 8004d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d34:	4819      	ldr	r0, [pc, #100]	; (8004d9c <HAL_GPIO_EXTI_Callback+0x84>)
 8004d36:	f002 fa2f 	bl	8007198 <HAL_GPIO_ReadPin>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d109      	bne.n	8004d54 <HAL_GPIO_EXTI_Callback+0x3c>
	  {
		  if(!PWRST.WLUP_BTstatus )
 8004d40:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <HAL_GPIO_EXTI_Callback+0x88>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f083 0301 	eor.w	r3, r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_GPIO_EXTI_Callback+0x3c>
			  PWRST.WLUP_BTstatus = 1;
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <HAL_GPIO_EXTI_Callback+0x88>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
	  }
  }
  if(GPIO_Pin == GPIO_PIN_2)//SPI data ready
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d11c      	bne.n	8004d94 <HAL_GPIO_EXTI_Callback+0x7c>
	{
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)==GPIO_PIN_SET)
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d60:	f002 fa1a 	bl	8007198 <HAL_GPIO_ReadPin>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d102      	bne.n	8004d70 <HAL_GPIO_EXTI_Callback+0x58>
		  dataReady = true;
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
	  sampleCount++;
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_GPIO_EXTI_Callback+0x90>)
 8004d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3301      	adds	r3, #1
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	b21a      	sxth	r2, r3
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <HAL_GPIO_EXTI_Callback+0x90>)
 8004d80:	801a      	strh	r2, [r3, #0]
	  if(sampleCount > 2048)
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <HAL_GPIO_EXTI_Callback+0x90>)
 8004d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8c:	dd02      	ble.n	8004d94 <HAL_GPIO_EXTI_Callback+0x7c>
	  {
		  sampleCount = 0;
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <HAL_GPIO_EXTI_Callback+0x90>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	801a      	strh	r2, [r3, #0]
	  }


	}
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	48000800 	.word	0x48000800
 8004da0:	200028a0 	.word	0x200028a0
 8004da4:	20000004 	.word	0x20000004
 8004da8:	2000022c 	.word	0x2000022c

08004dac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */

  USARTLoRa.RevStrCount++; //all string receive count
 8004db4:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004db6:	f893 3385 	ldrb.w	r3, [r3, #901]	; 0x385
 8004dba:	3301      	adds	r3, #1
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	4b48      	ldr	r3, [pc, #288]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004dc0:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
  if(USARTLoRa.Rbuffer==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command
 8004dc4:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004dc6:	f893 3316 	ldrb.w	r3, [r3, #790]	; 0x316
 8004dca:	2b0a      	cmp	r3, #10
 8004dcc:	d114      	bne.n	8004df8 <HAL_UART_RxCpltCallback+0x4c>
  {
	  USARTLoRa.RevStrEndCount++;//0x0a("\n" Line feeds string) count
 8004dce:	4b44      	ldr	r3, [pc, #272]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004dd0:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004dda:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
	  if( USARTLoRa.RevStrEndCount==1	&&	USARTLoRa.RevStrCount > 1)
 8004dde:	4b40      	ldr	r3, [pc, #256]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004de0:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d107      	bne.n	8004df8 <HAL_UART_RxCpltCallback+0x4c>
 8004de8:	4b3d      	ldr	r3, [pc, #244]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004dea:	f893 3385 	ldrb.w	r3, [r3, #901]	; 0x385
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d902      	bls.n	8004df8 <HAL_UART_RxCpltCallback+0x4c>
		  USARTLoRa.ResetRevflag = 1;
 8004df2:	4b3b      	ldr	r3, [pc, #236]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	709a      	strb	r2, [r3, #2]
  }

  if(!USARTLoRa.ResetRevflag)//if LoRa not reset
 8004df8:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004dfa:	789b      	ldrb	r3, [r3, #2]
 8004dfc:	f083 0301 	eor.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d024      	beq.n	8004e50 <HAL_UART_RxCpltCallback+0xa4>
  {
  	  USARTLoRa.RevData[USARTLoRa.RxCount++]= USARTLoRa.Rbuffer;
 8004e06:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e08:	f893 3386 	ldrb.w	r3, [r3, #902]	; 0x386
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	b2d1      	uxtb	r1, r2
 8004e10:	4a33      	ldr	r2, [pc, #204]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e12:	f882 1386 	strb.w	r1, [r2, #902]	; 0x386
 8004e16:	4619      	mov	r1, r3
 8004e18:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e1a:	f893 2316 	ldrb.w	r2, [r3, #790]	; 0x316
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e20:	440b      	add	r3, r1
 8004e22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  	  if(USARTLoRa.RevStrEndCount == 2)
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e28:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d138      	bne.n	8004ea2 <HAL_UART_RxCpltCallback+0xf6>
  	  {
  		  USARTLoRa.Revflag = 1;
 8004e30:	4b2b      	ldr	r3, [pc, #172]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	705a      	strb	r2, [r3, #1]
  		  USARTLoRa.RxCount= 0;
 8004e36:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
  		  USARTLoRa.RevStrEndCount = 0;
 8004e3e:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  		  USARTLoRa.RevStrCount = 0;
 8004e46:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
 8004e4e:	e028      	b.n	8004ea2 <HAL_UART_RxCpltCallback+0xf6>
  	  }
    }
    else
    {
    	if(USARTLoRa.RevStrEndCount > 6)
 8004e50:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e52:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d923      	bls.n	8004ea2 <HAL_UART_RxCpltCallback+0xf6>
    	{
    		USARTLoRa.RevData[USARTLoRa.RxCount++]= USARTLoRa.Rbuffer;
 8004e5a:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e5c:	f893 3386 	ldrb.w	r3, [r3, #902]	; 0x386
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	b2d1      	uxtb	r1, r2
 8004e64:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e66:	f882 1386 	strb.w	r1, [r2, #902]	; 0x386
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e6e:	f893 2316 	ldrb.w	r2, [r3, #790]	; 0x316
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e74:	440b      	add	r3, r1
 8004e76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    		if(USARTLoRa.RevStrEndCount == 9)
 8004e7a:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e7c:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8004e80:	2b09      	cmp	r3, #9
 8004e82:	d10e      	bne.n	8004ea2 <HAL_UART_RxCpltCallback+0xf6>
    		{
    			USARTLoRa.Revflag = 1;
 8004e84:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	705a      	strb	r2, [r3, #1]
    			USARTLoRa.RxCount= 0;
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
    			USARTLoRa.RevStrEndCount = 0;
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
    			USARTLoRa.RevStrCount = 0;
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
    		}
    	}

    }

  if(USARTLoRa.RxCount>=64)//if don't receive "\n" Line feeds string full over to 64 byte, clear data
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004ea4:	f893 3386 	ldrb.w	r3, [r3, #902]	; 0x386
 8004ea8:	2b3f      	cmp	r3, #63	; 0x3f
 8004eaa:	d90c      	bls.n	8004ec6 <HAL_UART_RxCpltCallback+0x11a>
  {
	  USARTLoRa.RxCount=0;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <HAL_UART_RxCpltCallback+0x134>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
  	  memset( USARTLoRa.RevData, 0, strlen((const char*)USARTLoRa.RevData) ); //clear Receive data
 8004eb4:	480b      	ldr	r0, [pc, #44]	; (8004ee4 <HAL_UART_RxCpltCallback+0x138>)
 8004eb6:	f7fb f9fb 	bl	80002b0 <strlen>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4808      	ldr	r0, [pc, #32]	; (8004ee4 <HAL_UART_RxCpltCallback+0x138>)
 8004ec2:	f005 fdef 	bl	800aaa4 <memset>
  }
  while(HAL_UART_Receive_IT(&huart3,&USARTLoRa.Rbuffer,1)!=HAL_OK);
 8004ec6:	bf00      	nop
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4907      	ldr	r1, [pc, #28]	; (8004ee8 <HAL_UART_RxCpltCallback+0x13c>)
 8004ecc:	4807      	ldr	r0, [pc, #28]	; (8004eec <HAL_UART_RxCpltCallback+0x140>)
 8004ece:	f004 fdeb 	bl	8009aa8 <HAL_UART_Receive_IT>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f7      	bne.n	8004ec8 <HAL_UART_RxCpltCallback+0x11c>
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20002500 	.word	0x20002500
 8004ee4:	20002820 	.word	0x20002820
 8004ee8:	20002816 	.word	0x20002816
 8004eec:	200028c0 	.word	0x200028c0

08004ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d204      	bcs.n	8004f20 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	7bfa      	ldrb	r2, [r7, #15]
 8004f1e:	701a      	strb	r2, [r3, #0]
  }
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4603      	mov	r3, r0
 8004f3a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e002      	b.n	8004f5e <_strnlen_s+0x16>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <_strnlen_s+0x28>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	603a      	str	r2, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f3      	bne.n	8004f58 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	1ad3      	subs	r3, r2, r3
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	4603      	mov	r3, r0
 8004f8a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	2b2f      	cmp	r3, #47	; 0x2f
 8004f90:	d904      	bls.n	8004f9c <_is_digit+0x1a>
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	2b39      	cmp	r3, #57	; 0x39
 8004f96:	d801      	bhi.n	8004f9c <_is_digit+0x1a>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <_is_digit+0x1c>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004fbc:	e00e      	b.n	8004fdc <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4618      	mov	r0, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6011      	str	r1, [r2, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	4403      	add	r3, r0
 8004fd8:	3b30      	subs	r3, #48	; 0x30
 8004fda:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ffcd 	bl	8004f82 <_is_digit>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e7      	bne.n	8004fbe <_atoi+0xe>
  }
  return i;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d125      	bne.n	8005060 <_out_rev+0x68>
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d120      	bne.n	8005060 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e00a      	b.n	800503a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	1c53      	adds	r3, r2, #1
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	68fc      	ldr	r4, [r7, #12]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	2020      	movs	r0, #32
 8005032:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3301      	adds	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	429a      	cmp	r2, r3
 8005040:	d3f0      	bcc.n	8005024 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8005042:	e00d      	b.n	8005060 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	3b01      	subs	r3, #1
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	4413      	add	r3, r2
 8005050:	7818      	ldrb	r0, [r3, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	1c53      	adds	r3, r2, #1
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	68fc      	ldr	r4, [r7, #12]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	47a0      	blx	r4
  while (len) {
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1ee      	bne.n	8005044 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8005066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00e      	beq.n	800508e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8005070:	e007      	b.n	8005082 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	1c53      	adds	r3, r2, #1
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	68fc      	ldr	r4, [r7, #12]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	2020      	movs	r0, #32
 8005080:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508a:	429a      	cmp	r2, r3
 800508c:	d8f1      	bhi.n	8005072 <_out_rev+0x7a>
    }
  }

  return idx;
 800508e:	687b      	ldr	r3, [r7, #4]
}
 8005090:	4618      	mov	r0, r3
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd90      	pop	{r4, r7, pc}

08005098 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af04      	add	r7, sp, #16
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d136      	bne.n	800511e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d018      	beq.n	80050e8 <_ntoa_format+0x50>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <_ntoa_format+0x50>
 80050c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <_ntoa_format+0x3a>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <_ntoa_format+0x50>
      width--;
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	3b01      	subs	r3, #1
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80050d8:	e006      	b.n	80050e8 <_ntoa_format+0x50>
      buf[len++] = '0';
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	61fa      	str	r2, [r7, #28]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4413      	add	r3, r2
 80050e4:	2230      	movs	r2, #48	; 0x30
 80050e6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d20a      	bcs.n	8005106 <_ntoa_format+0x6e>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b1f      	cmp	r3, #31
 80050f4:	d9f1      	bls.n	80050da <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80050f6:	e006      	b.n	8005106 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	61fa      	str	r2, [r7, #28]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4413      	add	r3, r2
 8005102:	2230      	movs	r2, #48	; 0x30
 8005104:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d006      	beq.n	800511e <_ntoa_format+0x86>
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	429a      	cmp	r2, r3
 8005116:	d202      	bcs.n	800511e <_ntoa_format+0x86>
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b1f      	cmp	r3, #31
 800511c:	d9ec      	bls.n	80050f8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	d058      	beq.n	80051da <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512e:	2b00      	cmp	r3, #0
 8005130:	d116      	bne.n	8005160 <_ntoa_format+0xc8>
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d013      	beq.n	8005160 <_ntoa_format+0xc8>
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	429a      	cmp	r2, r3
 800513e:	d003      	beq.n	8005148 <_ntoa_format+0xb0>
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d10b      	bne.n	8005160 <_ntoa_format+0xc8>
      len--;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3b01      	subs	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <_ntoa_format+0xc8>
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	2b10      	cmp	r3, #16
 8005158:	d102      	bne.n	8005160 <_ntoa_format+0xc8>
        len--;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3b01      	subs	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	2b10      	cmp	r3, #16
 8005164:	d10f      	bne.n	8005186 <_ntoa_format+0xee>
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <_ntoa_format+0xee>
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b1f      	cmp	r3, #31
 8005174:	d807      	bhi.n	8005186 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	61fa      	str	r2, [r7, #28]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4413      	add	r3, r2
 8005180:	2278      	movs	r2, #120	; 0x78
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e01f      	b.n	80051c6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2b10      	cmp	r3, #16
 800518a:	d10f      	bne.n	80051ac <_ntoa_format+0x114>
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <_ntoa_format+0x114>
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2b1f      	cmp	r3, #31
 800519a:	d807      	bhi.n	80051ac <_ntoa_format+0x114>
      buf[len++] = 'X';
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	61fa      	str	r2, [r7, #28]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4413      	add	r3, r2
 80051a6:	2258      	movs	r2, #88	; 0x58
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e00c      	b.n	80051c6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d109      	bne.n	80051c6 <_ntoa_format+0x12e>
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b1f      	cmp	r3, #31
 80051b6:	d806      	bhi.n	80051c6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	61fa      	str	r2, [r7, #28]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4413      	add	r3, r2
 80051c2:	2262      	movs	r2, #98	; 0x62
 80051c4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b1f      	cmp	r3, #31
 80051ca:	d806      	bhi.n	80051da <_ntoa_format+0x142>
      buf[len++] = '0';
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	61fa      	str	r2, [r7, #28]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4413      	add	r3, r2
 80051d6:	2230      	movs	r2, #48	; 0x30
 80051d8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2b1f      	cmp	r3, #31
 80051de:	d824      	bhi.n	800522a <_ntoa_format+0x192>
    if (negative) {
 80051e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <_ntoa_format+0x160>
      buf[len++] = '-';
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	61fa      	str	r2, [r7, #28]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4413      	add	r3, r2
 80051f2:	222d      	movs	r2, #45	; 0x2d
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e018      	b.n	800522a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	61fa      	str	r2, [r7, #28]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4413      	add	r3, r2
 800520c:	222b      	movs	r2, #43	; 0x2b
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e00b      	b.n	800522a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d006      	beq.n	800522a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	61fa      	str	r2, [r7, #28]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4413      	add	r3, r2
 8005226:	2220      	movs	r2, #32
 8005228:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	9303      	str	r3, [sp, #12]
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	9302      	str	r3, [sp, #8]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff fed9 	bl	8004ff8 <_out_rev>
 8005246:	4603      	mov	r3, r0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b096      	sub	sp, #88	; 0x58
 8005254:	af08      	add	r7, sp, #32
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8005262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8005268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526a:	f023 0310 	bic.w	r3, r3, #16
 800526e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <_ntoa_long+0x30>
 800527a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d033      	beq.n	80052e8 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005284:	fbb3 f2f2 	udiv	r2, r3, r2
 8005288:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800528a:	fb01 f202 	mul.w	r2, r1, r2
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005294:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005298:	2b09      	cmp	r3, #9
 800529a:	d804      	bhi.n	80052a6 <_ntoa_long+0x56>
 800529c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052a0:	3330      	adds	r3, #48	; 0x30
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	e00d      	b.n	80052c2 <_ntoa_long+0x72>
 80052a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <_ntoa_long+0x64>
 80052b0:	2241      	movs	r2, #65	; 0x41
 80052b2:	e000      	b.n	80052b6 <_ntoa_long+0x66>
 80052b4:	2261      	movs	r2, #97	; 0x61
 80052b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052ba:	4413      	add	r3, r2
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	3b0a      	subs	r3, #10
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c4:	1c59      	adds	r1, r3, #1
 80052c6:	6379      	str	r1, [r7, #52]	; 0x34
 80052c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80052cc:	440b      	add	r3, r1
 80052ce:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80052d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80052dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <_ntoa_long+0x98>
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	2b1f      	cmp	r3, #31
 80052e6:	d9cb      	bls.n	8005280 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80052e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ea:	9306      	str	r3, [sp, #24]
 80052ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f2:	9304      	str	r3, [sp, #16]
 80052f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80052fc:	9302      	str	r3, [sp, #8]
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	f107 0310 	add.w	r3, r7, #16
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff fec2 	bl	8005098 <_ntoa_format>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3738      	adds	r7, #56	; 0x38
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800531e:	b590      	push	{r4, r7, lr}
 8005320:	b097      	sub	sp, #92	; 0x5c
 8005322:	af08      	add	r7, sp, #32
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8005330:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005334:	4323      	orrs	r3, r4
 8005336:	d103      	bne.n	8005340 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8005338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800533a:	f023 0310 	bic.w	r3, r3, #16
 800533e:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <_ntoa_long_long+0x34>
 800534a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800534e:	4323      	orrs	r3, r4
 8005350:	d039      	beq.n	80053c6 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8005352:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800535a:	f7fb fcb5 	bl	8000cc8 <__aeabi_uldivmod>
 800535e:	461c      	mov	r4, r3
 8005360:	4613      	mov	r3, r2
 8005362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005366:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800536a:	2b09      	cmp	r3, #9
 800536c:	d804      	bhi.n	8005378 <_ntoa_long_long+0x5a>
 800536e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005372:	3330      	adds	r3, #48	; 0x30
 8005374:	b2da      	uxtb	r2, r3
 8005376:	e00d      	b.n	8005394 <_ntoa_long_long+0x76>
 8005378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <_ntoa_long_long+0x68>
 8005382:	2241      	movs	r2, #65	; 0x41
 8005384:	e000      	b.n	8005388 <_ntoa_long_long+0x6a>
 8005386:	2261      	movs	r2, #97	; 0x61
 8005388:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800538c:	4413      	add	r3, r2
 800538e:	b2db      	uxtb	r3, r3
 8005390:	3b0a      	subs	r3, #10
 8005392:	b2da      	uxtb	r2, r3
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	1c59      	adds	r1, r3, #1
 8005398:	6379      	str	r1, [r7, #52]	; 0x34
 800539a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800539e:	440b      	add	r3, r1
 80053a0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80053a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053ac:	f7fb fc8c 	bl	8000cc8 <__aeabi_uldivmod>
 80053b0:	4603      	mov	r3, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80053b8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80053bc:	4323      	orrs	r3, r4
 80053be:	d002      	beq.n	80053c6 <_ntoa_long_long+0xa8>
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	2b1f      	cmp	r3, #31
 80053c4:	d9c5      	bls.n	8005352 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80053c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053ca:	9206      	str	r2, [sp, #24]
 80053cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053ce:	9205      	str	r2, [sp, #20]
 80053d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053d2:	9204      	str	r2, [sp, #16]
 80053d4:	9303      	str	r3, [sp, #12]
 80053d6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff fe53 	bl	8005098 <_ntoa_format>
 80053f2:	4603      	mov	r3, r0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	373c      	adds	r7, #60	; 0x3c
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd90      	pop	{r4, r7, pc}
 80053fc:	0000      	movs	r0, r0
	...

08005400 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b09d      	sub	sp, #116	; 0x74
 8005404:	af04      	add	r7, sp, #16
 8005406:	6178      	str	r0, [r7, #20]
 8005408:	6139      	str	r1, [r7, #16]
 800540a:	60fa      	str	r2, [r7, #12]
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8005422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800542a:	f7fb fb6d 	bl	8000b08 <__aeabi_dcmpeq>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10f      	bne.n	8005454 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8005434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	2303      	movs	r3, #3
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	4baf      	ldr	r3, [pc, #700]	; (8005700 <_ftoa+0x300>)
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6939      	ldr	r1, [r7, #16]
 800544a:	6978      	ldr	r0, [r7, #20]
 800544c:	f7ff fdd4 	bl	8004ff8 <_out_rev>
 8005450:	4603      	mov	r3, r0
 8005452:	e237      	b.n	80058c4 <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800545c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005460:	f7fb fb5c 	bl	8000b1c <__aeabi_dcmplt>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00f      	beq.n	800548a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800546a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005470:	9302      	str	r3, [sp, #8]
 8005472:	2304      	movs	r3, #4
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	4ba3      	ldr	r3, [pc, #652]	; (8005704 <_ftoa+0x304>)
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	6939      	ldr	r1, [r7, #16]
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f7ff fdb9 	bl	8004ff8 <_out_rev>
 8005486:	4603      	mov	r3, r0
 8005488:	e21c      	b.n	80058c4 <_ftoa+0x4c4>
  if (value > DBL_MAX)
 800548a:	f04f 32ff 	mov.w	r2, #4294967295
 800548e:	4b9e      	ldr	r3, [pc, #632]	; (8005708 <_ftoa+0x308>)
 8005490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005494:	f7fb fb60 	bl	8000b58 <__aeabi_dcmpgt>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01d      	beq.n	80054da <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800549e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <_ftoa+0xac>
 80054a8:	4b98      	ldr	r3, [pc, #608]	; (800570c <_ftoa+0x30c>)
 80054aa:	e000      	b.n	80054ae <_ftoa+0xae>
 80054ac:	4b98      	ldr	r3, [pc, #608]	; (8005710 <_ftoa+0x310>)
 80054ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054b0:	f002 0204 	and.w	r2, r2, #4
 80054b4:	2a00      	cmp	r2, #0
 80054b6:	d001      	beq.n	80054bc <_ftoa+0xbc>
 80054b8:	2204      	movs	r2, #4
 80054ba:	e000      	b.n	80054be <_ftoa+0xbe>
 80054bc:	2203      	movs	r2, #3
 80054be:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80054c0:	9103      	str	r1, [sp, #12]
 80054c2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80054c4:	9102      	str	r1, [sp, #8]
 80054c6:	9201      	str	r2, [sp, #4]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	6939      	ldr	r1, [r7, #16]
 80054d0:	6978      	ldr	r0, [r7, #20]
 80054d2:	f7ff fd91 	bl	8004ff8 <_out_rev>
 80054d6:	4603      	mov	r3, r0
 80054d8:	e1f4      	b.n	80058c4 <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80054da:	a385      	add	r3, pc, #532	; (adr r3, 80056f0 <_ftoa+0x2f0>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054e4:	f7fb fb38 	bl	8000b58 <__aeabi_dcmpgt>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <_ftoa+0x102>
 80054ee:	a382      	add	r3, pc, #520	; (adr r3, 80056f8 <_ftoa+0x2f8>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054f8:	f7fb fb10 	bl	8000b1c <__aeabi_dcmplt>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00f      	beq.n	8005522 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005504:	9302      	str	r3, [sp, #8]
 8005506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	ed97 0b00 	vldr	d0, [r7]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	6939      	ldr	r1, [r7, #16]
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	f000 f9dd 	bl	80058d8 <_etoa>
 800551e:	4603      	mov	r3, r0
 8005520:	e1d0      	b.n	80058c4 <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8005522:	2300      	movs	r3, #0
 8005524:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005534:	f7fb faf2 	bl	8000b1c <__aeabi_dcmplt>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00e      	beq.n	800555c <_ftoa+0x15c>
    negative = true;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8005544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005548:	f04f 0000 	mov.w	r0, #0
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	f7fa feba 	bl	80002c8 <__aeabi_dsub>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800555c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800555e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10e      	bne.n	8005584 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005566:	2306      	movs	r3, #6
 8005568:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800556a:	e00b      	b.n	8005584 <_ftoa+0x184>
    buf[len++] = '0';
 800556c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005572:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005576:	4413      	add	r3, r2
 8005578:	2230      	movs	r2, #48	; 0x30
 800557a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800557e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005580:	3b01      	subs	r3, #1
 8005582:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8005584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005586:	2b1f      	cmp	r3, #31
 8005588:	d802      	bhi.n	8005590 <_ftoa+0x190>
 800558a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800558c:	2b09      	cmp	r3, #9
 800558e:	d8ed      	bhi.n	800556c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8005590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005594:	f7fb fb00 	bl	8000b98 <__aeabi_d2iz>
 8005598:	4603      	mov	r3, r0
 800559a:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800559c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800559e:	f7fa ffe1 	bl	8000564 <__aeabi_i2d>
 80055a2:	4603      	mov	r3, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	461a      	mov	r2, r3
 80055a8:	4623      	mov	r3, r4
 80055aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ae:	f7fa fe8b 	bl	80002c8 <__aeabi_dsub>
 80055b2:	4603      	mov	r3, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	4618      	mov	r0, r3
 80055b8:	4621      	mov	r1, r4
 80055ba:	4a56      	ldr	r2, [pc, #344]	; (8005714 <_ftoa+0x314>)
 80055bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055c6:	461a      	mov	r2, r3
 80055c8:	4623      	mov	r3, r4
 80055ca:	f7fb f835 	bl	8000638 <__aeabi_dmul>
 80055ce:	4603      	mov	r3, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80055d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80055da:	f7fb fb05 	bl	8000be8 <__aeabi_d2uiz>
 80055de:	4603      	mov	r3, r0
 80055e0:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80055e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80055e4:	f7fa ffae 	bl	8000544 <__aeabi_ui2d>
 80055e8:	4603      	mov	r3, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	461a      	mov	r2, r3
 80055ee:	4623      	mov	r3, r4
 80055f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80055f4:	f7fa fe68 	bl	80002c8 <__aeabi_dsub>
 80055f8:	4603      	mov	r3, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	4b44      	ldr	r3, [pc, #272]	; (8005718 <_ftoa+0x318>)
 8005606:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800560a:	f7fb faa5 	bl	8000b58 <__aeabi_dcmpgt>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d018      	beq.n	8005646 <_ftoa+0x246>
    ++frac;
 8005614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005616:	3301      	adds	r3, #1
 8005618:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800561a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800561c:	f7fa ff92 	bl	8000544 <__aeabi_ui2d>
 8005620:	4a3c      	ldr	r2, [pc, #240]	; (8005714 <_ftoa+0x314>)
 8005622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	e9d3 3400 	ldrd	r3, r4, [r3]
 800562c:	461a      	mov	r2, r3
 800562e:	4623      	mov	r3, r4
 8005630:	f7fb fa88 	bl	8000b44 <__aeabi_dcmpge>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01a      	beq.n	8005670 <_ftoa+0x270>
      frac = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800563e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005640:	3301      	adds	r3, #1
 8005642:	657b      	str	r3, [r7, #84]	; 0x54
 8005644:	e014      	b.n	8005670 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	4b33      	ldr	r3, [pc, #204]	; (8005718 <_ftoa+0x318>)
 800564c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005650:	f7fb fa64 	bl	8000b1c <__aeabi_dcmplt>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800565a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <_ftoa+0x26a>
 8005660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800566a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566c:	3301      	adds	r3, #1
 800566e:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8005670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005672:	2b00      	cmp	r3, #0
 8005674:	d136      	bne.n	80056e4 <_ftoa+0x2e4>
    diff = value - (double)whole;
 8005676:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005678:	f7fa ff74 	bl	8000564 <__aeabi_i2d>
 800567c:	4603      	mov	r3, r0
 800567e:	460c      	mov	r4, r1
 8005680:	461a      	mov	r2, r3
 8005682:	4623      	mov	r3, r4
 8005684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005688:	f7fa fe1e 	bl	80002c8 <__aeabi_dsub>
 800568c:	4603      	mov	r3, r0
 800568e:	460c      	mov	r4, r1
 8005690:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8005694:	2301      	movs	r3, #1
 8005696:	461c      	mov	r4, r3
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <_ftoa+0x318>)
 800569e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80056a2:	f7fb fa3b 	bl	8000b1c <__aeabi_dcmplt>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <_ftoa+0x2b0>
 80056ac:	2300      	movs	r3, #0
 80056ae:	461c      	mov	r4, r3
 80056b0:	b2e3      	uxtb	r3, r4
 80056b2:	f083 0301 	eor.w	r3, r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <_ftoa+0x2d0>
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	4b15      	ldr	r3, [pc, #84]	; (8005718 <_ftoa+0x318>)
 80056c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80056c6:	f7fb fa47 	bl	8000b58 <__aeabi_dcmpgt>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d069      	beq.n	80057a4 <_ftoa+0x3a4>
 80056d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8087 	beq.w	80057ea <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80056dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056de:	3301      	adds	r3, #1
 80056e0:	657b      	str	r3, [r7, #84]	; 0x54
 80056e2:	e082      	b.n	80057ea <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 80056e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80056e8:	e039      	b.n	800575e <_ftoa+0x35e>
 80056ea:	bf00      	nop
 80056ec:	f3af 8000 	nop.w
 80056f0:	00000000 	.word	0x00000000
 80056f4:	41cdcd65 	.word	0x41cdcd65
 80056f8:	00000000 	.word	0x00000000
 80056fc:	c1cdcd65 	.word	0xc1cdcd65
 8005700:	0800c7e4 	.word	0x0800c7e4
 8005704:	0800c7e8 	.word	0x0800c7e8
 8005708:	7fefffff 	.word	0x7fefffff
 800570c:	0800c7f0 	.word	0x0800c7f0
 8005710:	0800c7f8 	.word	0x0800c7f8
 8005714:	080125d0 	.word	0x080125d0
 8005718:	3fe00000 	.word	0x3fe00000
      --count;
 800571c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571e:	3b01      	subs	r3, #1
 8005720:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8005722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005724:	4b69      	ldr	r3, [pc, #420]	; (80058cc <_ftoa+0x4cc>)
 8005726:	fba3 2301 	umull	r2, r3, r3, r1
 800572a:	08da      	lsrs	r2, r3, #3
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	1aca      	subs	r2, r1, r3
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800573a:	1c59      	adds	r1, r3, #1
 800573c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800573e:	3230      	adds	r2, #48	; 0x30
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005746:	440b      	add	r3, r1
 8005748:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800574c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574e:	4a5f      	ldr	r2, [pc, #380]	; (80058cc <_ftoa+0x4cc>)
 8005750:	fba2 2303 	umull	r2, r3, r2, r3
 8005754:	08db      	lsrs	r3, r3, #3
 8005756:	653b      	str	r3, [r7, #80]	; 0x50
 8005758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800575e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005760:	2b1f      	cmp	r3, #31
 8005762:	d9db      	bls.n	800571c <_ftoa+0x31c>
 8005764:	e00a      	b.n	800577c <_ftoa+0x37c>
        break;
 8005766:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8005768:	e008      	b.n	800577c <_ftoa+0x37c>
      buf[len++] = '0';
 800576a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005770:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005774:	4413      	add	r3, r2
 8005776:	2230      	movs	r2, #48	; 0x30
 8005778:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800577c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577e:	2b1f      	cmp	r3, #31
 8005780:	d804      	bhi.n	800578c <_ftoa+0x38c>
 8005782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005784:	1e5a      	subs	r2, r3, #1
 8005786:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1ee      	bne.n	800576a <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800578c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578e:	2b1f      	cmp	r3, #31
 8005790:	d82b      	bhi.n	80057ea <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 8005792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005798:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800579c:	4413      	add	r3, r2
 800579e:	222e      	movs	r2, #46	; 0x2e
 80057a0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057a4:	e021      	b.n	80057ea <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 80057a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057a8:	4b49      	ldr	r3, [pc, #292]	; (80058d0 <_ftoa+0x4d0>)
 80057aa:	fb83 1302 	smull	r1, r3, r3, r2
 80057ae:	1099      	asrs	r1, r3, #2
 80057b0:	17d3      	asrs	r3, r2, #31
 80057b2:	1ac9      	subs	r1, r1, r3
 80057b4:	460b      	mov	r3, r1
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	1ad1      	subs	r1, r2, r3
 80057be:	b2ca      	uxtb	r2, r1
 80057c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057c2:	1c59      	adds	r1, r3, #1
 80057c4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80057c6:	3230      	adds	r2, #48	; 0x30
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80057ce:	440b      	add	r3, r1
 80057d0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80057d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d6:	4a3e      	ldr	r2, [pc, #248]	; (80058d0 <_ftoa+0x4d0>)
 80057d8:	fb82 1203 	smull	r1, r2, r2, r3
 80057dc:	1092      	asrs	r2, r2, #2
 80057de:	17db      	asrs	r3, r3, #31
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	657b      	str	r3, [r7, #84]	; 0x54
 80057e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ec:	2b1f      	cmp	r3, #31
 80057ee:	d9da      	bls.n	80057a6 <_ftoa+0x3a6>
 80057f0:	e000      	b.n	80057f4 <_ftoa+0x3f4>
      break;
 80057f2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80057f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d124      	bne.n	8005848 <_ftoa+0x448>
 80057fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01f      	beq.n	8005848 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <_ftoa+0x43a>
 800580e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <_ftoa+0x420>
 8005816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005818:	f003 030c 	and.w	r3, r3, #12
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <_ftoa+0x43a>
      width--;
 8005820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005822:	3b01      	subs	r3, #1
 8005824:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005826:	e008      	b.n	800583a <_ftoa+0x43a>
      buf[len++] = '0';
 8005828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800582e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005832:	4413      	add	r3, r2
 8005834:	2230      	movs	r2, #48	; 0x30
 8005836:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800583a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800583c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583e:	429a      	cmp	r2, r3
 8005840:	d202      	bcs.n	8005848 <_ftoa+0x448>
 8005842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005844:	2b1f      	cmp	r3, #31
 8005846:	d9ef      	bls.n	8005828 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584a:	2b1f      	cmp	r3, #31
 800584c:	d82a      	bhi.n	80058a4 <_ftoa+0x4a4>
    if (negative) {
 800584e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <_ftoa+0x46a>
      buf[len++] = '-';
 8005856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800585c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005860:	4413      	add	r3, r2
 8005862:	222d      	movs	r2, #45	; 0x2d
 8005864:	f803 2c48 	strb.w	r2, [r3, #-72]
 8005868:	e01c      	b.n	80058a4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 800586a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d009      	beq.n	8005888 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8005874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	65fa      	str	r2, [r7, #92]	; 0x5c
 800587a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800587e:	4413      	add	r3, r2
 8005880:	222b      	movs	r2, #43	; 0x2b
 8005882:	f803 2c48 	strb.w	r2, [r3, #-72]
 8005886:	e00d      	b.n	80058a4 <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 8005888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <_ftoa+0x4a4>
      buf[len++] = ' ';
 8005892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005898:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800589c:	4413      	add	r3, r2
 800589e:	2220      	movs	r2, #32
 80058a0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80058a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a6:	9303      	str	r3, [sp, #12]
 80058a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058aa:	9302      	str	r3, [sp, #8]
 80058ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	f107 0318 	add.w	r3, r7, #24
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	6939      	ldr	r1, [r7, #16]
 80058bc:	6978      	ldr	r0, [r7, #20]
 80058be:	f7ff fb9b 	bl	8004ff8 <_out_rev>
 80058c2:	4603      	mov	r3, r0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3764      	adds	r7, #100	; 0x64
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd90      	pop	{r4, r7, pc}
 80058cc:	cccccccd 	.word	0xcccccccd
 80058d0:	66666667 	.word	0x66666667
 80058d4:	00000000 	.word	0x00000000

080058d8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	b09d      	sub	sp, #116	; 0x74
 80058de:	af06      	add	r7, sp, #24
 80058e0:	61f8      	str	r0, [r7, #28]
 80058e2:	61b9      	str	r1, [r7, #24]
 80058e4:	617a      	str	r2, [r7, #20]
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80058ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058f4:	f7fb f908 	bl	8000b08 <__aeabi_dcmpeq>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d014      	beq.n	8005928 <_etoa+0x50>
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	4bc9      	ldr	r3, [pc, #804]	; (8005c28 <_etoa+0x350>)
 8005904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005908:	f7fb f926 	bl	8000b58 <__aeabi_dcmpgt>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <_etoa+0x50>
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800591a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800591e:	f7fb f8fd 	bl	8000b1c <__aeabi_dcmplt>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d012      	beq.n	800594e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800592c:	9302      	str	r3, [sp, #8]
 800592e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	ed97 0b02 	vldr	d0, [r7, #8]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	69b9      	ldr	r1, [r7, #24]
 8005944:	69f8      	ldr	r0, [r7, #28]
 8005946:	f7ff fd5b 	bl	8005400 <_ftoa>
 800594a:	4603      	mov	r3, r0
 800594c:	e24f      	b.n	8005dee <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 800594e:	2301      	movs	r3, #1
 8005950:	461c      	mov	r4, r3
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800595e:	f7fb f8dd 	bl	8000b1c <__aeabi_dcmplt>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <_etoa+0x94>
 8005968:	2300      	movs	r3, #0
 800596a:	461c      	mov	r4, r3
 800596c:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 8005970:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <_etoa+0xac>
    value = -value;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005982:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8005984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005990:	2306      	movs	r3, #6
 8005992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8005996:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800599a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800599e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	f04f 0400 	mov.w	r4, #0
 80059aa:	0d13      	lsrs	r3, r2, #20
 80059ac:	2400      	movs	r4, #0
 80059ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059b6:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80059b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80059bc:	f04f 31ff 	mov.w	r1, #4294967295
 80059c0:	4a9a      	ldr	r2, [pc, #616]	; (8005c2c <_etoa+0x354>)
 80059c2:	ea03 0801 	and.w	r8, r3, r1
 80059c6:	ea04 0902 	and.w	r9, r4, r2
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	4a98      	ldr	r2, [pc, #608]	; (8005c30 <_etoa+0x358>)
 80059d0:	ea48 0301 	orr.w	r3, r8, r1
 80059d4:	ea49 0402 	orr.w	r4, r9, r2
 80059d8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80059dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80059de:	f7fa fdc1 	bl	8000564 <__aeabi_i2d>
 80059e2:	a385      	add	r3, pc, #532	; (adr r3, 8005bf8 <_etoa+0x320>)
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f7fa fe26 	bl	8000638 <__aeabi_dmul>
 80059ec:	4603      	mov	r3, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	4618      	mov	r0, r3
 80059f2:	4621      	mov	r1, r4
 80059f4:	a382      	add	r3, pc, #520	; (adr r3, 8005c00 <_etoa+0x328>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fc67 	bl	80002cc <__adddf3>
 80059fe:	4603      	mov	r3, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	4698      	mov	r8, r3
 8005a04:	46a1      	mov	r9, r4
 8005a06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	4b89      	ldr	r3, [pc, #548]	; (8005c34 <_etoa+0x35c>)
 8005a10:	f7fa fc5a 	bl	80002c8 <__aeabi_dsub>
 8005a14:	4603      	mov	r3, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	4618      	mov	r0, r3
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	a37a      	add	r3, pc, #488	; (adr r3, 8005c08 <_etoa+0x330>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f7fa fe09 	bl	8000638 <__aeabi_dmul>
 8005a26:	4603      	mov	r3, r0
 8005a28:	460c      	mov	r4, r1
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4649      	mov	r1, r9
 8005a32:	f7fa fc4b 	bl	80002cc <__adddf3>
 8005a36:	4603      	mov	r3, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	f7fb f8ab 	bl	8000b98 <__aeabi_d2iz>
 8005a42:	4603      	mov	r3, r0
 8005a44:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005a46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005a48:	f7fa fd8c 	bl	8000564 <__aeabi_i2d>
 8005a4c:	a370      	add	r3, pc, #448	; (adr r3, 8005c10 <_etoa+0x338>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f7fa fdf1 	bl	8000638 <__aeabi_dmul>
 8005a56:	4603      	mov	r3, r0
 8005a58:	460c      	mov	r4, r1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	4b75      	ldr	r3, [pc, #468]	; (8005c38 <_etoa+0x360>)
 8005a64:	f7fa fc32 	bl	80002cc <__adddf3>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	4621      	mov	r1, r4
 8005a70:	f7fb f892 	bl	8000b98 <__aeabi_d2iz>
 8005a74:	4603      	mov	r3, r0
 8005a76:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005a78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005a7a:	f7fa fd73 	bl	8000564 <__aeabi_i2d>
 8005a7e:	a366      	add	r3, pc, #408	; (adr r3, 8005c18 <_etoa+0x340>)
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f7fa fdd8 	bl	8000638 <__aeabi_dmul>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	4698      	mov	r8, r3
 8005a8e:	46a1      	mov	r9, r4
 8005a90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005a92:	f7fa fd67 	bl	8000564 <__aeabi_i2d>
 8005a96:	a362      	add	r3, pc, #392	; (adr r3, 8005c20 <_etoa+0x348>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fdcc 	bl	8000638 <__aeabi_dmul>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	4649      	mov	r1, r9
 8005aac:	f7fa fc0c 	bl	80002c8 <__aeabi_dsub>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 8005ab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005abc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005ac0:	f7fa fdba 	bl	8000638 <__aeabi_dmul>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ace:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	f04f 0400 	mov.w	r4, #0
 8005ae0:	050c      	lsls	r4, r1, #20
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005aec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	f7fa fbea 	bl	80002cc <__adddf3>
 8005af8:	4603      	mov	r3, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	469a      	mov	sl, r3
 8005afe:	46a3      	mov	fp, r4
 8005b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b04:	f04f 0000 	mov.w	r0, #0
 8005b08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b0c:	f7fa fbdc 	bl	80002c8 <__aeabi_dsub>
 8005b10:	4603      	mov	r3, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	e9c7 3400 	strd	r3, r4, [r7]
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	4b47      	ldr	r3, [pc, #284]	; (8005c3c <_etoa+0x364>)
 8005b1e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b22:	f7fa feb3 	bl	800088c <__aeabi_ddiv>
 8005b26:	4603      	mov	r3, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <_etoa+0x368>)
 8005b34:	f7fa fbca 	bl	80002cc <__adddf3>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4623      	mov	r3, r4
 8005b40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b44:	f7fa fea2 	bl	800088c <__aeabi_ddiv>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	4621      	mov	r1, r4
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	4b3b      	ldr	r3, [pc, #236]	; (8005c44 <_etoa+0x36c>)
 8005b56:	f7fa fbb9 	bl	80002cc <__adddf3>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4623      	mov	r3, r4
 8005b62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b66:	f7fa fe91 	bl	800088c <__aeabi_ddiv>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4623      	mov	r3, r4
 8005b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b76:	f7fa fba9 	bl	80002cc <__adddf3>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4623      	mov	r3, r4
 8005b82:	4650      	mov	r0, sl
 8005b84:	4659      	mov	r1, fp
 8005b86:	f7fa fe81 	bl	800088c <__aeabi_ddiv>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	4621      	mov	r1, r4
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <_etoa+0x358>)
 8005b98:	f7fa fb98 	bl	80002cc <__adddf3>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	f7fa fd46 	bl	8000638 <__aeabi_dmul>
 8005bac:	4603      	mov	r3, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8005bb4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bc0:	f7fa ffac 	bl	8000b1c <__aeabi_dcmplt>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <_etoa+0x30e>
    expval--;
 8005bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8005bd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <_etoa+0x368>)
 8005bda:	f7fa fe57 	bl	800088c <__aeabi_ddiv>
 8005bde:	4603      	mov	r3, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be8:	2b63      	cmp	r3, #99	; 0x63
 8005bea:	dc2d      	bgt.n	8005c48 <_etoa+0x370>
 8005bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bee:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005bf2:	db29      	blt.n	8005c48 <_etoa+0x370>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	e028      	b.n	8005c4a <_etoa+0x372>
 8005bf8:	509f79fb 	.word	0x509f79fb
 8005bfc:	3fd34413 	.word	0x3fd34413
 8005c00:	8b60c8b3 	.word	0x8b60c8b3
 8005c04:	3fc68a28 	.word	0x3fc68a28
 8005c08:	636f4361 	.word	0x636f4361
 8005c0c:	3fd287a7 	.word	0x3fd287a7
 8005c10:	0979a371 	.word	0x0979a371
 8005c14:	400a934f 	.word	0x400a934f
 8005c18:	bbb55516 	.word	0xbbb55516
 8005c1c:	40026bb1 	.word	0x40026bb1
 8005c20:	fefa39ef 	.word	0xfefa39ef
 8005c24:	3fe62e42 	.word	0x3fe62e42
 8005c28:	7fefffff 	.word	0x7fefffff
 8005c2c:	000fffff 	.word	0x000fffff
 8005c30:	3ff00000 	.word	0x3ff00000
 8005c34:	3ff80000 	.word	0x3ff80000
 8005c38:	3fe00000 	.word	0x3fe00000
 8005c3c:	402c0000 	.word	0x402c0000
 8005c40:	40240000 	.word	0x40240000
 8005c44:	40180000 	.word	0x40180000
 8005c48:	2305      	movs	r3, #5
 8005c4a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d03d      	beq.n	8005cd4 <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005c58:	a367      	add	r3, pc, #412	; (adr r3, 8005df8 <_etoa+0x520>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c62:	f7fa ff6f 	bl	8000b44 <__aeabi_dcmpge>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d024      	beq.n	8005cb6 <_etoa+0x3de>
 8005c6c:	a364      	add	r3, pc, #400	; (adr r3, 8005e00 <_etoa+0x528>)
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c76:	f7fa ff51 	bl	8000b1c <__aeabi_dcmplt>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01a      	beq.n	8005cb6 <_etoa+0x3de>
      if ((int)prec > expval) {
 8005c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c86:	429a      	cmp	r2, r3
 8005c88:	da07      	bge.n	8005c9a <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 8005c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c98:	e002      	b.n	8005ca0 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb4:	e00e      	b.n	8005cd4 <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <_etoa+0x3fc>
 8005cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <_etoa+0x3fc>
        --prec;
 8005cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8005cda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d904      	bls.n	8005cee <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cec:	e001      	b.n	8005cf2 <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <_etoa+0x430>
 8005cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8005d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <_etoa+0x44e>
    value /= conv.F;
 8005d0e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005d12:	461a      	mov	r2, r3
 8005d14:	4623      	mov	r3, r4
 8005d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d1a:	f7fa fdb7 	bl	800088c <__aeabi_ddiv>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005d2a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <_etoa+0x464>
 8005d32:	68bd      	ldr	r5, [r7, #8]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8005d3a:	e001      	b.n	8005d40 <_etoa+0x468>
 8005d3c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8005d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d48:	9302      	str	r3, [sp, #8]
 8005d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	ec46 5b10 	vmov	d0, r5, r6
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	69b9      	ldr	r1, [r7, #24]
 8005d5e:	69f8      	ldr	r0, [r7, #28]
 8005d60:	f7ff fb4e 	bl	8005400 <_ftoa>
 8005d64:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8005d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d03f      	beq.n	8005dec <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <_etoa+0x4a4>
 8005d78:	2045      	movs	r0, #69	; 0x45
 8005d7a:	e000      	b.n	8005d7e <_etoa+0x4a6>
 8005d7c:	2065      	movs	r0, #101	; 0x65
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	1c53      	adds	r3, r2, #1
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	69fc      	ldr	r4, [r7, #28]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfb8      	it	lt
 8005d92:	425b      	neglt	r3, r3
 8005d94:	4618      	mov	r0, r3
 8005d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d98:	0fdb      	lsrs	r3, r3, #31
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d9e:	3a01      	subs	r2, #1
 8005da0:	2105      	movs	r1, #5
 8005da2:	9105      	str	r1, [sp, #20]
 8005da4:	9204      	str	r2, [sp, #16]
 8005da6:	2200      	movs	r2, #0
 8005da8:	9203      	str	r2, [sp, #12]
 8005daa:	220a      	movs	r2, #10
 8005dac:	9202      	str	r2, [sp, #8]
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	9000      	str	r0, [sp, #0]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	69b9      	ldr	r1, [r7, #24]
 8005db8:	69f8      	ldr	r0, [r7, #28]
 8005dba:	f7ff fa49 	bl	8005250 <_ntoa_long>
 8005dbe:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00f      	beq.n	8005dec <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005dcc:	e007      	b.n	8005dde <_etoa+0x506>
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	1c53      	adds	r3, r2, #1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	69fc      	ldr	r4, [r7, #28]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	69b9      	ldr	r1, [r7, #24]
 8005dda:	2020      	movs	r0, #32
 8005ddc:	47a0      	blx	r4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d8f0      	bhi.n	8005dce <_etoa+0x4f6>
    }
  }
  return idx;
 8005dec:	697b      	ldr	r3, [r7, #20]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	375c      	adds	r7, #92	; 0x5c
 8005df2:	46bd      	mov	sp, r7
 8005df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df8:	eb1c432d 	.word	0xeb1c432d
 8005dfc:	3f1a36e2 	.word	0x3f1a36e2
 8005e00:	00000000 	.word	0x00000000
 8005e04:	412e8480 	.word	0x412e8480

08005e08 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005e08:	b5b0      	push	{r4, r5, r7, lr}
 8005e0a:	b0a0      	sub	sp, #128	; 0x80
 8005e0c:	af0a      	add	r7, sp, #40	; 0x28
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f040 8492 	bne.w	8006746 <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 8005e22:	4ba0      	ldr	r3, [pc, #640]	; (80060a4 <_vsnprintf+0x29c>)
 8005e24:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8005e26:	f000 bc8e 	b.w	8006746 <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b25      	cmp	r3, #37	; 0x25
 8005e30:	d00d      	beq.n	8005e4e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	7818      	ldrb	r0, [r3, #0]
 8005e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e38:	1c53      	adds	r3, r2, #1
 8005e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e3c:	68fc      	ldr	r4, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	47a0      	blx	r4
      format++;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	603b      	str	r3, [r7, #0]
      continue;
 8005e4a:	f000 bc7c 	b.w	8006746 <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	3b20      	subs	r3, #32
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d856      	bhi.n	8005f10 <_vsnprintf+0x108>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <_vsnprintf+0x60>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005ee9 	.word	0x08005ee9
 8005e6c:	08005f11 	.word	0x08005f11
 8005e70:	08005f11 	.word	0x08005f11
 8005e74:	08005efd 	.word	0x08005efd
 8005e78:	08005f11 	.word	0x08005f11
 8005e7c:	08005f11 	.word	0x08005f11
 8005e80:	08005f11 	.word	0x08005f11
 8005e84:	08005f11 	.word	0x08005f11
 8005e88:	08005f11 	.word	0x08005f11
 8005e8c:	08005f11 	.word	0x08005f11
 8005e90:	08005f11 	.word	0x08005f11
 8005e94:	08005ed5 	.word	0x08005ed5
 8005e98:	08005f11 	.word	0x08005f11
 8005e9c:	08005ec1 	.word	0x08005ec1
 8005ea0:	08005f11 	.word	0x08005f11
 8005ea4:	08005f11 	.word	0x08005f11
 8005ea8:	08005ead 	.word	0x08005ead
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	603b      	str	r3, [r7, #0]
 8005eba:	2301      	movs	r3, #1
 8005ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ebe:	e02a      	b.n	8005f16 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec2:	f043 0302 	orr.w	r3, r3, #2
 8005ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	2301      	movs	r3, #1
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed2:	e020      	b.n	8005f16 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed6:	f043 0304 	orr.w	r3, r3, #4
 8005eda:	657b      	str	r3, [r7, #84]	; 0x54
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee6:	e016      	b.n	8005f16 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eea:	f043 0308 	orr.w	r3, r3, #8
 8005eee:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005efa:	e00c      	b.n	8005f16 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efe:	f043 0310 	orr.w	r3, r3, #16
 8005f02:	657b      	str	r3, [r7, #84]	; 0x54
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f0e:	e002      	b.n	8005f16 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8005f10:	2300      	movs	r3, #0
 8005f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f14:	bf00      	nop
      }
    } while (n);
 8005f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d19d      	bne.n	8005e58 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff f82c 	bl	8004f82 <_is_digit>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <_vsnprintf+0x134>
      width = _atoi(&format);
 8005f30:	463b      	mov	r3, r7
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff f83c 	bl	8004fb0 <_atoi>
 8005f38:	6538      	str	r0, [r7, #80]	; 0x50
 8005f3a:	e018      	b.n	8005f6e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b2a      	cmp	r3, #42	; 0x2a
 8005f42:	d114      	bne.n	8005f6e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8005f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f46:	1d1a      	adds	r2, r3, #4
 8005f48:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da07      	bge.n	8005f64 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8005f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f56:	f043 0302 	orr.w	r3, r3, #2
 8005f5a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	425b      	negs	r3, r3
 8005f60:	653b      	str	r3, [r7, #80]	; 0x50
 8005f62:	e001      	b.n	8005f68 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b2e      	cmp	r3, #46	; 0x2e
 8005f78:	d124      	bne.n	8005fc4 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8005f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f80:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fff8 	bl	8004f82 <_is_digit>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff f808 	bl	8004fb0 <_atoi>
 8005fa0:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005fa2:	e00f      	b.n	8005fc4 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8005faa:	d10b      	bne.n	8005fc4 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8005fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fae:	1d1a      	adds	r2, r3, #4
 8005fb0:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	3b68      	subs	r3, #104	; 0x68
 8005fca:	2b12      	cmp	r3, #18
 8005fcc:	d866      	bhi.n	800609c <_vsnprintf+0x294>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <_vsnprintf+0x1cc>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08006047 	.word	0x08006047
 8005fd8:	0800609d 	.word	0x0800609d
 8005fdc:	0800607d 	.word	0x0800607d
 8005fe0:	0800609d 	.word	0x0800609d
 8005fe4:	08006021 	.word	0x08006021
 8005fe8:	0800609d 	.word	0x0800609d
 8005fec:	0800609d 	.word	0x0800609d
 8005ff0:	0800609d 	.word	0x0800609d
 8005ff4:	0800609d 	.word	0x0800609d
 8005ff8:	0800609d 	.word	0x0800609d
 8005ffc:	0800609d 	.word	0x0800609d
 8006000:	0800609d 	.word	0x0800609d
 8006004:	0800606d 	.word	0x0800606d
 8006008:	0800609d 	.word	0x0800609d
 800600c:	0800609d 	.word	0x0800609d
 8006010:	0800609d 	.word	0x0800609d
 8006014:	0800609d 	.word	0x0800609d
 8006018:	0800609d 	.word	0x0800609d
 800601c:	0800608d 	.word	0x0800608d
      case 'l' :
        flags |= FLAGS_LONG;
 8006020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006026:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b6c      	cmp	r3, #108	; 0x6c
 8006034:	d134      	bne.n	80060a0 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8006036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800603c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	3301      	adds	r3, #1
 8006042:	603b      	str	r3, [r7, #0]
        }
        break;
 8006044:	e02c      	b.n	80060a0 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8006046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b68      	cmp	r3, #104	; 0x68
 800605a:	d125      	bne.n	80060a8 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800605c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006062:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	603b      	str	r3, [r7, #0]
        }
        break;
 800606a:	e01d      	b.n	80060a8 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800606c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006072:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	3301      	adds	r3, #1
 8006078:	603b      	str	r3, [r7, #0]
        break;
 800607a:	e016      	b.n	80060aa <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800607c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800607e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006082:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	3301      	adds	r3, #1
 8006088:	603b      	str	r3, [r7, #0]
        break;
 800608a:	e00e      	b.n	80060aa <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800608c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006092:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	603b      	str	r3, [r7, #0]
        break;
 800609a:	e006      	b.n	80060aa <_vsnprintf+0x2a2>
      default :
        break;
 800609c:	bf00      	nop
 800609e:	e004      	b.n	80060aa <_vsnprintf+0x2a2>
        break;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <_vsnprintf+0x2a2>
 80060a4:	08004f2d 	.word	0x08004f2d
        break;
 80060a8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	3b25      	subs	r3, #37	; 0x25
 80060b0:	2b53      	cmp	r3, #83	; 0x53
 80060b2:	f200 833b 	bhi.w	800672c <_vsnprintf+0x924>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <_vsnprintf+0x2b4>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006715 	.word	0x08006715
 80060c0:	0800672d 	.word	0x0800672d
 80060c4:	0800672d 	.word	0x0800672d
 80060c8:	0800672d 	.word	0x0800672d
 80060cc:	0800672d 	.word	0x0800672d
 80060d0:	0800672d 	.word	0x0800672d
 80060d4:	0800672d 	.word	0x0800672d
 80060d8:	0800672d 	.word	0x0800672d
 80060dc:	0800672d 	.word	0x0800672d
 80060e0:	0800672d 	.word	0x0800672d
 80060e4:	0800672d 	.word	0x0800672d
 80060e8:	0800672d 	.word	0x0800672d
 80060ec:	0800672d 	.word	0x0800672d
 80060f0:	0800672d 	.word	0x0800672d
 80060f4:	0800672d 	.word	0x0800672d
 80060f8:	0800672d 	.word	0x0800672d
 80060fc:	0800672d 	.word	0x0800672d
 8006100:	0800672d 	.word	0x0800672d
 8006104:	0800672d 	.word	0x0800672d
 8006108:	0800672d 	.word	0x0800672d
 800610c:	0800672d 	.word	0x0800672d
 8006110:	0800672d 	.word	0x0800672d
 8006114:	0800672d 	.word	0x0800672d
 8006118:	0800672d 	.word	0x0800672d
 800611c:	0800672d 	.word	0x0800672d
 8006120:	0800672d 	.word	0x0800672d
 8006124:	0800672d 	.word	0x0800672d
 8006128:	0800672d 	.word	0x0800672d
 800612c:	0800672d 	.word	0x0800672d
 8006130:	0800672d 	.word	0x0800672d
 8006134:	0800672d 	.word	0x0800672d
 8006138:	0800672d 	.word	0x0800672d
 800613c:	080064e5 	.word	0x080064e5
 8006140:	08006499 	.word	0x08006499
 8006144:	080064e5 	.word	0x080064e5
 8006148:	0800672d 	.word	0x0800672d
 800614c:	0800672d 	.word	0x0800672d
 8006150:	0800672d 	.word	0x0800672d
 8006154:	0800672d 	.word	0x0800672d
 8006158:	0800672d 	.word	0x0800672d
 800615c:	0800672d 	.word	0x0800672d
 8006160:	0800672d 	.word	0x0800672d
 8006164:	0800672d 	.word	0x0800672d
 8006168:	0800672d 	.word	0x0800672d
 800616c:	0800672d 	.word	0x0800672d
 8006170:	0800672d 	.word	0x0800672d
 8006174:	0800672d 	.word	0x0800672d
 8006178:	0800672d 	.word	0x0800672d
 800617c:	0800672d 	.word	0x0800672d
 8006180:	0800672d 	.word	0x0800672d
 8006184:	0800672d 	.word	0x0800672d
 8006188:	0800620d 	.word	0x0800620d
 800618c:	0800672d 	.word	0x0800672d
 8006190:	0800672d 	.word	0x0800672d
 8006194:	0800672d 	.word	0x0800672d
 8006198:	0800672d 	.word	0x0800672d
 800619c:	0800672d 	.word	0x0800672d
 80061a0:	0800672d 	.word	0x0800672d
 80061a4:	0800672d 	.word	0x0800672d
 80061a8:	0800672d 	.word	0x0800672d
 80061ac:	0800672d 	.word	0x0800672d
 80061b0:	0800620d 	.word	0x0800620d
 80061b4:	08006551 	.word	0x08006551
 80061b8:	0800620d 	.word	0x0800620d
 80061bc:	080064e5 	.word	0x080064e5
 80061c0:	08006499 	.word	0x08006499
 80061c4:	080064e5 	.word	0x080064e5
 80061c8:	0800672d 	.word	0x0800672d
 80061cc:	0800620d 	.word	0x0800620d
 80061d0:	0800672d 	.word	0x0800672d
 80061d4:	0800672d 	.word	0x0800672d
 80061d8:	0800672d 	.word	0x0800672d
 80061dc:	0800672d 	.word	0x0800672d
 80061e0:	0800672d 	.word	0x0800672d
 80061e4:	0800620d 	.word	0x0800620d
 80061e8:	08006689 	.word	0x08006689
 80061ec:	0800672d 	.word	0x0800672d
 80061f0:	0800672d 	.word	0x0800672d
 80061f4:	080065c5 	.word	0x080065c5
 80061f8:	0800672d 	.word	0x0800672d
 80061fc:	0800620d 	.word	0x0800620d
 8006200:	0800672d 	.word	0x0800672d
 8006204:	0800672d 	.word	0x0800672d
 8006208:	0800620d 	.word	0x0800620d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b78      	cmp	r3, #120	; 0x78
 8006212:	d003      	beq.n	800621c <_vsnprintf+0x414>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b58      	cmp	r3, #88	; 0x58
 800621a:	d102      	bne.n	8006222 <_vsnprintf+0x41a>
          base = 16U;
 800621c:	2310      	movs	r3, #16
 800621e:	643b      	str	r3, [r7, #64]	; 0x40
 8006220:	e013      	b.n	800624a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b6f      	cmp	r3, #111	; 0x6f
 8006228:	d102      	bne.n	8006230 <_vsnprintf+0x428>
          base =  8U;
 800622a:	2308      	movs	r3, #8
 800622c:	643b      	str	r3, [r7, #64]	; 0x40
 800622e:	e00c      	b.n	800624a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b62      	cmp	r3, #98	; 0x62
 8006236:	d102      	bne.n	800623e <_vsnprintf+0x436>
          base =  2U;
 8006238:	2302      	movs	r3, #2
 800623a:	643b      	str	r3, [r7, #64]	; 0x40
 800623c:	e005      	b.n	800624a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800623e:	230a      	movs	r3, #10
 8006240:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8006242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006244:	f023 0310 	bic.w	r3, r3, #16
 8006248:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b58      	cmp	r3, #88	; 0x58
 8006250:	d103      	bne.n	800625a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8006252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006254:	f043 0320 	orr.w	r3, r3, #32
 8006258:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b69      	cmp	r3, #105	; 0x69
 8006260:	d007      	beq.n	8006272 <_vsnprintf+0x46a>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d003      	beq.n	8006272 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800626a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800626c:	f023 030c 	bic.w	r3, r3, #12
 8006270:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8006272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800627c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b69      	cmp	r3, #105	; 0x69
 800628a:	d004      	beq.n	8006296 <_vsnprintf+0x48e>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b64      	cmp	r3, #100	; 0x64
 8006292:	f040 808d 	bne.w	80063b0 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8006296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629c:	2b00      	cmp	r3, #0
 800629e:	d02e      	beq.n	80062fe <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80062a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062a2:	3307      	adds	r3, #7
 80062a4:	f023 0307 	bic.w	r3, r3, #7
 80062a8:	f103 0208 	add.w	r2, r3, #8
 80062ac:	66ba      	str	r2, [r7, #104]	; 0x68
 80062ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062b2:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80062b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f174 0200 	sbcs.w	r2, r4, #0
 80062c0:	da02      	bge.n	80062c8 <_vsnprintf+0x4c0>
 80062c2:	425b      	negs	r3, r3
 80062c4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 80062c8:	4619      	mov	r1, r3
 80062ca:	4622      	mov	r2, r4
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	0fdb      	lsrs	r3, r3, #31
 80062d0:	b2d8      	uxtb	r0, r3
 80062d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d4:	f04f 0400 	mov.w	r4, #0
 80062d8:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80062da:	9508      	str	r5, [sp, #32]
 80062dc:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80062de:	9507      	str	r5, [sp, #28]
 80062e0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80062e2:	9506      	str	r5, [sp, #24]
 80062e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062e8:	9002      	str	r0, [sp, #8]
 80062ea:	e9cd 1200 	strd	r1, r2, [sp]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff f812 	bl	800531e <_ntoa_long_long>
 80062fa:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80062fc:	e0c8      	b.n	8006490 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80062fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01e      	beq.n	8006346 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8006308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800630a:	1d1a      	adds	r2, r3, #4
 800630c:	66ba      	str	r2, [r7, #104]	; 0x68
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfb8      	it	lt
 8006318:	425b      	neglt	r3, r3
 800631a:	4619      	mov	r1, r3
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	0fdb      	lsrs	r3, r3, #31
 8006320:	b2db      	uxtb	r3, r3
 8006322:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006324:	9205      	str	r2, [sp, #20]
 8006326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006328:	9204      	str	r2, [sp, #16]
 800632a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800632c:	9203      	str	r2, [sp, #12]
 800632e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006330:	9202      	str	r2, [sp, #8]
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	9100      	str	r1, [sp, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7fe ff87 	bl	8005250 <_ntoa_long>
 8006342:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8006344:	e0a4      	b.n	8006490 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8006346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <_vsnprintf+0x554>
 8006350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	66ba      	str	r2, [r7, #104]	; 0x68
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e00e      	b.n	800637a <_vsnprintf+0x572>
 800635c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <_vsnprintf+0x56a>
 8006366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006368:	1d1a      	adds	r2, r3, #4
 800636a:	66ba      	str	r2, [r7, #104]	; 0x68
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	b21b      	sxth	r3, r3
 8006370:	e003      	b.n	800637a <_vsnprintf+0x572>
 8006372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	66ba      	str	r2, [r7, #104]	; 0x68
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	2b00      	cmp	r3, #0
 8006380:	bfb8      	it	lt
 8006382:	425b      	neglt	r3, r3
 8006384:	4619      	mov	r1, r3
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	0fdb      	lsrs	r3, r3, #31
 800638a:	b2db      	uxtb	r3, r3
 800638c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800638e:	9205      	str	r2, [sp, #20]
 8006390:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006392:	9204      	str	r2, [sp, #16]
 8006394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006396:	9203      	str	r2, [sp, #12]
 8006398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800639a:	9202      	str	r2, [sp, #8]
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	9100      	str	r1, [sp, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7fe ff52 	bl	8005250 <_ntoa_long>
 80063ac:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80063ae:	e06f      	b.n	8006490 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80063b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d020      	beq.n	80063fc <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80063ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063bc:	3307      	adds	r3, #7
 80063be:	f023 0307 	bic.w	r3, r3, #7
 80063c2:	f103 0208 	add.w	r2, r3, #8
 80063c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80063c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063ce:	4611      	mov	r1, r2
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80063d6:	9008      	str	r0, [sp, #32]
 80063d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80063da:	9007      	str	r0, [sp, #28]
 80063dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80063de:	9006      	str	r0, [sp, #24]
 80063e0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80063e4:	2200      	movs	r2, #0
 80063e6:	9202      	str	r2, [sp, #8]
 80063e8:	e9cd 3400 	strd	r3, r4, [sp]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7fe ff93 	bl	800531e <_ntoa_long_long>
 80063f8:	6478      	str	r0, [r7, #68]	; 0x44
 80063fa:	e049      	b.n	8006490 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80063fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8006406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006408:	1d1a      	adds	r2, r3, #4
 800640a:	66ba      	str	r2, [r7, #104]	; 0x68
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006410:	9205      	str	r2, [sp, #20]
 8006412:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006414:	9204      	str	r2, [sp, #16]
 8006416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006418:	9203      	str	r2, [sp, #12]
 800641a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800641c:	9202      	str	r2, [sp, #8]
 800641e:	2200      	movs	r2, #0
 8006420:	9201      	str	r2, [sp, #4]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7fe ff10 	bl	8005250 <_ntoa_long>
 8006430:	6478      	str	r0, [r7, #68]	; 0x44
 8006432:	e02d      	b.n	8006490 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8006434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <_vsnprintf+0x642>
 800643e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006440:	1d1a      	adds	r2, r3, #4
 8006442:	66ba      	str	r2, [r7, #104]	; 0x68
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	e00e      	b.n	8006468 <_vsnprintf+0x660>
 800644a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800644c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <_vsnprintf+0x658>
 8006454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006456:	1d1a      	adds	r2, r3, #4
 8006458:	66ba      	str	r2, [r7, #104]	; 0x68
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	e003      	b.n	8006468 <_vsnprintf+0x660>
 8006460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006462:	1d1a      	adds	r2, r3, #4
 8006464:	66ba      	str	r2, [r7, #104]	; 0x68
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800646a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006474:	9303      	str	r3, [sp, #12]
 8006476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006478:	9302      	str	r3, [sp, #8]
 800647a:	2300      	movs	r3, #0
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7fe fee1 	bl	8005250 <_ntoa_long>
 800648e:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	3301      	adds	r3, #1
 8006494:	603b      	str	r3, [r7, #0]
        break;
 8006496:	e156      	b.n	8006746 <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b46      	cmp	r3, #70	; 0x46
 800649e:	d103      	bne.n	80064a8 <_vsnprintf+0x6a0>
 80064a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a2:	f043 0320 	orr.w	r3, r3, #32
 80064a6:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80064a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064aa:	3307      	adds	r3, #7
 80064ac:	f023 0307 	bic.w	r3, r3, #7
 80064b0:	f103 0208 	add.w	r2, r3, #8
 80064b4:	66ba      	str	r2, [r7, #104]	; 0x68
 80064b6:	ed93 7b00 	vldr	d7, [r3]
 80064ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064bc:	9302      	str	r3, [sp, #8]
 80064be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	eeb0 0a47 	vmov.f32	s0, s14
 80064ca:	eef0 0a67 	vmov.f32	s1, s15
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7fe ff93 	bl	8005400 <_ftoa>
 80064da:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	3301      	adds	r3, #1
 80064e0:	603b      	str	r3, [r7, #0]
        break;
 80064e2:	e130      	b.n	8006746 <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b67      	cmp	r3, #103	; 0x67
 80064ea:	d003      	beq.n	80064f4 <_vsnprintf+0x6ec>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b47      	cmp	r3, #71	; 0x47
 80064f2:	d103      	bne.n	80064fc <_vsnprintf+0x6f4>
 80064f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064fa:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b45      	cmp	r3, #69	; 0x45
 8006502:	d003      	beq.n	800650c <_vsnprintf+0x704>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b47      	cmp	r3, #71	; 0x47
 800650a:	d103      	bne.n	8006514 <_vsnprintf+0x70c>
 800650c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650e:	f043 0320 	orr.w	r3, r3, #32
 8006512:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006516:	3307      	adds	r3, #7
 8006518:	f023 0307 	bic.w	r3, r3, #7
 800651c:	f103 0208 	add.w	r2, r3, #8
 8006520:	66ba      	str	r2, [r7, #104]	; 0x68
 8006522:	ed93 7b00 	vldr	d7, [r3]
 8006526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006528:	9302      	str	r3, [sp, #8]
 800652a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	eeb0 0a47 	vmov.f32	s0, s14
 8006536:	eef0 0a67 	vmov.f32	s1, s15
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f7ff f9c9 	bl	80058d8 <_etoa>
 8006546:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	3301      	adds	r3, #1
 800654c:	603b      	str	r3, [r7, #0]
        break;
 800654e:	e0fa      	b.n	8006746 <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8006550:	2301      	movs	r3, #1
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8006554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10e      	bne.n	800657c <_vsnprintf+0x774>
          while (l++ < width) {
 800655e:	e007      	b.n	8006570 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 8006560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006562:	1c53      	adds	r3, r2, #1
 8006564:	647b      	str	r3, [r7, #68]	; 0x44
 8006566:	68fc      	ldr	r4, [r7, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	2020      	movs	r0, #32
 800656e:	47a0      	blx	r4
          while (l++ < width) {
 8006570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006576:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006578:	429a      	cmp	r2, r3
 800657a:	d8f1      	bhi.n	8006560 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800657c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800657e:	1d1a      	adds	r2, r3, #4
 8006580:	66ba      	str	r2, [r7, #104]	; 0x68
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	b2d8      	uxtb	r0, r3
 8006586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006588:	1c53      	adds	r3, r2, #1
 800658a:	647b      	str	r3, [r7, #68]	; 0x44
 800658c:	68fc      	ldr	r4, [r7, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8006594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00e      	beq.n	80065bc <_vsnprintf+0x7b4>
          while (l++ < width) {
 800659e:	e007      	b.n	80065b0 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 80065a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a2:	1c53      	adds	r3, r2, #1
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
 80065a6:	68fc      	ldr	r4, [r7, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	2020      	movs	r0, #32
 80065ae:	47a0      	blx	r4
          while (l++ < width) {
 80065b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d8f1      	bhi.n	80065a0 <_vsnprintf+0x798>
          }
        }
        format++;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	3301      	adds	r3, #1
 80065c0:	603b      	str	r3, [r7, #0]
        break;
 80065c2:	e0c0      	b.n	8006746 <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80065c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c6:	1d1a      	adds	r2, r3, #4
 80065c8:	66ba      	str	r2, [r7, #104]	; 0x68
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80065ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <_vsnprintf+0x7d0>
 80065d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d6:	e001      	b.n	80065dc <_vsnprintf+0x7d4>
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295
 80065dc:	4619      	mov	r1, r3
 80065de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065e0:	f7fe fcb2 	bl	8004f48 <_strnlen_s>
 80065e4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80065e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 80065f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f4:	4293      	cmp	r3, r2
 80065f6:	bf28      	it	cs
 80065f8:	4613      	movcs	r3, r2
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80065fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11a      	bne.n	800663c <_vsnprintf+0x834>
          while (l++ < width) {
 8006606:	e007      	b.n	8006618 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8006608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800660a:	1c53      	adds	r3, r2, #1
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
 800660e:	68fc      	ldr	r4, [r7, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	2020      	movs	r0, #32
 8006616:	47a0      	blx	r4
          while (l++ < width) {
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	637a      	str	r2, [r7, #52]	; 0x34
 800661e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006620:	429a      	cmp	r2, r3
 8006622:	d8f1      	bhi.n	8006608 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006624:	e00a      	b.n	800663c <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	63ba      	str	r2, [r7, #56]	; 0x38
 800662c:	7818      	ldrb	r0, [r3, #0]
 800662e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006630:	1c53      	adds	r3, r2, #1
 8006632:	647b      	str	r3, [r7, #68]	; 0x44
 8006634:	68fc      	ldr	r4, [r7, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <_vsnprintf+0x850>
 8006644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0eb      	beq.n	8006626 <_vsnprintf+0x81e>
 800664e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006650:	1e5a      	subs	r2, r3, #1
 8006652:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e6      	bne.n	8006626 <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8006658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00e      	beq.n	8006680 <_vsnprintf+0x878>
          while (l++ < width) {
 8006662:	e007      	b.n	8006674 <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 8006664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006666:	1c53      	adds	r3, r2, #1
 8006668:	647b      	str	r3, [r7, #68]	; 0x44
 800666a:	68fc      	ldr	r4, [r7, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	2020      	movs	r0, #32
 8006672:	47a0      	blx	r4
          while (l++ < width) {
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	637a      	str	r2, [r7, #52]	; 0x34
 800667a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800667c:	429a      	cmp	r2, r3
 800667e:	d8f1      	bhi.n	8006664 <_vsnprintf+0x85c>
          }
        }
        format++;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	603b      	str	r3, [r7, #0]
        break;
 8006686:	e05e      	b.n	8006746 <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8006688:	2308      	movs	r3, #8
 800668a:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800668c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8006692:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8006694:	2300      	movs	r3, #0
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800669a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01d      	beq.n	80066de <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80066a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066a4:	1d1a      	adds	r2, r3, #4
 80066a6:	66ba      	str	r2, [r7, #104]	; 0x68
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f04f 0400 	mov.w	r4, #0
 80066ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066b0:	9208      	str	r2, [sp, #32]
 80066b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066b4:	9207      	str	r2, [sp, #28]
 80066b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066b8:	9206      	str	r2, [sp, #24]
 80066ba:	f04f 0110 	mov.w	r1, #16
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80066c6:	2200      	movs	r2, #0
 80066c8:	9202      	str	r2, [sp, #8]
 80066ca:	e9cd 3400 	strd	r3, r4, [sp]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7fe fe22 	bl	800531e <_ntoa_long_long>
 80066da:	6478      	str	r0, [r7, #68]	; 0x44
 80066dc:	e016      	b.n	800670c <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80066de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066e0:	1d1a      	adds	r2, r3, #4
 80066e2:	66ba      	str	r2, [r7, #104]	; 0x68
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ea:	9305      	str	r3, [sp, #20]
 80066ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ee:	9304      	str	r3, [sp, #16]
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	9303      	str	r3, [sp, #12]
 80066f4:	2310      	movs	r3, #16
 80066f6:	9302      	str	r3, [sp, #8]
 80066f8:	2300      	movs	r3, #0
 80066fa:	9301      	str	r3, [sp, #4]
 80066fc:	9200      	str	r2, [sp, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7fe fda3 	bl	8005250 <_ntoa_long>
 800670a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	3301      	adds	r3, #1
 8006710:	603b      	str	r3, [r7, #0]
        break;
 8006712:	e018      	b.n	8006746 <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8006714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006716:	1c53      	adds	r3, r2, #1
 8006718:	647b      	str	r3, [r7, #68]	; 0x44
 800671a:	68fc      	ldr	r4, [r7, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	2025      	movs	r0, #37	; 0x25
 8006722:	47a0      	blx	r4
        format++;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	603b      	str	r3, [r7, #0]
        break;
 800672a:	e00c      	b.n	8006746 <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	7818      	ldrb	r0, [r3, #0]
 8006730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006732:	1c53      	adds	r3, r2, #1
 8006734:	647b      	str	r3, [r7, #68]	; 0x44
 8006736:	68fc      	ldr	r4, [r7, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	47a0      	blx	r4
        format++;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	603b      	str	r3, [r7, #0]
        break;
 8006744:	bf00      	nop
  while (*format)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f47f ab6d 	bne.w	8005e2a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8006750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <_vsnprintf+0x956>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	1e5a      	subs	r2, r3, #1
 800675c:	e000      	b.n	8006760 <_vsnprintf+0x958>
 800675e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006760:	68fc      	ldr	r4, [r7, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	2000      	movs	r0, #0
 8006768:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800676a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800676c:	4618      	mov	r0, r3
 800676e:	3758      	adds	r7, #88	; 0x58
 8006770:	46bd      	mov	sp, r7
 8006772:	bdb0      	pop	{r4, r5, r7, pc}

08006774 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8006774:	b40c      	push	{r2, r3}
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af02      	add	r7, sp, #8
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 8006780:	f107 031c 	add.w	r3, r7, #28
 8006784:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4805      	ldr	r0, [pc, #20]	; (80067a8 <snprintf_+0x34>)
 8006792:	f7ff fb39 	bl	8005e08 <_vsnprintf>
 8006796:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067a4:	b002      	add	sp, #8
 80067a6:	4770      	bx	lr
 80067a8:	08004eff 	.word	0x08004eff

080067ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b2:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <HAL_MspInit+0x44>)
 80067b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b6:	4a0e      	ldr	r2, [pc, #56]	; (80067f0 <HAL_MspInit+0x44>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6613      	str	r3, [r2, #96]	; 0x60
 80067be:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <HAL_MspInit+0x44>)
 80067c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <HAL_MspInit+0x44>)
 80067cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ce:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <HAL_MspInit+0x44>)
 80067d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d4:	6593      	str	r3, [r2, #88]	; 0x58
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_MspInit+0x44>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40021000 	.word	0x40021000

080067f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <HAL_RTC_MspInit+0x30>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d107      	bne.n	8006816 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006806:	4b08      	ldr	r3, [pc, #32]	; (8006828 <HAL_RTC_MspInit+0x34>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	4a06      	ldr	r2, [pc, #24]	; (8006828 <HAL_RTC_MspInit+0x34>)
 800680e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40002800 	.word	0x40002800
 8006828:	40021000 	.word	0x40021000

0800682c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	; 0x28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006834:	f107 0314 	add.w	r3, r7, #20
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	605a      	str	r2, [r3, #4]
 800683e:	609a      	str	r2, [r3, #8]
 8006840:	60da      	str	r2, [r3, #12]
 8006842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <HAL_SPI_MspInit+0x7c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d128      	bne.n	80068a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800684e:	4b17      	ldr	r3, [pc, #92]	; (80068ac <HAL_SPI_MspInit+0x80>)
 8006850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006852:	4a16      	ldr	r2, [pc, #88]	; (80068ac <HAL_SPI_MspInit+0x80>)
 8006854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006858:	6613      	str	r3, [r2, #96]	; 0x60
 800685a:	4b14      	ldr	r3, [pc, #80]	; (80068ac <HAL_SPI_MspInit+0x80>)
 800685c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006866:	4b11      	ldr	r3, [pc, #68]	; (80068ac <HAL_SPI_MspInit+0x80>)
 8006868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686a:	4a10      	ldr	r2, [pc, #64]	; (80068ac <HAL_SPI_MspInit+0x80>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006872:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <HAL_SPI_MspInit+0x80>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800687e:	23e0      	movs	r3, #224	; 0xe0
 8006880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006882:	2302      	movs	r3, #2
 8006884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006886:	2301      	movs	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800688a:	2303      	movs	r3, #3
 800688c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800688e:	2305      	movs	r3, #5
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006892:	f107 0314 	add.w	r3, r7, #20
 8006896:	4619      	mov	r1, r3
 8006898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800689c:	f000 faea 	bl	8006e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80068a0:	bf00      	nop
 80068a2:	3728      	adds	r7, #40	; 0x28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40013000 	.word	0x40013000
 80068ac:	40021000 	.word	0x40021000

080068b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <HAL_UART_MspInit+0x8c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d130      	bne.n	8006934 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80068d2:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <HAL_UART_MspInit+0x90>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	4a1a      	ldr	r2, [pc, #104]	; (8006940 <HAL_UART_MspInit+0x90>)
 80068d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068dc:	6593      	str	r3, [r2, #88]	; 0x58
 80068de:	4b18      	ldr	r3, [pc, #96]	; (8006940 <HAL_UART_MspInit+0x90>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068ea:	4b15      	ldr	r3, [pc, #84]	; (8006940 <HAL_UART_MspInit+0x90>)
 80068ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ee:	4a14      	ldr	r2, [pc, #80]	; (8006940 <HAL_UART_MspInit+0x90>)
 80068f0:	f043 0308 	orr.w	r3, r3, #8
 80068f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068f6:	4b12      	ldr	r3, [pc, #72]	; (8006940 <HAL_UART_MspInit+0x90>)
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006902:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006908:	2302      	movs	r3, #2
 800690a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800690c:	2301      	movs	r3, #1
 800690e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006910:	2303      	movs	r3, #3
 8006912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006914:	2307      	movs	r3, #7
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006918:	f107 0314 	add.w	r3, r7, #20
 800691c:	4619      	mov	r1, r3
 800691e:	4809      	ldr	r0, [pc, #36]	; (8006944 <HAL_UART_MspInit+0x94>)
 8006920:	f000 faa8 	bl	8006e74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006924:	2200      	movs	r2, #0
 8006926:	2100      	movs	r1, #0
 8006928:	2027      	movs	r0, #39	; 0x27
 800692a:	f000 fa2c 	bl	8006d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800692e:	2027      	movs	r0, #39	; 0x27
 8006930:	f000 fa45 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006934:	bf00      	nop
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40004800 	.word	0x40004800
 8006940:	40021000 	.word	0x40021000
 8006944:	48000c00 	.word	0x48000c00

08006948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800694c:	bf00      	nop
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006956:	b480      	push	{r7}
 8006958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800695a:	e7fe      	b.n	800695a <HardFault_Handler+0x4>

0800695c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006960:	e7fe      	b.n	8006960 <MemManage_Handler+0x4>

08006962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006962:	b480      	push	{r7}
 8006964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006966:	e7fe      	b.n	8006966 <BusFault_Handler+0x4>

08006968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800696c:	e7fe      	b.n	800696c <UsageFault_Handler+0x4>

0800696e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800696e:	b480      	push	{r7}
 8006970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006980:	bf00      	nop
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800698a:	b480      	push	{r7}
 800698c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800698e:	bf00      	nop
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800699c:	f000 f8fa 	bl	8006b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069a0:	bf00      	nop
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80069a8:	2004      	movs	r0, #4
 80069aa:	f000 fc25 	bl	80071f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80069ae:	bf00      	nop
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80069b8:	4802      	ldr	r0, [pc, #8]	; (80069c4 <USART3_IRQHandler+0x10>)
 80069ba:	f003 f917 	bl	8009bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200028c0 	.word	0x200028c0

080069c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80069cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80069d0:	f000 fc12 	bl	80071f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80069d4:	bf00      	nop
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80069e0:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <_sbrk+0x50>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <_sbrk+0x16>
		heap_end = &end;
 80069e8:	4b0f      	ldr	r3, [pc, #60]	; (8006a28 <_sbrk+0x50>)
 80069ea:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <_sbrk+0x54>)
 80069ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80069ee:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <_sbrk+0x50>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80069f4:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <_sbrk+0x50>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4413      	add	r3, r2
 80069fc:	466a      	mov	r2, sp
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d907      	bls.n	8006a12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006a02:	f004 f825 	bl	800aa50 <__errno>
 8006a06:	4602      	mov	r2, r0
 8006a08:	230c      	movs	r3, #12
 8006a0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	e006      	b.n	8006a20 <_sbrk+0x48>
	}

	heap_end += incr;
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <_sbrk+0x50>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4413      	add	r3, r2
 8006a1a:	4a03      	ldr	r2, [pc, #12]	; (8006a28 <_sbrk+0x50>)
 8006a1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000238 	.word	0x20000238
 8006a2c:	2001ac48 	.word	0x2001ac48

08006a30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a34:	4b17      	ldr	r3, [pc, #92]	; (8006a94 <SystemInit+0x64>)
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <SystemInit+0x64>)
 8006a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006a44:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <SystemInit+0x68>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a13      	ldr	r2, [pc, #76]	; (8006a98 <SystemInit+0x68>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006a50:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <SystemInit+0x68>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006a56:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <SystemInit+0x68>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a0f      	ldr	r2, [pc, #60]	; (8006a98 <SystemInit+0x68>)
 8006a5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006a60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006a64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <SystemInit+0x68>)
 8006a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <SystemInit+0x68>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a09      	ldr	r2, [pc, #36]	; (8006a98 <SystemInit+0x68>)
 8006a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <SystemInit+0x68>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a80:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <SystemInit+0x64>)
 8006a82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a86:	609a      	str	r2, [r3, #8]
#endif
}
 8006a88:	bf00      	nop
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	e000ed00 	.word	0xe000ed00
 8006a98:	40021000 	.word	0x40021000

08006a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ad4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006aa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006aa2:	e003      	b.n	8006aac <LoopCopyDataInit>

08006aa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006aa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006aa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006aaa:	3104      	adds	r1, #4

08006aac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006aac:	480b      	ldr	r0, [pc, #44]	; (8006adc <LoopForever+0xa>)
	ldr	r3, =_edata
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006ab0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006ab2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006ab4:	d3f6      	bcc.n	8006aa4 <CopyDataInit>
	ldr	r2, =_sbss
 8006ab6:	4a0b      	ldr	r2, [pc, #44]	; (8006ae4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006ab8:	e002      	b.n	8006ac0 <LoopFillZerobss>

08006aba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006aba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006abc:	f842 3b04 	str.w	r3, [r2], #4

08006ac0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006ac0:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <LoopForever+0x16>)
	cmp	r2, r3
 8006ac2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006ac4:	d3f9      	bcc.n	8006aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ac6:	f7ff ffb3 	bl	8006a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006aca:	f003 ffc7 	bl	800aa5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006ace:	f7fd febb 	bl	8004848 <main>

08006ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8006ad2:	e7fe      	b.n	8006ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006ad4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8006ad8:	0801290c 	.word	0x0801290c
	ldr	r0, =_sdata
 8006adc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006ae0:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8006ae4:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 8006ae8:	2001ac44 	.word	0x2001ac44

08006aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006aec:	e7fe      	b.n	8006aec <ADC1_2_IRQHandler>

08006aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006af8:	2003      	movs	r0, #3
 8006afa:	f000 f939 	bl	8006d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006afe:	2000      	movs	r0, #0
 8006b00:	f000 f80e 	bl	8006b20 <HAL_InitTick>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	71fb      	strb	r3, [r7, #7]
 8006b0e:	e001      	b.n	8006b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b10:	f7ff fe4c 	bl	80067ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b14:	79fb      	ldrb	r3, [r7, #7]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006b2c:	4b16      	ldr	r3, [pc, #88]	; (8006b88 <HAL_InitTick+0x68>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d022      	beq.n	8006b7a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006b34:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <HAL_InitTick+0x6c>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <HAL_InitTick+0x68>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 f946 	bl	8006dda <HAL_SYSTICK_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10f      	bne.n	8006b74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d809      	bhi.n	8006b6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b62:	f000 f910 	bl	8006d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b66:	4a0a      	ldr	r2, [pc, #40]	; (8006b90 <HAL_InitTick+0x70>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	e007      	b.n	8006b7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	73fb      	strb	r3, [r7, #15]
 8006b72:	e004      	b.n	8006b7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
 8006b78:	e001      	b.n	8006b7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000010 	.word	0x20000010
 8006b8c:	20000008 	.word	0x20000008
 8006b90:	2000000c 	.word	0x2000000c

08006b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <HAL_IncTick+0x1c>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <HAL_IncTick+0x20>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	4a03      	ldr	r2, [pc, #12]	; (8006bb0 <HAL_IncTick+0x1c>)
 8006ba4:	6013      	str	r3, [r2, #0]
}
 8006ba6:	bf00      	nop
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	2001ac3c 	.word	0x2001ac3c
 8006bb4:	20000010 	.word	0x20000010

08006bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  return uwTick;
 8006bbc:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <HAL_GetTick+0x14>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	2001ac3c 	.word	0x2001ac3c

08006bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006be0:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <__NVIC_SetPriorityGrouping+0x44>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bec:	4013      	ands	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c02:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <__NVIC_SetPriorityGrouping+0x44>)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	60d3      	str	r3, [r2, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	e000ed00 	.word	0xe000ed00

08006c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c1c:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <__NVIC_GetPriorityGrouping+0x18>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	f003 0307 	and.w	r3, r3, #7
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	e000ed00 	.word	0xe000ed00

08006c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	db0b      	blt.n	8006c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	f003 021f 	and.w	r2, r3, #31
 8006c4c:	4907      	ldr	r1, [pc, #28]	; (8006c6c <__NVIC_EnableIRQ+0x38>)
 8006c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	2001      	movs	r0, #1
 8006c56:	fa00 f202 	lsl.w	r2, r0, r2
 8006c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	e000e100 	.word	0xe000e100

08006c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	db0a      	blt.n	8006c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	490c      	ldr	r1, [pc, #48]	; (8006cbc <__NVIC_SetPriority+0x4c>)
 8006c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c8e:	0112      	lsls	r2, r2, #4
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	440b      	add	r3, r1
 8006c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c98:	e00a      	b.n	8006cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	4908      	ldr	r1, [pc, #32]	; (8006cc0 <__NVIC_SetPriority+0x50>)
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	3b04      	subs	r3, #4
 8006ca8:	0112      	lsls	r2, r2, #4
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	440b      	add	r3, r1
 8006cae:	761a      	strb	r2, [r3, #24]
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	e000e100 	.word	0xe000e100
 8006cc0:	e000ed00 	.word	0xe000ed00

08006cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f1c3 0307 	rsb	r3, r3, #7
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	bf28      	it	cs
 8006ce2:	2304      	movcs	r3, #4
 8006ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	2b06      	cmp	r3, #6
 8006cec:	d902      	bls.n	8006cf4 <NVIC_EncodePriority+0x30>
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	3b03      	subs	r3, #3
 8006cf2:	e000      	b.n	8006cf6 <NVIC_EncodePriority+0x32>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	43da      	mvns	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	401a      	ands	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	fa01 f303 	lsl.w	r3, r1, r3
 8006d16:	43d9      	mvns	r1, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d1c:	4313      	orrs	r3, r2
         );
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3724      	adds	r7, #36	; 0x24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d3c:	d301      	bcc.n	8006d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e00f      	b.n	8006d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <SysTick_Config+0x40>)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d4a:	210f      	movs	r1, #15
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	f7ff ff8e 	bl	8006c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <SysTick_Config+0x40>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d5a:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <SysTick_Config+0x40>)
 8006d5c:	2207      	movs	r2, #7
 8006d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	e000e010 	.word	0xe000e010

08006d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ff29 	bl	8006bd0 <__NVIC_SetPriorityGrouping>
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b086      	sub	sp, #24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
 8006d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d98:	f7ff ff3e 	bl	8006c18 <__NVIC_GetPriorityGrouping>
 8006d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	6978      	ldr	r0, [r7, #20]
 8006da4:	f7ff ff8e 	bl	8006cc4 <NVIC_EncodePriority>
 8006da8:	4602      	mov	r2, r0
 8006daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dae:	4611      	mov	r1, r2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ff5d 	bl	8006c70 <__NVIC_SetPriority>
}
 8006db6:	bf00      	nop
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff ff31 	bl	8006c34 <__NVIC_EnableIRQ>
}
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff ffa2 	bl	8006d2c <SysTick_Config>
 8006de8:	4603      	mov	r3, r0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d005      	beq.n	8006e16 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
 8006e14:	e029      	b.n	8006e6a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 020e 	bic.w	r2, r2, #14
 8006e24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	f003 021c 	and.w	r2, r3, #28
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	2101      	movs	r1, #1
 8006e44:	fa01 f202 	lsl.w	r2, r1, r2
 8006e48:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
    }
  }
  return status;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e82:	e166      	b.n	8007152 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	2101      	movs	r1, #1
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e90:	4013      	ands	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8158 	beq.w	800714c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d00b      	beq.n	8006ebc <HAL_GPIO_Init+0x48>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d007      	beq.n	8006ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006eb0:	2b11      	cmp	r3, #17
 8006eb2:	d003      	beq.n	8006ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b12      	cmp	r3, #18
 8006eba:	d130      	bne.n	8006f1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	43db      	mvns	r3, r3
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4013      	ands	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	091b      	lsrs	r3, r3, #4
 8006f08:	f003 0201 	and.w	r2, r3, #1
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	2203      	movs	r2, #3
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4013      	ands	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_Init+0xea>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b12      	cmp	r3, #18
 8006f5c:	d123      	bne.n	8006fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	08da      	lsrs	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3208      	adds	r2, #8
 8006f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	220f      	movs	r2, #15
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	691a      	ldr	r2, [r3, #16]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	08da      	lsrs	r2, r3, #3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3208      	adds	r2, #8
 8006fa0:	6939      	ldr	r1, [r7, #16]
 8006fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f003 0203 	and.w	r2, r3, #3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 80b2 	beq.w	800714c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fe8:	4b61      	ldr	r3, [pc, #388]	; (8007170 <HAL_GPIO_Init+0x2fc>)
 8006fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fec:	4a60      	ldr	r2, [pc, #384]	; (8007170 <HAL_GPIO_Init+0x2fc>)
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8006ff4:	4b5e      	ldr	r3, [pc, #376]	; (8007170 <HAL_GPIO_Init+0x2fc>)
 8006ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	60bb      	str	r3, [r7, #8]
 8006ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007000:	4a5c      	ldr	r2, [pc, #368]	; (8007174 <HAL_GPIO_Init+0x300>)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	3302      	adds	r3, #2
 8007008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	220f      	movs	r2, #15
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	43db      	mvns	r3, r3
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4013      	ands	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800702a:	d02b      	beq.n	8007084 <HAL_GPIO_Init+0x210>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a52      	ldr	r2, [pc, #328]	; (8007178 <HAL_GPIO_Init+0x304>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d025      	beq.n	8007080 <HAL_GPIO_Init+0x20c>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a51      	ldr	r2, [pc, #324]	; (800717c <HAL_GPIO_Init+0x308>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d01f      	beq.n	800707c <HAL_GPIO_Init+0x208>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a50      	ldr	r2, [pc, #320]	; (8007180 <HAL_GPIO_Init+0x30c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d019      	beq.n	8007078 <HAL_GPIO_Init+0x204>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a4f      	ldr	r2, [pc, #316]	; (8007184 <HAL_GPIO_Init+0x310>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <HAL_GPIO_Init+0x200>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a4e      	ldr	r2, [pc, #312]	; (8007188 <HAL_GPIO_Init+0x314>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00d      	beq.n	8007070 <HAL_GPIO_Init+0x1fc>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a4d      	ldr	r2, [pc, #308]	; (800718c <HAL_GPIO_Init+0x318>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d007      	beq.n	800706c <HAL_GPIO_Init+0x1f8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a4c      	ldr	r2, [pc, #304]	; (8007190 <HAL_GPIO_Init+0x31c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d101      	bne.n	8007068 <HAL_GPIO_Init+0x1f4>
 8007064:	2307      	movs	r3, #7
 8007066:	e00e      	b.n	8007086 <HAL_GPIO_Init+0x212>
 8007068:	2308      	movs	r3, #8
 800706a:	e00c      	b.n	8007086 <HAL_GPIO_Init+0x212>
 800706c:	2306      	movs	r3, #6
 800706e:	e00a      	b.n	8007086 <HAL_GPIO_Init+0x212>
 8007070:	2305      	movs	r3, #5
 8007072:	e008      	b.n	8007086 <HAL_GPIO_Init+0x212>
 8007074:	2304      	movs	r3, #4
 8007076:	e006      	b.n	8007086 <HAL_GPIO_Init+0x212>
 8007078:	2303      	movs	r3, #3
 800707a:	e004      	b.n	8007086 <HAL_GPIO_Init+0x212>
 800707c:	2302      	movs	r3, #2
 800707e:	e002      	b.n	8007086 <HAL_GPIO_Init+0x212>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <HAL_GPIO_Init+0x212>
 8007084:	2300      	movs	r3, #0
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	f002 0203 	and.w	r2, r2, #3
 800708c:	0092      	lsls	r2, r2, #2
 800708e:	4093      	lsls	r3, r2
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007096:	4937      	ldr	r1, [pc, #220]	; (8007174 <HAL_GPIO_Init+0x300>)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	089b      	lsrs	r3, r3, #2
 800709c:	3302      	adds	r3, #2
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80070a4:	4b3b      	ldr	r3, [pc, #236]	; (8007194 <HAL_GPIO_Init+0x320>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	43db      	mvns	r3, r3
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4013      	ands	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80070c8:	4a32      	ldr	r2, [pc, #200]	; (8007194 <HAL_GPIO_Init+0x320>)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80070ce:	4b31      	ldr	r3, [pc, #196]	; (8007194 <HAL_GPIO_Init+0x320>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	43db      	mvns	r3, r3
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4013      	ands	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80070f2:	4a28      	ldr	r2, [pc, #160]	; (8007194 <HAL_GPIO_Init+0x320>)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070f8:	4b26      	ldr	r3, [pc, #152]	; (8007194 <HAL_GPIO_Init+0x320>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	43db      	mvns	r3, r3
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4013      	ands	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <HAL_GPIO_Init+0x320>)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007122:	4b1c      	ldr	r3, [pc, #112]	; (8007194 <HAL_GPIO_Init+0x320>)
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	43db      	mvns	r3, r3
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4013      	ands	r3, r2
 8007130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007146:	4a13      	ldr	r2, [pc, #76]	; (8007194 <HAL_GPIO_Init+0x320>)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	3301      	adds	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	fa22 f303 	lsr.w	r3, r2, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	f47f ae91 	bne.w	8006e84 <HAL_GPIO_Init+0x10>
  }
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40021000 	.word	0x40021000
 8007174:	40010000 	.word	0x40010000
 8007178:	48000400 	.word	0x48000400
 800717c:	48000800 	.word	0x48000800
 8007180:	48000c00 	.word	0x48000c00
 8007184:	48001000 	.word	0x48001000
 8007188:	48001400 	.word	0x48001400
 800718c:	48001800 	.word	0x48001800
 8007190:	48001c00 	.word	0x48001c00
 8007194:	40010400 	.word	0x40010400

08007198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	887b      	ldrh	r3, [r7, #2]
 80071aa:	4013      	ands	r3, r2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071b0:	2301      	movs	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
 80071b4:	e001      	b.n	80071ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	807b      	strh	r3, [r7, #2]
 80071d4:	4613      	mov	r3, r2
 80071d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071d8:	787b      	ldrb	r3, [r7, #1]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071de:	887a      	ldrh	r2, [r7, #2]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80071e4:	e002      	b.n	80071ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071e6:	887a      	ldrh	r2, [r7, #2]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007202:	4b08      	ldr	r3, [pc, #32]	; (8007224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	4013      	ands	r3, r2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d006      	beq.n	800721c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800720e:	4a05      	ldr	r2, [pc, #20]	; (8007224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	4618      	mov	r0, r3
 8007218:	f7fd fd7e 	bl	8004d18 <HAL_GPIO_EXTI_Callback>
  }
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40010400 	.word	0x40010400

08007228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800722c:	4b04      	ldr	r3, [pc, #16]	; (8007240 <HAL_PWREx_GetVoltageRange+0x18>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40007000 	.word	0x40007000

08007244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007252:	d130      	bne.n	80072b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007254:	4b23      	ldr	r3, [pc, #140]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800725c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007260:	d038      	beq.n	80072d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007262:	4b20      	ldr	r3, [pc, #128]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800726a:	4a1e      	ldr	r2, [pc, #120]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800726c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007272:	4b1d      	ldr	r3, [pc, #116]	; (80072e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2232      	movs	r2, #50	; 0x32
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	4a1b      	ldr	r2, [pc, #108]	; (80072ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	0c9b      	lsrs	r3, r3, #18
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007288:	e002      	b.n	8007290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3b01      	subs	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007290:	4b14      	ldr	r3, [pc, #80]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729c:	d102      	bne.n	80072a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1f2      	bne.n	800728a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072a4:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b0:	d110      	bne.n	80072d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e00f      	b.n	80072d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c2:	d007      	beq.n	80072d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80072cc:	4a05      	ldr	r2, [pc, #20]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40007000 	.word	0x40007000
 80072e8:	20000008 	.word	0x20000008
 80072ec:	431bde83 	.word	0x431bde83

080072f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f000 bc16 	b.w	8007b30 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007304:	4ba0      	ldr	r3, [pc, #640]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800730e:	4b9e      	ldr	r3, [pc, #632]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80e4 	beq.w	80074ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <HAL_RCC_OscConfig+0x4c>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b0c      	cmp	r3, #12
 8007330:	f040 808b 	bne.w	800744a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b01      	cmp	r3, #1
 8007338:	f040 8087 	bne.w	800744a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800733c:	4b92      	ldr	r3, [pc, #584]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_RCC_OscConfig+0x64>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e3ed      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	4b8b      	ldr	r3, [pc, #556]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <HAL_RCC_OscConfig+0x7e>
 8007364:	4b88      	ldr	r3, [pc, #544]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800736c:	e005      	b.n	800737a <HAL_RCC_OscConfig+0x8a>
 800736e:	4b86      	ldr	r3, [pc, #536]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007374:	091b      	lsrs	r3, r3, #4
 8007376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800737a:	4293      	cmp	r3, r2
 800737c:	d223      	bcs.n	80073c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fd7e 	bl	8007e84 <RCC_SetFlashLatencyFromMSIRange>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e3ce      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007392:	4b7d      	ldr	r3, [pc, #500]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a7c      	ldr	r2, [pc, #496]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007398:	f043 0308 	orr.w	r3, r3, #8
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	4b7a      	ldr	r3, [pc, #488]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	4977      	ldr	r1, [pc, #476]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073b0:	4b75      	ldr	r3, [pc, #468]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	4972      	ldr	r1, [pc, #456]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	604b      	str	r3, [r1, #4]
 80073c4:	e025      	b.n	8007412 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073c6:	4b70      	ldr	r3, [pc, #448]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a6f      	ldr	r2, [pc, #444]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073cc:	f043 0308 	orr.w	r3, r3, #8
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	4b6d      	ldr	r3, [pc, #436]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	496a      	ldr	r1, [pc, #424]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073e4:	4b68      	ldr	r3, [pc, #416]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	4965      	ldr	r1, [pc, #404]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fd3e 	bl	8007e84 <RCC_SetFlashLatencyFromMSIRange>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e38e      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007412:	f000 fc75 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 8007416:	4601      	mov	r1, r0
 8007418:	4b5b      	ldr	r3, [pc, #364]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	091b      	lsrs	r3, r3, #4
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	4a5a      	ldr	r2, [pc, #360]	; (800758c <HAL_RCC_OscConfig+0x29c>)
 8007424:	5cd3      	ldrb	r3, [r2, r3]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	fa21 f303 	lsr.w	r3, r1, r3
 800742e:	4a58      	ldr	r2, [pc, #352]	; (8007590 <HAL_RCC_OscConfig+0x2a0>)
 8007430:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007432:	4b58      	ldr	r3, [pc, #352]	; (8007594 <HAL_RCC_OscConfig+0x2a4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fb72 	bl	8006b20 <HAL_InitTick>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d052      	beq.n	80074ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	e372      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d032      	beq.n	80074b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007452:	4b4d      	ldr	r3, [pc, #308]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a4c      	ldr	r2, [pc, #304]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007458:	f043 0301 	orr.w	r3, r3, #1
 800745c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800745e:	f7ff fbab 	bl	8006bb8 <HAL_GetTick>
 8007462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007464:	e008      	b.n	8007478 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007466:	f7ff fba7 	bl	8006bb8 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e35b      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007478:	4b43      	ldr	r3, [pc, #268]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007484:	4b40      	ldr	r3, [pc, #256]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3f      	ldr	r2, [pc, #252]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800748a:	f043 0308 	orr.w	r3, r3, #8
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	4b3d      	ldr	r3, [pc, #244]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	493a      	ldr	r1, [pc, #232]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074a2:	4b39      	ldr	r3, [pc, #228]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	4935      	ldr	r1, [pc, #212]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	604b      	str	r3, [r1, #4]
 80074b6:	e01a      	b.n	80074ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80074b8:	4b33      	ldr	r3, [pc, #204]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a32      	ldr	r2, [pc, #200]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074c4:	f7ff fb78 	bl	8006bb8 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074cc:	f7ff fb74 	bl	8006bb8 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e328      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074de:	4b2a      	ldr	r3, [pc, #168]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0x1dc>
 80074ea:	e000      	b.n	80074ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d073      	beq.n	80075e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d005      	beq.n	800750c <HAL_RCC_OscConfig+0x21c>
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b0c      	cmp	r3, #12
 8007504:	d10e      	bne.n	8007524 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d10b      	bne.n	8007524 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800750c:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d063      	beq.n	80075e0 <HAL_RCC_OscConfig+0x2f0>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d15f      	bne.n	80075e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e305      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752c:	d106      	bne.n	800753c <HAL_RCC_OscConfig+0x24c>
 800752e:	4b16      	ldr	r3, [pc, #88]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a15      	ldr	r2, [pc, #84]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	e01d      	b.n	8007578 <HAL_RCC_OscConfig+0x288>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007544:	d10c      	bne.n	8007560 <HAL_RCC_OscConfig+0x270>
 8007546:	4b10      	ldr	r3, [pc, #64]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800754c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a0c      	ldr	r2, [pc, #48]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e00b      	b.n	8007578 <HAL_RCC_OscConfig+0x288>
 8007560:	4b09      	ldr	r3, [pc, #36]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a08      	ldr	r2, [pc, #32]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a05      	ldr	r2, [pc, #20]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01b      	beq.n	80075b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007580:	f7ff fb1a 	bl	8006bb8 <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007586:	e010      	b.n	80075aa <HAL_RCC_OscConfig+0x2ba>
 8007588:	40021000 	.word	0x40021000
 800758c:	08012620 	.word	0x08012620
 8007590:	20000008 	.word	0x20000008
 8007594:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007598:	f7ff fb0e 	bl	8006bb8 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b64      	cmp	r3, #100	; 0x64
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e2c2      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075aa:	4baf      	ldr	r3, [pc, #700]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f0      	beq.n	8007598 <HAL_RCC_OscConfig+0x2a8>
 80075b6:	e014      	b.n	80075e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b8:	f7ff fafe 	bl	8006bb8 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c0:	f7ff fafa 	bl	8006bb8 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b64      	cmp	r3, #100	; 0x64
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e2ae      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075d2:	4ba5      	ldr	r3, [pc, #660]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <HAL_RCC_OscConfig+0x2d0>
 80075de:	e000      	b.n	80075e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d060      	beq.n	80076b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_OscConfig+0x310>
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	2b0c      	cmp	r3, #12
 80075f8:	d119      	bne.n	800762e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d116      	bne.n	800762e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007600:	4b99      	ldr	r3, [pc, #612]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_RCC_OscConfig+0x328>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e28b      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007618:	4b93      	ldr	r3, [pc, #588]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	061b      	lsls	r3, r3, #24
 8007626:	4990      	ldr	r1, [pc, #576]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007628:	4313      	orrs	r3, r2
 800762a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800762c:	e040      	b.n	80076b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d023      	beq.n	800767e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007636:	4b8c      	ldr	r3, [pc, #560]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a8b      	ldr	r2, [pc, #556]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800763c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7ff fab9 	bl	8006bb8 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800764a:	f7ff fab5 	bl	8006bb8 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e269      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800765c:	4b82      	ldr	r3, [pc, #520]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0f0      	beq.n	800764a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007668:	4b7f      	ldr	r3, [pc, #508]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	497c      	ldr	r1, [pc, #496]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007678:	4313      	orrs	r3, r2
 800767a:	604b      	str	r3, [r1, #4]
 800767c:	e018      	b.n	80076b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800767e:	4b7a      	ldr	r3, [pc, #488]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a79      	ldr	r2, [pc, #484]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768a:	f7ff fa95 	bl	8006bb8 <HAL_GetTick>
 800768e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007692:	f7ff fa91 	bl	8006bb8 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e245      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076a4:	4b70      	ldr	r3, [pc, #448]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f0      	bne.n	8007692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d03c      	beq.n	8007736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01c      	beq.n	80076fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076c4:	4b68      	ldr	r3, [pc, #416]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80076c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ca:	4a67      	ldr	r2, [pc, #412]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d4:	f7ff fa70 	bl	8006bb8 <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076dc:	f7ff fa6c 	bl	8006bb8 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e220      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076ee:	4b5e      	ldr	r3, [pc, #376]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80076f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0ef      	beq.n	80076dc <HAL_RCC_OscConfig+0x3ec>
 80076fc:	e01b      	b.n	8007736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076fe:	4b5a      	ldr	r3, [pc, #360]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007704:	4a58      	ldr	r2, [pc, #352]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770e:	f7ff fa53 	bl	8006bb8 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007716:	f7ff fa4f 	bl	8006bb8 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e203      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007728:	4b4f      	ldr	r3, [pc, #316]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800772a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1ef      	bne.n	8007716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80a6 	beq.w	8007890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007744:	2300      	movs	r3, #0
 8007746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007748:	4b47      	ldr	r3, [pc, #284]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10d      	bne.n	8007770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007754:	4b44      	ldr	r3, [pc, #272]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007758:	4a43      	ldr	r2, [pc, #268]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800775a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775e:	6593      	str	r3, [r2, #88]	; 0x58
 8007760:	4b41      	ldr	r3, [pc, #260]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776c:	2301      	movs	r3, #1
 800776e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007770:	4b3e      	ldr	r3, [pc, #248]	; (800786c <HAL_RCC_OscConfig+0x57c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d118      	bne.n	80077ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800777c:	4b3b      	ldr	r3, [pc, #236]	; (800786c <HAL_RCC_OscConfig+0x57c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a3a      	ldr	r2, [pc, #232]	; (800786c <HAL_RCC_OscConfig+0x57c>)
 8007782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007788:	f7ff fa16 	bl	8006bb8 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800778e:	e008      	b.n	80077a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007790:	f7ff fa12 	bl	8006bb8 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e1c6      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077a2:	4b32      	ldr	r3, [pc, #200]	; (800786c <HAL_RCC_OscConfig+0x57c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f0      	beq.n	8007790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d108      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4d8>
 80077b6:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077bc:	4a2a      	ldr	r2, [pc, #168]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077be:	f043 0301 	orr.w	r3, r3, #1
 80077c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077c6:	e024      	b.n	8007812 <HAL_RCC_OscConfig+0x522>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2b05      	cmp	r3, #5
 80077ce:	d110      	bne.n	80077f2 <HAL_RCC_OscConfig+0x502>
 80077d0:	4b25      	ldr	r3, [pc, #148]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d6:	4a24      	ldr	r2, [pc, #144]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077d8:	f043 0304 	orr.w	r3, r3, #4
 80077dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077e0:	4b21      	ldr	r3, [pc, #132]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e6:	4a20      	ldr	r2, [pc, #128]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077f0:	e00f      	b.n	8007812 <HAL_RCC_OscConfig+0x522>
 80077f2:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f8:	4a1b      	ldr	r2, [pc, #108]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007802:	4b19      	ldr	r3, [pc, #100]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	4a17      	ldr	r2, [pc, #92]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800780a:	f023 0304 	bic.w	r3, r3, #4
 800780e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d016      	beq.n	8007848 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781a:	f7ff f9cd 	bl	8006bb8 <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007820:	e00a      	b.n	8007838 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007822:	f7ff f9c9 	bl	8006bb8 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	4293      	cmp	r3, r2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e17b      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007838:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0ed      	beq.n	8007822 <HAL_RCC_OscConfig+0x532>
 8007846:	e01a      	b.n	800787e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007848:	f7ff f9b6 	bl	8006bb8 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800784e:	e00f      	b.n	8007870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007850:	f7ff f9b2 	bl	8006bb8 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	; 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d906      	bls.n	8007870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e164      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
 8007866:	bf00      	nop
 8007868:	40021000 	.word	0x40021000
 800786c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007870:	4ba8      	ldr	r3, [pc, #672]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e8      	bne.n	8007850 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800787e:	7ffb      	ldrb	r3, [r7, #31]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d105      	bne.n	8007890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007884:	4ba3      	ldr	r3, [pc, #652]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007888:	4aa2      	ldr	r2, [pc, #648]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 800788a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800788e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b00      	cmp	r3, #0
 800789a:	d03c      	beq.n	8007916 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01c      	beq.n	80078de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078a4:	4b9b      	ldr	r3, [pc, #620]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078aa:	4a9a      	ldr	r2, [pc, #616]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7ff f980 	bl	8006bb8 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078bc:	f7ff f97c 	bl	8006bb8 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e130      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078ce:	4b91      	ldr	r3, [pc, #580]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0ef      	beq.n	80078bc <HAL_RCC_OscConfig+0x5cc>
 80078dc:	e01b      	b.n	8007916 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078de:	4b8d      	ldr	r3, [pc, #564]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078e4:	4a8b      	ldr	r2, [pc, #556]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ee:	f7ff f963 	bl	8006bb8 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078f6:	f7ff f95f 	bl	8006bb8 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e113      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007908:	4b82      	ldr	r3, [pc, #520]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 800790a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1ef      	bne.n	80078f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8107 	beq.w	8007b2e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	2b02      	cmp	r3, #2
 8007926:	f040 80cb 	bne.w	8007ac0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800792a:	4b7a      	ldr	r3, [pc, #488]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f003 0203 	and.w	r2, r3, #3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	429a      	cmp	r2, r3
 800793c:	d12c      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	3b01      	subs	r3, #1
 800794a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800794c:	429a      	cmp	r2, r3
 800794e:	d123      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800795c:	429a      	cmp	r2, r3
 800795e:	d11b      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800796c:	429a      	cmp	r2, r3
 800796e:	d113      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	3b01      	subs	r3, #1
 800797e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007980:	429a      	cmp	r2, r3
 8007982:	d109      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	3b01      	subs	r3, #1
 8007992:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007994:	429a      	cmp	r2, r3
 8007996:	d06d      	beq.n	8007a74 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b0c      	cmp	r3, #12
 800799c:	d068      	beq.n	8007a70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800799e:	4b5d      	ldr	r3, [pc, #372]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d105      	bne.n	80079b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80079aa:	4b5a      	ldr	r3, [pc, #360]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e0ba      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80079ba:	4b56      	ldr	r3, [pc, #344]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a55      	ldr	r2, [pc, #340]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079c6:	f7ff f8f7 	bl	8006bb8 <HAL_GetTick>
 80079ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ce:	f7ff f8f3 	bl	8006bb8 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0a7      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079e0:	4b4c      	ldr	r3, [pc, #304]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f0      	bne.n	80079ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079ec:	4b49      	ldr	r3, [pc, #292]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	4b49      	ldr	r3, [pc, #292]	; (8007b18 <HAL_RCC_OscConfig+0x828>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079fc:	3a01      	subs	r2, #1
 80079fe:	0112      	lsls	r2, r2, #4
 8007a00:	4311      	orrs	r1, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a06:	0212      	lsls	r2, r2, #8
 8007a08:	4311      	orrs	r1, r2
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a0e:	0852      	lsrs	r2, r2, #1
 8007a10:	3a01      	subs	r2, #1
 8007a12:	0552      	lsls	r2, r2, #21
 8007a14:	4311      	orrs	r1, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a1a:	0852      	lsrs	r2, r2, #1
 8007a1c:	3a01      	subs	r2, #1
 8007a1e:	0652      	lsls	r2, r2, #25
 8007a20:	4311      	orrs	r1, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a26:	06d2      	lsls	r2, r2, #27
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	493a      	ldr	r1, [pc, #232]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a30:	4b38      	ldr	r3, [pc, #224]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a37      	ldr	r2, [pc, #220]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a3c:	4b35      	ldr	r3, [pc, #212]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	4a34      	ldr	r2, [pc, #208]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a48:	f7ff f8b6 	bl	8006bb8 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a50:	f7ff f8b2 	bl	8006bb8 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e066      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a62:	4b2c      	ldr	r3, [pc, #176]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f0      	beq.n	8007a50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a6e:	e05e      	b.n	8007b2e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e05d      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a74:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d156      	bne.n	8007b2e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a23      	ldr	r2, [pc, #140]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a8c:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a20      	ldr	r2, [pc, #128]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a98:	f7ff f88e 	bl	8006bb8 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa0:	f7ff f88a 	bl	8006bb8 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e03e      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ab2:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0f0      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x7b0>
 8007abe:	e036      	b.n	8007b2e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b0c      	cmp	r3, #12
 8007ac4:	d031      	beq.n	8007b2a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ac6:	4b13      	ldr	r3, [pc, #76]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a12      	ldr	r2, [pc, #72]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ad0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007ad2:	4b10      	ldr	r3, [pc, #64]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d105      	bne.n	8007aea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007ade:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	4a0c      	ldr	r2, [pc, #48]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007aea:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007af0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afa:	f7ff f85d 	bl	8006bb8 <HAL_GetTick>
 8007afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b00:	e00c      	b.n	8007b1c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b02:	f7ff f859 	bl	8006bb8 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d905      	bls.n	8007b1c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e00d      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
 8007b14:	40021000 	.word	0x40021000
 8007b18:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <HAL_RCC_OscConfig+0x848>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1ec      	bne.n	8007b02 <HAL_RCC_OscConfig+0x812>
 8007b28:	e001      	b.n	8007b2e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40021000 	.word	0x40021000

08007b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e0c8      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b50:	4b66      	ldr	r3, [pc, #408]	; (8007cec <HAL_RCC_ClockConfig+0x1b0>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d910      	bls.n	8007b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5e:	4b63      	ldr	r3, [pc, #396]	; (8007cec <HAL_RCC_ClockConfig+0x1b0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f023 0207 	bic.w	r2, r3, #7
 8007b66:	4961      	ldr	r1, [pc, #388]	; (8007cec <HAL_RCC_ClockConfig+0x1b0>)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	4b5f      	ldr	r3, [pc, #380]	; (8007cec <HAL_RCC_ClockConfig+0x1b0>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d001      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0b0      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d04c      	beq.n	8007c26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d107      	bne.n	8007ba4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b94:	4b56      	ldr	r3, [pc, #344]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d121      	bne.n	8007be4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e09e      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d107      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bac:	4b50      	ldr	r3, [pc, #320]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d115      	bne.n	8007be4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e092      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d107      	bne.n	8007bd4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007bc4:	4b4a      	ldr	r3, [pc, #296]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d109      	bne.n	8007be4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e086      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bd4:	4b46      	ldr	r3, [pc, #280]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e07e      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007be4:	4b42      	ldr	r3, [pc, #264]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f023 0203 	bic.w	r2, r3, #3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	493f      	ldr	r1, [pc, #252]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf6:	f7fe ffdf 	bl	8006bb8 <HAL_GetTick>
 8007bfa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bfc:	e00a      	b.n	8007c14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bfe:	f7fe ffdb 	bl	8006bb8 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d901      	bls.n	8007c14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e066      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c14:	4b36      	ldr	r3, [pc, #216]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 020c 	and.w	r2, r3, #12
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d1eb      	bne.n	8007bfe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c32:	4b2f      	ldr	r3, [pc, #188]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	492c      	ldr	r1, [pc, #176]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c44:	4b29      	ldr	r3, [pc, #164]	; (8007cec <HAL_RCC_ClockConfig+0x1b0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d210      	bcs.n	8007c74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c52:	4b26      	ldr	r3, [pc, #152]	; (8007cec <HAL_RCC_ClockConfig+0x1b0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f023 0207 	bic.w	r2, r3, #7
 8007c5a:	4924      	ldr	r1, [pc, #144]	; (8007cec <HAL_RCC_ClockConfig+0x1b0>)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c62:	4b22      	ldr	r3, [pc, #136]	; (8007cec <HAL_RCC_ClockConfig+0x1b0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d001      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e036      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c80:	4b1b      	ldr	r3, [pc, #108]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4918      	ldr	r1, [pc, #96]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c9e:	4b14      	ldr	r3, [pc, #80]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4910      	ldr	r1, [pc, #64]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cb2:	f000 f825 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <HAL_RCC_ClockConfig+0x1b4>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	f003 030f 	and.w	r3, r3, #15
 8007cc2:	4a0c      	ldr	r2, [pc, #48]	; (8007cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc4:	5cd3      	ldrb	r3, [r2, r3]
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	fa21 f303 	lsr.w	r3, r1, r3
 8007cce:	4a0a      	ldr	r2, [pc, #40]	; (8007cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	; (8007cfc <HAL_RCC_ClockConfig+0x1c0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe ff22 	bl	8006b20 <HAL_InitTick>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	72fb      	strb	r3, [r7, #11]

  return status;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	40022000 	.word	0x40022000
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	08012620 	.word	0x08012620
 8007cf8:	20000008 	.word	0x20000008
 8007cfc:	2000000c 	.word	0x2000000c

08007d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b089      	sub	sp, #36	; 0x24
 8007d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d0e:	4b3d      	ldr	r3, [pc, #244]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 030c 	and.w	r3, r3, #12
 8007d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d18:	4b3a      	ldr	r3, [pc, #232]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0303 	and.w	r3, r3, #3
 8007d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_RCC_GetSysClockFreq+0x34>
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b0c      	cmp	r3, #12
 8007d2c:	d121      	bne.n	8007d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d11e      	bne.n	8007d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007d34:	4b33      	ldr	r3, [pc, #204]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d107      	bne.n	8007d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007d40:	4b30      	ldr	r3, [pc, #192]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d46:	0a1b      	lsrs	r3, r3, #8
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	e005      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007d50:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	091b      	lsrs	r3, r3, #4
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007d5c:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10d      	bne.n	8007d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d70:	e00a      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d102      	bne.n	8007d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d78:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007d7a:	61bb      	str	r3, [r7, #24]
 8007d7c:	e004      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d101      	bne.n	8007d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d84:	4b22      	ldr	r3, [pc, #136]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8007d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b0c      	cmp	r3, #12
 8007d8c:	d133      	bne.n	8007df6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d8e:	4b1d      	ldr	r3, [pc, #116]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d002      	beq.n	8007da4 <HAL_RCC_GetSysClockFreq+0xa4>
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d003      	beq.n	8007daa <HAL_RCC_GetSysClockFreq+0xaa>
 8007da2:	e005      	b.n	8007db0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007da4:	4b19      	ldr	r3, [pc, #100]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007da6:	617b      	str	r3, [r7, #20]
      break;
 8007da8:	e005      	b.n	8007db6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007daa:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8007dac:	617b      	str	r3, [r7, #20]
      break;
 8007dae:	e002      	b.n	8007db6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	617b      	str	r3, [r7, #20]
      break;
 8007db4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007db6:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	091b      	lsrs	r3, r3, #4
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007dc4:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	0a1b      	lsrs	r3, r3, #8
 8007dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	fb02 f203 	mul.w	r2, r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dda:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	0e5b      	lsrs	r3, r3, #25
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	3301      	adds	r3, #1
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007df6:	69bb      	ldr	r3, [r7, #24]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3724      	adds	r7, #36	; 0x24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	40021000 	.word	0x40021000
 8007e08:	08012638 	.word	0x08012638
 8007e0c:	00f42400 	.word	0x00f42400
 8007e10:	007a1200 	.word	0x007a1200

08007e14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000008 	.word	0x20000008

08007e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e30:	f7ff fff0 	bl	8007e14 <HAL_RCC_GetHCLKFreq>
 8007e34:	4601      	mov	r1, r0
 8007e36:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	0a1b      	lsrs	r3, r3, #8
 8007e3c:	f003 0307 	and.w	r3, r3, #7
 8007e40:	4a04      	ldr	r2, [pc, #16]	; (8007e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e42:	5cd3      	ldrb	r3, [r2, r3]
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	40021000 	.word	0x40021000
 8007e54:	08012630 	.word	0x08012630

08007e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007e5c:	f7ff ffda 	bl	8007e14 <HAL_RCC_GetHCLKFreq>
 8007e60:	4601      	mov	r1, r0
 8007e62:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	0adb      	lsrs	r3, r3, #11
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e6e:	5cd3      	ldrb	r3, [r2, r3]
 8007e70:	f003 031f 	and.w	r3, r3, #31
 8007e74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	40021000 	.word	0x40021000
 8007e80:	08012630 	.word	0x08012630

08007e84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007e90:	4b2a      	ldr	r3, [pc, #168]	; (8007f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007e9c:	f7ff f9c4 	bl	8007228 <HAL_PWREx_GetVoltageRange>
 8007ea0:	6178      	str	r0, [r7, #20]
 8007ea2:	e014      	b.n	8007ece <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ea4:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea8:	4a24      	ldr	r2, [pc, #144]	; (8007f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eae:	6593      	str	r3, [r2, #88]	; 0x58
 8007eb0:	4b22      	ldr	r3, [pc, #136]	; (8007f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007ebc:	f7ff f9b4 	bl	8007228 <HAL_PWREx_GetVoltageRange>
 8007ec0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007ec2:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec6:	4a1d      	ldr	r2, [pc, #116]	; (8007f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ecc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed4:	d10b      	bne.n	8007eee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b80      	cmp	r3, #128	; 0x80
 8007eda:	d919      	bls.n	8007f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2ba0      	cmp	r3, #160	; 0xa0
 8007ee0:	d902      	bls.n	8007ee8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	e013      	b.n	8007f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ee8:	2301      	movs	r3, #1
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	e010      	b.n	8007f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b80      	cmp	r3, #128	; 0x80
 8007ef2:	d902      	bls.n	8007efa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	e00a      	b.n	8007f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b80      	cmp	r3, #128	; 0x80
 8007efe:	d102      	bne.n	8007f06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f00:	2302      	movs	r3, #2
 8007f02:	613b      	str	r3, [r7, #16]
 8007f04:	e004      	b.n	8007f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b70      	cmp	r3, #112	; 0x70
 8007f0a:	d101      	bne.n	8007f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f023 0207 	bic.w	r2, r3, #7
 8007f18:	4909      	ldr	r1, [pc, #36]	; (8007f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0307 	and.w	r3, r3, #7
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d001      	beq.n	8007f32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	40021000 	.word	0x40021000
 8007f40:	40022000 	.word	0x40022000

08007f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f50:	2300      	movs	r3, #0
 8007f52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d03f      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f68:	d01c      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f6e:	d802      	bhi.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00e      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007f74:	e01f      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f7a:	d003      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007f7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f80:	d01c      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007f82:	e018      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007f84:	4b85      	ldr	r3, [pc, #532]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	4a84      	ldr	r2, [pc, #528]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f90:	e015      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3304      	adds	r3, #4
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 facb 	bl	8008534 <RCCEx_PLLSAI1_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fa2:	e00c      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3320      	adds	r3, #32
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fbb2 	bl	8008714 <RCCEx_PLLSAI2_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fb4:	e003      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8007fba:	e000      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fbe:	7cfb      	ldrb	r3, [r7, #19]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fc4:	4b75      	ldr	r3, [pc, #468]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fd2:	4972      	ldr	r1, [pc, #456]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007fda:	e001      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	7cfb      	ldrb	r3, [r7, #19]
 8007fde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d03f      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ff4:	d01c      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007ff6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ffa:	d802      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00e      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8008000:	e01f      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008006:	d003      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8008008:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800800c:	d01c      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800800e:	e018      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008010:	4b62      	ldr	r3, [pc, #392]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	4a61      	ldr	r2, [pc, #388]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800801a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800801c:	e015      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3304      	adds	r3, #4
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fa85 	bl	8008534 <RCCEx_PLLSAI1_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800802e:	e00c      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3320      	adds	r3, #32
 8008034:	2100      	movs	r1, #0
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fb6c 	bl	8008714 <RCCEx_PLLSAI2_Config>
 800803c:	4603      	mov	r3, r0
 800803e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008040:	e003      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	74fb      	strb	r3, [r7, #19]
      break;
 8008046:	e000      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800804a:	7cfb      	ldrb	r3, [r7, #19]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008050:	4b52      	ldr	r3, [pc, #328]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008056:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800805e:	494f      	ldr	r1, [pc, #316]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008066:	e001      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008068:	7cfb      	ldrb	r3, [r7, #19]
 800806a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 80a0 	beq.w	80081ba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800807a:	2300      	movs	r3, #0
 800807c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800807e:	4b47      	ldr	r3, [pc, #284]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800808e:	2300      	movs	r3, #0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00d      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008094:	4b41      	ldr	r3, [pc, #260]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008098:	4a40      	ldr	r2, [pc, #256]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800809a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809e:	6593      	str	r3, [r2, #88]	; 0x58
 80080a0:	4b3e      	ldr	r3, [pc, #248]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080ac:	2301      	movs	r3, #1
 80080ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080b0:	4b3b      	ldr	r3, [pc, #236]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a3a      	ldr	r2, [pc, #232]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80080b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080bc:	f7fe fd7c 	bl	8006bb8 <HAL_GetTick>
 80080c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080c2:	e009      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c4:	f7fe fd78 	bl	8006bb8 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d902      	bls.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	74fb      	strb	r3, [r7, #19]
        break;
 80080d6:	e005      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080d8:	4b31      	ldr	r3, [pc, #196]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0ef      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80080e4:	7cfb      	ldrb	r3, [r7, #19]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d15c      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080ea:	4b2c      	ldr	r3, [pc, #176]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01f      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	429a      	cmp	r2, r3
 8008106:	d019      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008108:	4b24      	ldr	r3, [pc, #144]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800810a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008112:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008114:	4b21      	ldr	r3, [pc, #132]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811a:	4a20      	ldr	r2, [pc, #128]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800811c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008124:	4b1d      	ldr	r3, [pc, #116]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800812a:	4a1c      	ldr	r2, [pc, #112]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800812c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008134:	4a19      	ldr	r2, [pc, #100]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d016      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008146:	f7fe fd37 	bl	8006bb8 <HAL_GetTick>
 800814a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800814c:	e00b      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800814e:	f7fe fd33 	bl	8006bb8 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f241 3288 	movw	r2, #5000	; 0x1388
 800815c:	4293      	cmp	r3, r2
 800815e:	d902      	bls.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	74fb      	strb	r3, [r7, #19]
            break;
 8008164:	e006      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008166:	4b0d      	ldr	r3, [pc, #52]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0ec      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8008174:	7cfb      	ldrb	r3, [r7, #19]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10c      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800817a:	4b08      	ldr	r3, [pc, #32]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818a:	4904      	ldr	r1, [pc, #16]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800818c:	4313      	orrs	r3, r2
 800818e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008192:	e009      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008194:	7cfb      	ldrb	r3, [r7, #19]
 8008196:	74bb      	strb	r3, [r7, #18]
 8008198:	e006      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800819a:	bf00      	nop
 800819c:	40021000 	.word	0x40021000
 80081a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a4:	7cfb      	ldrb	r3, [r7, #19]
 80081a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081a8:	7c7b      	ldrb	r3, [r7, #17]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d105      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081ae:	4ba6      	ldr	r3, [pc, #664]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b2:	4aa5      	ldr	r2, [pc, #660]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081c6:	4ba0      	ldr	r3, [pc, #640]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081cc:	f023 0203 	bic.w	r2, r3, #3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	499c      	ldr	r1, [pc, #624]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081e8:	4b97      	ldr	r3, [pc, #604]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ee:	f023 020c 	bic.w	r2, r3, #12
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	4994      	ldr	r1, [pc, #592]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800820a:	4b8f      	ldr	r3, [pc, #572]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800820c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008210:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	498b      	ldr	r1, [pc, #556]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800822c:	4b86      	ldr	r3, [pc, #536]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800822e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008232:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823a:	4983      	ldr	r1, [pc, #524]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800823c:	4313      	orrs	r3, r2
 800823e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800824e:	4b7e      	ldr	r3, [pc, #504]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800825c:	497a      	ldr	r1, [pc, #488]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0320 	and.w	r3, r3, #32
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008270:	4b75      	ldr	r3, [pc, #468]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008276:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827e:	4972      	ldr	r1, [pc, #456]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008292:	4b6d      	ldr	r3, [pc, #436]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008298:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a0:	4969      	ldr	r1, [pc, #420]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80082b4:	4b64      	ldr	r3, [pc, #400]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80082b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c2:	4961      	ldr	r1, [pc, #388]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082d6:	4b5c      	ldr	r3, [pc, #368]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80082d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e4:	4958      	ldr	r1, [pc, #352]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082f8:	4b53      	ldr	r3, [pc, #332]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80082fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	4950      	ldr	r1, [pc, #320]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008308:	4313      	orrs	r3, r2
 800830a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800831a:	4b4b      	ldr	r3, [pc, #300]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800831c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008328:	4947      	ldr	r1, [pc, #284]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800833c:	4b42      	ldr	r3, [pc, #264]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800833e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008342:	f023 0203 	bic.w	r2, r3, #3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834a:	493f      	ldr	r1, [pc, #252]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800834c:	4313      	orrs	r3, r2
 800834e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d028      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800835e:	4b3a      	ldr	r3, [pc, #232]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008364:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836c:	4936      	ldr	r1, [pc, #216]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800837c:	d106      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800837e:	4b32      	ldr	r3, [pc, #200]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	4a31      	ldr	r2, [pc, #196]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008388:	60d3      	str	r3, [r2, #12]
 800838a:	e011      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008394:	d10c      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3304      	adds	r3, #4
 800839a:	2101      	movs	r1, #1
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f8c9 	bl	8008534 <RCCEx_PLLSAI1_Config>
 80083a2:	4603      	mov	r3, r0
 80083a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80083a6:	7cfb      	ldrb	r3, [r7, #19]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80083ac:	7cfb      	ldrb	r3, [r7, #19]
 80083ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d028      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80083bc:	4b22      	ldr	r3, [pc, #136]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80083be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ca:	491f      	ldr	r1, [pc, #124]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083da:	d106      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083dc:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	4a19      	ldr	r2, [pc, #100]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80083e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e6:	60d3      	str	r3, [r2, #12]
 80083e8:	e011      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083f2:	d10c      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3304      	adds	r3, #4
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f89a 	bl	8008534 <RCCEx_PLLSAI1_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008404:	7cfb      	ldrb	r3, [r7, #19]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800840a:	7cfb      	ldrb	r3, [r7, #19]
 800840c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d02a      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800841c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008420:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008428:	4907      	ldr	r1, [pc, #28]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008438:	d108      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800843a:	4b03      	ldr	r3, [pc, #12]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	4a02      	ldr	r2, [pc, #8]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008444:	60d3      	str	r3, [r2, #12]
 8008446:	e013      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008448:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008454:	d10c      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3304      	adds	r3, #4
 800845a:	2101      	movs	r1, #1
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f869 	bl	8008534 <RCCEx_PLLSAI1_Config>
 8008462:	4603      	mov	r3, r0
 8008464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008466:	7cfb      	ldrb	r3, [r7, #19]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 800846c:	7cfb      	ldrb	r3, [r7, #19]
 800846e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d02f      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800847c:	4b2c      	ldr	r3, [pc, #176]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800847e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008482:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848a:	4929      	ldr	r1, [pc, #164]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800848c:	4313      	orrs	r3, r2
 800848e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800849a:	d10d      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3304      	adds	r3, #4
 80084a0:	2102      	movs	r1, #2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f846 	bl	8008534 <RCCEx_PLLSAI1_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084ac:	7cfb      	ldrb	r3, [r7, #19]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d014      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80084b2:	7cfb      	ldrb	r3, [r7, #19]
 80084b4:	74bb      	strb	r3, [r7, #18]
 80084b6:	e011      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084c0:	d10c      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3320      	adds	r3, #32
 80084c6:	2102      	movs	r1, #2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 f923 	bl	8008714 <RCCEx_PLLSAI2_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084d2:	7cfb      	ldrb	r3, [r7, #19]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80084d8:	7cfb      	ldrb	r3, [r7, #19]
 80084da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00b      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084e8:	4b11      	ldr	r3, [pc, #68]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80084ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084f8:	490d      	ldr	r1, [pc, #52]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800850c:	4b08      	ldr	r3, [pc, #32]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800851c:	4904      	ldr	r1, [pc, #16]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800851e:	4313      	orrs	r3, r2
 8008520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008524:	7cbb      	ldrb	r3, [r7, #18]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40021000 	.word	0x40021000

08008534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008542:	4b73      	ldr	r3, [pc, #460]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	f003 0303 	and.w	r3, r3, #3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d018      	beq.n	8008580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800854e:	4b70      	ldr	r3, [pc, #448]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0203 	and.w	r2, r3, #3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d10d      	bne.n	800857a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
       ||
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008566:	4b6a      	ldr	r3, [pc, #424]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	091b      	lsrs	r3, r3, #4
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
       ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d044      	beq.n	8008604 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	73fb      	strb	r3, [r7, #15]
 800857e:	e041      	b.n	8008604 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b02      	cmp	r3, #2
 8008586:	d00c      	beq.n	80085a2 <RCCEx_PLLSAI1_Config+0x6e>
 8008588:	2b03      	cmp	r3, #3
 800858a:	d013      	beq.n	80085b4 <RCCEx_PLLSAI1_Config+0x80>
 800858c:	2b01      	cmp	r3, #1
 800858e:	d120      	bne.n	80085d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008590:	4b5f      	ldr	r3, [pc, #380]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d11d      	bne.n	80085d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085a0:	e01a      	b.n	80085d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085a2:	4b5b      	ldr	r3, [pc, #364]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d116      	bne.n	80085dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085b2:	e013      	b.n	80085dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085b4:	4b56      	ldr	r3, [pc, #344]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10f      	bne.n	80085e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085c0:	4b53      	ldr	r3, [pc, #332]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d109      	bne.n	80085e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085d0:	e006      	b.n	80085e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]
      break;
 80085d6:	e004      	b.n	80085e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80085d8:	bf00      	nop
 80085da:	e002      	b.n	80085e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80085dc:	bf00      	nop
 80085de:	e000      	b.n	80085e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80085e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10d      	bne.n	8008604 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80085e8:	4b49      	ldr	r3, [pc, #292]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	430b      	orrs	r3, r1
 80085fe:	4944      	ldr	r1, [pc, #272]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008600:	4313      	orrs	r3, r2
 8008602:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d17c      	bne.n	8008704 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800860a:	4b41      	ldr	r3, [pc, #260]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a40      	ldr	r2, [pc, #256]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008610:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008616:	f7fe facf 	bl	8006bb8 <HAL_GetTick>
 800861a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800861c:	e009      	b.n	8008632 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800861e:	f7fe facb 	bl	8006bb8 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d902      	bls.n	8008632 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	73fb      	strb	r3, [r7, #15]
        break;
 8008630:	e005      	b.n	800863e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008632:	4b37      	ldr	r3, [pc, #220]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1ef      	bne.n	800861e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d15f      	bne.n	8008704 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d110      	bne.n	800866c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800864a:	4b31      	ldr	r3, [pc, #196]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008652:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6892      	ldr	r2, [r2, #8]
 800865a:	0211      	lsls	r1, r2, #8
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	68d2      	ldr	r2, [r2, #12]
 8008660:	06d2      	lsls	r2, r2, #27
 8008662:	430a      	orrs	r2, r1
 8008664:	492a      	ldr	r1, [pc, #168]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008666:	4313      	orrs	r3, r2
 8008668:	610b      	str	r3, [r1, #16]
 800866a:	e027      	b.n	80086bc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d112      	bne.n	8008698 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008672:	4b27      	ldr	r3, [pc, #156]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800867a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6892      	ldr	r2, [r2, #8]
 8008682:	0211      	lsls	r1, r2, #8
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6912      	ldr	r2, [r2, #16]
 8008688:	0852      	lsrs	r2, r2, #1
 800868a:	3a01      	subs	r2, #1
 800868c:	0552      	lsls	r2, r2, #21
 800868e:	430a      	orrs	r2, r1
 8008690:	491f      	ldr	r1, [pc, #124]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008692:	4313      	orrs	r3, r2
 8008694:	610b      	str	r3, [r1, #16]
 8008696:	e011      	b.n	80086bc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80086a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6892      	ldr	r2, [r2, #8]
 80086a8:	0211      	lsls	r1, r2, #8
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6952      	ldr	r2, [r2, #20]
 80086ae:	0852      	lsrs	r2, r2, #1
 80086b0:	3a01      	subs	r2, #1
 80086b2:	0652      	lsls	r2, r2, #25
 80086b4:	430a      	orrs	r2, r1
 80086b6:	4916      	ldr	r1, [pc, #88]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80086bc:	4b14      	ldr	r3, [pc, #80]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a13      	ldr	r2, [pc, #76]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c8:	f7fe fa76 	bl	8006bb8 <HAL_GetTick>
 80086cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086ce:	e009      	b.n	80086e4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086d0:	f7fe fa72 	bl	8006bb8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d902      	bls.n	80086e4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	73fb      	strb	r3, [r7, #15]
          break;
 80086e2:	e005      	b.n	80086f0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086e4:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0ef      	beq.n	80086d0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d106      	bne.n	8008704 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80086f6:	4b06      	ldr	r3, [pc, #24]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086f8:	691a      	ldr	r2, [r3, #16]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	4904      	ldr	r1, [pc, #16]	; (8008710 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008700:	4313      	orrs	r3, r2
 8008702:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40021000 	.word	0x40021000

08008714 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008722:	4b68      	ldr	r3, [pc, #416]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d018      	beq.n	8008760 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800872e:	4b65      	ldr	r3, [pc, #404]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 0203 	and.w	r2, r3, #3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d10d      	bne.n	800875a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
       ||
 8008742:	2b00      	cmp	r3, #0
 8008744:	d009      	beq.n	800875a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008746:	4b5f      	ldr	r3, [pc, #380]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	091b      	lsrs	r3, r3, #4
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
       ||
 8008756:	429a      	cmp	r2, r3
 8008758:	d044      	beq.n	80087e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	73fb      	strb	r3, [r7, #15]
 800875e:	e041      	b.n	80087e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d00c      	beq.n	8008782 <RCCEx_PLLSAI2_Config+0x6e>
 8008768:	2b03      	cmp	r3, #3
 800876a:	d013      	beq.n	8008794 <RCCEx_PLLSAI2_Config+0x80>
 800876c:	2b01      	cmp	r3, #1
 800876e:	d120      	bne.n	80087b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008770:	4b54      	ldr	r3, [pc, #336]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d11d      	bne.n	80087b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008780:	e01a      	b.n	80087b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008782:	4b50      	ldr	r3, [pc, #320]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800878a:	2b00      	cmp	r3, #0
 800878c:	d116      	bne.n	80087bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008792:	e013      	b.n	80087bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008794:	4b4b      	ldr	r3, [pc, #300]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10f      	bne.n	80087c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087a0:	4b48      	ldr	r3, [pc, #288]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d109      	bne.n	80087c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087b0:	e006      	b.n	80087c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
      break;
 80087b6:	e004      	b.n	80087c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80087b8:	bf00      	nop
 80087ba:	e002      	b.n	80087c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80087bc:	bf00      	nop
 80087be:	e000      	b.n	80087c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80087c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10d      	bne.n	80087e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80087c8:	4b3e      	ldr	r3, [pc, #248]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6819      	ldr	r1, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	3b01      	subs	r3, #1
 80087da:	011b      	lsls	r3, r3, #4
 80087dc:	430b      	orrs	r3, r1
 80087de:	4939      	ldr	r1, [pc, #228]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d166      	bne.n	80088b8 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80087ea:	4b36      	ldr	r3, [pc, #216]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a35      	ldr	r2, [pc, #212]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087f6:	f7fe f9df 	bl	8006bb8 <HAL_GetTick>
 80087fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80087fc:	e009      	b.n	8008812 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80087fe:	f7fe f9db 	bl	8006bb8 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d902      	bls.n	8008812 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	73fb      	strb	r3, [r7, #15]
        break;
 8008810:	e005      	b.n	800881e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008812:	4b2c      	ldr	r3, [pc, #176]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1ef      	bne.n	80087fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d149      	bne.n	80088b8 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d110      	bne.n	800884c <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800882a:	4b26      	ldr	r3, [pc, #152]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008832:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6892      	ldr	r2, [r2, #8]
 800883a:	0211      	lsls	r1, r2, #8
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68d2      	ldr	r2, [r2, #12]
 8008840:	06d2      	lsls	r2, r2, #27
 8008842:	430a      	orrs	r2, r1
 8008844:	491f      	ldr	r1, [pc, #124]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008846:	4313      	orrs	r3, r2
 8008848:	614b      	str	r3, [r1, #20]
 800884a:	e011      	b.n	8008870 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800884c:	4b1d      	ldr	r3, [pc, #116]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6892      	ldr	r2, [r2, #8]
 800885c:	0211      	lsls	r1, r2, #8
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6912      	ldr	r2, [r2, #16]
 8008862:	0852      	lsrs	r2, r2, #1
 8008864:	3a01      	subs	r2, #1
 8008866:	0652      	lsls	r2, r2, #25
 8008868:	430a      	orrs	r2, r1
 800886a:	4916      	ldr	r1, [pc, #88]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800886c:	4313      	orrs	r3, r2
 800886e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008870:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a13      	ldr	r2, [pc, #76]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800887a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800887c:	f7fe f99c 	bl	8006bb8 <HAL_GetTick>
 8008880:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008882:	e009      	b.n	8008898 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008884:	f7fe f998 	bl	8006bb8 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d902      	bls.n	8008898 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	73fb      	strb	r3, [r7, #15]
          break;
 8008896:	e005      	b.n	80088a4 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008898:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0ef      	beq.n	8008884 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80088aa:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088ac:	695a      	ldr	r2, [r3, #20]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	4904      	ldr	r1, [pc, #16]	; (80088c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40021000 	.word	0x40021000

080088c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d06c      	beq.n	80089b4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fd ff80 	bl	80067f4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	22ca      	movs	r2, #202	; 0xca
 8008902:	625a      	str	r2, [r3, #36]	; 0x24
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2253      	movs	r2, #83	; 0x53
 800890a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f87c 	bl	8008a0a <RTC_EnterInitMode>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d14b      	bne.n	80089b4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6812      	ldr	r2, [r2, #0]
 8008926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800892a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800892e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6899      	ldr	r1, [r3, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	431a      	orrs	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68d2      	ldr	r2, [r2, #12]
 8008956:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6919      	ldr	r1, [r3, #16]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	041a      	lsls	r2, r3, #16
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f87f 	bl	8008a70 <RTC_ExitInitMode>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d11b      	bne.n	80089b4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0203 	bic.w	r2, r2, #3
 800898a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	69da      	ldr	r2, [r3, #28]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	22ff      	movs	r2, #255	; 0xff
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68da      	ldr	r2, [r3, #12]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089d4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80089d6:	f7fe f8ef 	bl	8006bb8 <HAL_GetTick>
 80089da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089dc:	e009      	b.n	80089f2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089de:	f7fe f8eb 	bl	8006bb8 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089ec:	d901      	bls.n	80089f2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e007      	b.n	8008a02 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f003 0320 	and.w	r3, r3, #32
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0ee      	beq.n	80089de <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d120      	bne.n	8008a66 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008a2e:	f7fe f8c3 	bl	8006bb8 <HAL_GetTick>
 8008a32:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008a34:	e00d      	b.n	8008a52 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008a36:	f7fe f8bf 	bl	8006bb8 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a44:	d905      	bls.n	8008a52 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <RTC_EnterInitMode+0x5c>
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d1e7      	bne.n	8008a36 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <RTC_ExitInitMode+0x78>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <RTC_ExitInitMode+0x78>)
 8008a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a86:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008a88:	4b17      	ldr	r3, [pc, #92]	; (8008ae8 <RTC_ExitInitMode+0x78>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 0320 	and.w	r3, r3, #32
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10c      	bne.n	8008aae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff ff92 	bl	80089be <HAL_RTC_WaitForSynchro>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01e      	beq.n	8008ade <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	73fb      	strb	r3, [r7, #15]
 8008aac:	e017      	b.n	8008ade <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008aae:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <RTC_ExitInitMode+0x78>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	4a0d      	ldr	r2, [pc, #52]	; (8008ae8 <RTC_ExitInitMode+0x78>)
 8008ab4:	f023 0320 	bic.w	r3, r3, #32
 8008ab8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff ff7f 	bl	80089be <HAL_RTC_WaitForSynchro>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2203      	movs	r2, #3
 8008aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ad2:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <RTC_ExitInitMode+0x78>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	4a04      	ldr	r2, [pc, #16]	; (8008ae8 <RTC_ExitInitMode+0x78>)
 8008ad8:	f043 0320 	orr.w	r3, r3, #32
 8008adc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	40002800 	.word	0x40002800

08008aec <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d101      	bne.n	8008b02 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e04d      	b.n	8008b9e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	22ca      	movs	r2, #202	; 0xca
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2253      	movs	r2, #83	; 0x53
 8008b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b30:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b40:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008b42:	f7fe f839 	bl	8006bb8 <HAL_GetTick>
 8008b46:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008b48:	e015      	b.n	8008b76 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b4a:	f7fe f835 	bl	8006bb8 <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b58:	d90d      	bls.n	8008b76 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	22ff      	movs	r2, #255	; 0xff
 8008b60:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2203      	movs	r2, #3
 8008b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e013      	b.n	8008b9e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0e2      	beq.n	8008b4a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	22ff      	movs	r2, #255	; 0xff
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e07c      	b.n	8008cb2 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fd fe2a 	bl	800682c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bf8:	d902      	bls.n	8008c00 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e002      	b.n	8008c06 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008c0e:	d007      	beq.n	8008c20 <HAL_SPI_Init+0x7a>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c18:	d002      	beq.n	8008c20 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10b      	bne.n	8008c40 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c30:	d903      	bls.n	8008c3a <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	631a      	str	r2, [r3, #48]	; 0x30
 8008c38:	e002      	b.n	8008c40 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	431a      	orrs	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	ea42 0103 	orr.w	r1, r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	0c1b      	lsrs	r3, r3, #16
 8008c80:	f003 0204 	and.w	r2, r3, #4
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	ea42 0103 	orr.w	r1, r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b088      	sub	sp, #32
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	603b      	str	r3, [r7, #0]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_SPI_Transmit+0x22>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e150      	b.n	8008f7e <HAL_SPI_Transmit+0x2c4>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ce4:	f7fd ff68 	bl	8006bb8 <HAL_GetTick>
 8008ce8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008cea:	88fb      	ldrh	r3, [r7, #6]
 8008cec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d002      	beq.n	8008d00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cfe:	e135      	b.n	8008f6c <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <HAL_SPI_Transmit+0x52>
 8008d06:	88fb      	ldrh	r3, [r7, #6]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d102      	bne.n	8008d12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d10:	e12c      	b.n	8008f6c <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2203      	movs	r2, #3
 8008d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	88fa      	ldrh	r2, [r7, #6]
 8008d2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	88fa      	ldrh	r2, [r7, #6]
 8008d30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d5c:	d107      	bne.n	8008d6e <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d78:	2b40      	cmp	r3, #64	; 0x40
 8008d7a:	d007      	beq.n	8008d8c <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d94:	d94b      	bls.n	8008e2e <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <HAL_SPI_Transmit+0xea>
 8008d9e:	8afb      	ldrh	r3, [r7, #22]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d13e      	bne.n	8008e22 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	881a      	ldrh	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	1c9a      	adds	r2, r3, #2
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008dc8:	e02b      	b.n	8008e22 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d112      	bne.n	8008dfe <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	1c9a      	adds	r2, r3, #2
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dfc:	e011      	b.n	8008e22 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dfe:	f7fd fedb 	bl	8006bb8 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d803      	bhi.n	8008e16 <HAL_SPI_Transmit+0x15c>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d102      	bne.n	8008e1c <HAL_SPI_Transmit+0x162>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e20:	e0a4      	b.n	8008f6c <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1ce      	bne.n	8008dca <HAL_SPI_Transmit+0x110>
 8008e2c:	e07c      	b.n	8008f28 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <HAL_SPI_Transmit+0x182>
 8008e36:	8afb      	ldrh	r3, [r7, #22]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d170      	bne.n	8008f1e <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d912      	bls.n	8008e6c <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4a:	881a      	ldrh	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	1c9a      	adds	r2, r3, #2
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b02      	subs	r3, #2
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e6a:	e058      	b.n	8008f1e <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	330c      	adds	r3, #12
 8008e76:	7812      	ldrb	r2, [r2, #0]
 8008e78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008e92:	e044      	b.n	8008f1e <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d12b      	bne.n	8008efa <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d912      	bls.n	8008ed2 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb0:	881a      	ldrh	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	1c9a      	adds	r2, r3, #2
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	3b02      	subs	r3, #2
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ed0:	e025      	b.n	8008f1e <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	330c      	adds	r3, #12
 8008edc:	7812      	ldrb	r2, [r2, #0]
 8008ede:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ef8:	e011      	b.n	8008f1e <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008efa:	f7fd fe5d 	bl	8006bb8 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d803      	bhi.n	8008f12 <HAL_SPI_Transmit+0x258>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d102      	bne.n	8008f18 <HAL_SPI_Transmit+0x25e>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d102      	bne.n	8008f1e <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f1c:	e026      	b.n	8008f6c <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1b5      	bne.n	8008e94 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 fc94 	bl	800985a <SPI_EndRxTxTransaction>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f46:	2300      	movs	r3, #0
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	613b      	str	r3, [r7, #16]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	613b      	str	r3, [r7, #16]
 8008f5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	77fb      	strb	r3, [r7, #31]
 8008f68:	e000      	b.n	8008f6c <HAL_SPI_Transmit+0x2b2>
  }

error:
 8008f6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b088      	sub	sp, #32
 8008f8a:	af02      	add	r7, sp, #8
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	4613      	mov	r3, r2
 8008f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fa2:	d112      	bne.n	8008fca <HAL_SPI_Receive+0x44>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10e      	bne.n	8008fca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2204      	movs	r2, #4
 8008fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	68b9      	ldr	r1, [r7, #8]
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 f908 	bl	80091d6 <HAL_SPI_TransmitReceive>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	e101      	b.n	80091ce <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d101      	bne.n	8008fd8 <HAL_SPI_Receive+0x52>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	e0fa      	b.n	80091ce <HAL_SPI_Receive+0x248>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fe0:	f7fd fdea 	bl	8006bb8 <HAL_GetTick>
 8008fe4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d002      	beq.n	8008ff8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ff6:	e0e1      	b.n	80091bc <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <HAL_SPI_Receive+0x7e>
 8008ffe:	88fb      	ldrh	r3, [r7, #6]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009008:	e0d8      	b.n	80091bc <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2204      	movs	r2, #4
 800900e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	88fa      	ldrh	r2, [r7, #6]
 8009022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	88fa      	ldrh	r2, [r7, #6]
 800902a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009054:	d908      	bls.n	8009068 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009064:	605a      	str	r2, [r3, #4]
 8009066:	e007      	b.n	8009078 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009076:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009080:	d107      	bne.n	8009092 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009090:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909c:	2b40      	cmp	r3, #64	; 0x40
 800909e:	d007      	beq.n	80090b0 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090b8:	d867      	bhi.n	800918a <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80090ba:	e030      	b.n	800911e <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d117      	bne.n	80090fa <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f103 020c 	add.w	r2, r3, #12
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	7812      	ldrb	r2, [r2, #0]
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80090f8:	e011      	b.n	800911e <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090fa:	f7fd fd5d 	bl	8006bb8 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d803      	bhi.n	8009112 <HAL_SPI_Receive+0x18c>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009110:	d102      	bne.n	8009118 <HAL_SPI_Receive+0x192>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800911c:	e04e      	b.n	80091bc <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1c8      	bne.n	80090bc <HAL_SPI_Receive+0x136>
 800912a:	e034      	b.n	8009196 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b01      	cmp	r3, #1
 8009138:	d115      	bne.n	8009166 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009144:	b292      	uxth	r2, r2
 8009146:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	1c9a      	adds	r2, r3, #2
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009164:	e011      	b.n	800918a <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009166:	f7fd fd27 	bl	8006bb8 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d803      	bhi.n	800917e <HAL_SPI_Receive+0x1f8>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d102      	bne.n	8009184 <HAL_SPI_Receive+0x1fe>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009188:	e018      	b.n	80091bc <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1ca      	bne.n	800912c <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 fb05 	bl	80097aa <SPI_EndRxTransaction>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2220      	movs	r2, #32
 80091aa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	75fb      	strb	r3, [r7, #23]
 80091b8:	e000      	b.n	80091bc <HAL_SPI_Receive+0x236>
  }

error :
 80091ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b08a      	sub	sp, #40	; 0x28
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	607a      	str	r2, [r7, #4]
 80091e2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091e4:	2301      	movs	r3, #1
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d101      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x26>
 80091f8:	2302      	movs	r3, #2
 80091fa:	e1fb      	b.n	80095f4 <HAL_SPI_TransmitReceive+0x41e>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009204:	f7fd fcd8 	bl	8006bb8 <HAL_GetTick>
 8009208:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009210:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009218:	887b      	ldrh	r3, [r7, #2]
 800921a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800921c:	887b      	ldrh	r3, [r7, #2]
 800921e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009220:	7efb      	ldrb	r3, [r7, #27]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d00e      	beq.n	8009244 <HAL_SPI_TransmitReceive+0x6e>
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800922c:	d106      	bne.n	800923c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d102      	bne.n	800923c <HAL_SPI_TransmitReceive+0x66>
 8009236:	7efb      	ldrb	r3, [r7, #27]
 8009238:	2b04      	cmp	r3, #4
 800923a:	d003      	beq.n	8009244 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800923c:	2302      	movs	r3, #2
 800923e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009242:	e1cd      	b.n	80095e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d005      	beq.n	8009256 <HAL_SPI_TransmitReceive+0x80>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <HAL_SPI_TransmitReceive+0x80>
 8009250:	887b      	ldrh	r3, [r7, #2]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d103      	bne.n	800925e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800925c:	e1c0      	b.n	80095e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b04      	cmp	r3, #4
 8009268:	d003      	beq.n	8009272 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2205      	movs	r2, #5
 800926e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	887a      	ldrh	r2, [r7, #2]
 8009282:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	887a      	ldrh	r2, [r7, #2]
 800928a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	887a      	ldrh	r2, [r7, #2]
 8009298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	887a      	ldrh	r2, [r7, #2]
 800929e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092b4:	d802      	bhi.n	80092bc <HAL_SPI_TransmitReceive+0xe6>
 80092b6:	8a3b      	ldrh	r3, [r7, #16]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d908      	bls.n	80092ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092ca:	605a      	str	r2, [r3, #4]
 80092cc:	e007      	b.n	80092de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b40      	cmp	r3, #64	; 0x40
 80092ea:	d007      	beq.n	80092fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009304:	d97c      	bls.n	8009400 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <HAL_SPI_TransmitReceive+0x13e>
 800930e:	8a7b      	ldrh	r3, [r7, #18]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d169      	bne.n	80093e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	881a      	ldrh	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	1c9a      	adds	r2, r3, #2
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009338:	e056      	b.n	80093e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b02      	cmp	r3, #2
 8009346:	d11b      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x1aa>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800934c:	b29b      	uxth	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d016      	beq.n	8009380 <HAL_SPI_TransmitReceive+0x1aa>
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	2b01      	cmp	r3, #1
 8009356:	d113      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	881a      	ldrh	r2, [r3, #0]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	1c9a      	adds	r2, r3, #2
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b01      	cmp	r3, #1
 800938c:	d11c      	bne.n	80093c8 <HAL_SPI_TransmitReceive+0x1f2>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d016      	beq.n	80093c8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	b292      	uxth	r2, r2
 80093a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ac:	1c9a      	adds	r2, r3, #2
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093c4:	2301      	movs	r3, #1
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093c8:	f7fd fbf6 	bl	8006bb8 <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d807      	bhi.n	80093e8 <HAL_SPI_TransmitReceive+0x212>
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093de:	d003      	beq.n	80093e8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80093e6:	e0fb      	b.n	80095e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1a3      	bne.n	800933a <HAL_SPI_TransmitReceive+0x164>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d19d      	bne.n	800933a <HAL_SPI_TransmitReceive+0x164>
 80093fe:	e0df      	b.n	80095c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <HAL_SPI_TransmitReceive+0x23a>
 8009408:	8a7b      	ldrh	r3, [r7, #18]
 800940a:	2b01      	cmp	r3, #1
 800940c:	f040 80cb 	bne.w	80095a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b01      	cmp	r3, #1
 8009418:	d912      	bls.n	8009440 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	881a      	ldrh	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	1c9a      	adds	r2, r3, #2
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b02      	subs	r3, #2
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800943e:	e0b2      	b.n	80095a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	7812      	ldrb	r2, [r2, #0]
 800944c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009466:	e09e      	b.n	80095a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b02      	cmp	r3, #2
 8009474:	d134      	bne.n	80094e0 <HAL_SPI_TransmitReceive+0x30a>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947a:	b29b      	uxth	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	d02f      	beq.n	80094e0 <HAL_SPI_TransmitReceive+0x30a>
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	2b01      	cmp	r3, #1
 8009484:	d12c      	bne.n	80094e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800948a:	b29b      	uxth	r3, r3
 800948c:	2b01      	cmp	r3, #1
 800948e:	d912      	bls.n	80094b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	881a      	ldrh	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a0:	1c9a      	adds	r2, r3, #2
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	3b02      	subs	r3, #2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094b4:	e012      	b.n	80094dc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	330c      	adds	r3, #12
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	3b01      	subs	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d148      	bne.n	8009580 <HAL_SPI_TransmitReceive+0x3aa>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d042      	beq.n	8009580 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b01      	cmp	r3, #1
 8009504:	d923      	bls.n	800954e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68da      	ldr	r2, [r3, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	b292      	uxth	r2, r2
 8009512:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	1c9a      	adds	r2, r3, #2
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b02      	subs	r3, #2
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009536:	b29b      	uxth	r3, r3
 8009538:	2b01      	cmp	r3, #1
 800953a:	d81f      	bhi.n	800957c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800954a:	605a      	str	r2, [r3, #4]
 800954c:	e016      	b.n	800957c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f103 020c 	add.w	r2, r3, #12
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	7812      	ldrb	r2, [r2, #0]
 800955c:	b2d2      	uxtb	r2, r2
 800955e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800957c:	2301      	movs	r3, #1
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009580:	f7fd fb1a 	bl	8006bb8 <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958c:	429a      	cmp	r2, r3
 800958e:	d803      	bhi.n	8009598 <HAL_SPI_TransmitReceive+0x3c2>
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009596:	d102      	bne.n	800959e <HAL_SPI_TransmitReceive+0x3c8>
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	2b00      	cmp	r3, #0
 800959c:	d103      	bne.n	80095a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80095a4:	e01c      	b.n	80095e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f47f af5b 	bne.w	8009468 <HAL_SPI_TransmitReceive+0x292>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f47f af54 	bne.w	8009468 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f948 	bl	800985a <SPI_EndRxTxTransaction>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d006      	beq.n	80095de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2220      	movs	r2, #32
 80095da:	661a      	str	r2, [r3, #96]	; 0x60
 80095dc:	e000      	b.n	80095e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80095de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80095f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3728      	adds	r7, #40	; 0x28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	603b      	str	r3, [r7, #0]
 8009608:	4613      	mov	r3, r2
 800960a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800960c:	e04c      	b.n	80096a8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d048      	beq.n	80096a8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009616:	f7fd facf 	bl	8006bb8 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d902      	bls.n	800962c <SPI_WaitFlagStateUntilTimeout+0x30>
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d13d      	bne.n	80096a8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800963a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009644:	d111      	bne.n	800966a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800964e:	d004      	beq.n	800965a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009658:	d107      	bne.n	800966a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009672:	d10f      	bne.n	8009694 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e00f      	b.n	80096c8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689a      	ldr	r2, [r3, #8]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	4013      	ands	r3, r2
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	bf0c      	ite	eq
 80096b8:	2301      	moveq	r3, #1
 80096ba:	2300      	movne	r3, #0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	461a      	mov	r2, r3
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d1a3      	bne.n	800960e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80096de:	e057      	b.n	8009790 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096e6:	d106      	bne.n	80096f6 <SPI_WaitFifoStateUntilTimeout+0x26>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d103      	bne.n	80096f6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	330c      	adds	r3, #12
 80096f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fc:	d048      	beq.n	8009790 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80096fe:	f7fd fa5b 	bl	8006bb8 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	429a      	cmp	r2, r3
 800970c:	d902      	bls.n	8009714 <SPI_WaitFifoStateUntilTimeout+0x44>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d13d      	bne.n	8009790 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009722:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800972c:	d111      	bne.n	8009752 <SPI_WaitFifoStateUntilTimeout+0x82>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009736:	d004      	beq.n	8009742 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009740:	d107      	bne.n	8009752 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009750:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800975a:	d10f      	bne.n	800977c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800977a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e008      	b.n	80097a2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689a      	ldr	r2, [r3, #8]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	4013      	ands	r3, r2
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	429a      	cmp	r2, r3
 800979e:	d19f      	bne.n	80096e0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b086      	sub	sp, #24
 80097ae:	af02      	add	r7, sp, #8
 80097b0:	60f8      	str	r0, [r7, #12]
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097be:	d111      	bne.n	80097e4 <SPI_EndRxTransaction+0x3a>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c8:	d004      	beq.n	80097d4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097d2:	d107      	bne.n	80097e4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097e2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2200      	movs	r2, #0
 80097ec:	2180      	movs	r1, #128	; 0x80
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff ff04 	bl	80095fc <SPI_WaitFlagStateUntilTimeout>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097fe:	f043 0220 	orr.w	r2, r3, #32
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e023      	b.n	8009852 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009812:	d11d      	bne.n	8009850 <SPI_EndRxTransaction+0xa6>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800981c:	d004      	beq.n	8009828 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009826:	d113      	bne.n	8009850 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2200      	movs	r2, #0
 8009830:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff ff4b 	bl	80096d0 <SPI_WaitFifoStateUntilTimeout>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009844:	f043 0220 	orr.w	r2, r3, #32
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e000      	b.n	8009852 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af02      	add	r7, sp, #8
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2200      	movs	r2, #0
 800986e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7ff ff2c 	bl	80096d0 <SPI_WaitFifoStateUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009882:	f043 0220 	orr.w	r2, r3, #32
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e027      	b.n	80098de <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2200      	movs	r2, #0
 8009896:	2180      	movs	r1, #128	; 0x80
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f7ff feaf 	bl	80095fc <SPI_WaitFlagStateUntilTimeout>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d007      	beq.n	80098b4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a8:	f043 0220 	orr.w	r2, r3, #32
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e014      	b.n	80098de <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff ff05 	bl	80096d0 <SPI_WaitFifoStateUntilTimeout>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d007      	beq.n	80098dc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d0:	f043 0220 	orr.w	r2, r3, #32
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e000      	b.n	80098de <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e040      	b.n	800997a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d106      	bne.n	800990e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7fc ffd1 	bl	80068b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2224      	movs	r2, #36	; 0x24
 8009912:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 0201 	bic.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fabb 	bl	8009ea0 <UART_SetConfig>
 800992a:	4603      	mov	r3, r0
 800992c:	2b01      	cmp	r3, #1
 800992e:	d101      	bne.n	8009934 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e022      	b.n	800997a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fe21 	bl	800a584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009950:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009960:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f042 0201 	orr.w	r2, r2, #1
 8009970:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fea8 	bl	800a6c8 <UART_CheckIdleState>
 8009978:	4603      	mov	r3, r0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b08a      	sub	sp, #40	; 0x28
 8009986:	af02      	add	r7, sp, #8
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	603b      	str	r3, [r7, #0]
 800998e:	4613      	mov	r3, r2
 8009990:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009996:	2b20      	cmp	r3, #32
 8009998:	f040 8081 	bne.w	8009a9e <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <HAL_UART_Transmit+0x26>
 80099a2:	88fb      	ldrh	r3, [r7, #6]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e079      	b.n	8009aa0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <HAL_UART_Transmit+0x38>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e072      	b.n	8009aa0 <HAL_UART_Transmit+0x11e>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2221      	movs	r2, #33	; 0x21
 80099cc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80099ce:	f7fd f8f3 	bl	8006bb8 <HAL_GetTick>
 80099d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	88fa      	ldrh	r2, [r7, #6]
 80099d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	88fa      	ldrh	r2, [r7, #6]
 80099e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ec:	d108      	bne.n	8009a00 <HAL_UART_Transmit+0x7e>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d104      	bne.n	8009a00 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	e003      	b.n	8009a08 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009a10:	e02d      	b.n	8009a6e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2180      	movs	r1, #128	; 0x80
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fe98 	bl	800a752 <UART_WaitOnFlagUntilTimeout>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e039      	b.n	8009aa0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	881a      	ldrh	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a3e:	b292      	uxth	r2, r2
 8009a40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	3302      	adds	r3, #2
 8009a46:	61bb      	str	r3, [r7, #24]
 8009a48:	e008      	b.n	8009a5c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	781a      	ldrb	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	b292      	uxth	r2, r2
 8009a54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1cb      	bne.n	8009a12 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2200      	movs	r2, #0
 8009a82:	2140      	movs	r1, #64	; 0x40
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 fe64 	bl	800a752 <UART_WaitOnFlagUntilTimeout>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e005      	b.n	8009aa0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2220      	movs	r2, #32
 8009a98:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e000      	b.n	8009aa0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009a9e:	2302      	movs	r3, #2
  }
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3720      	adds	r7, #32
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	f040 808a 	bne.w	8009bd4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <HAL_UART_Receive_IT+0x24>
 8009ac6:	88fb      	ldrh	r3, [r7, #6]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e082      	b.n	8009bd6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_UART_Receive_IT+0x36>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e07b      	b.n	8009bd6 <HAL_UART_Receive_IT+0x12e>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	88fa      	ldrh	r2, [r7, #6]
 8009af0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	88fa      	ldrh	r2, [r7, #6]
 8009af8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0a:	d10e      	bne.n	8009b2a <HAL_UART_Receive_IT+0x82>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <HAL_UART_Receive_IT+0x78>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b1e:	e02d      	b.n	8009b7c <HAL_UART_Receive_IT+0xd4>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	22ff      	movs	r2, #255	; 0xff
 8009b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b28:	e028      	b.n	8009b7c <HAL_UART_Receive_IT+0xd4>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10d      	bne.n	8009b4e <HAL_UART_Receive_IT+0xa6>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <HAL_UART_Receive_IT+0x9c>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	22ff      	movs	r2, #255	; 0xff
 8009b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b42:	e01b      	b.n	8009b7c <HAL_UART_Receive_IT+0xd4>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	227f      	movs	r2, #127	; 0x7f
 8009b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b4c:	e016      	b.n	8009b7c <HAL_UART_Receive_IT+0xd4>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b56:	d10d      	bne.n	8009b74 <HAL_UART_Receive_IT+0xcc>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <HAL_UART_Receive_IT+0xc2>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	227f      	movs	r2, #127	; 0x7f
 8009b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b68:	e008      	b.n	8009b7c <HAL_UART_Receive_IT+0xd4>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	223f      	movs	r2, #63	; 0x3f
 8009b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b72:	e003      	b.n	8009b7c <HAL_UART_Receive_IT+0xd4>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2222      	movs	r2, #34	; 0x22
 8009b86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	689a      	ldr	r2, [r3, #8]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba0:	d107      	bne.n	8009bb2 <HAL_UART_Receive_IT+0x10a>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d103      	bne.n	8009bb2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <HAL_UART_Receive_IT+0x13c>)
 8009bae:	661a      	str	r2, [r3, #96]	; 0x60
 8009bb0:	e002      	b.n	8009bb8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4a0c      	ldr	r2, [pc, #48]	; (8009be8 <HAL_UART_Receive_IT+0x140>)
 8009bb6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009bce:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e000      	b.n	8009bd6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8009bd4:	2302      	movs	r3, #2
  }
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	0800a991 	.word	0x0800a991
 8009be8:	0800a8e7 	.word	0x0800a8e7

08009bec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c12:	4013      	ands	r3, r2
 8009c14:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d113      	bne.n	8009c44 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00e      	beq.n	8009c44 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	f003 0320 	and.w	r3, r3, #32
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d009      	beq.n	8009c44 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8114 	beq.w	8009e62 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	4798      	blx	r3
      }
      return;
 8009c42:	e10e      	b.n	8009e62 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80d6 	beq.w	8009df8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d105      	bne.n	8009c62 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 80cb 	beq.w	8009df8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	f003 0301 	and.w	r3, r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00e      	beq.n	8009c8a <HAL_UART_IRQHandler+0x9e>
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d009      	beq.n	8009c8a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c82:	f043 0201 	orr.w	r2, r3, #1
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00e      	beq.n	8009cb2 <HAL_UART_IRQHandler+0xc6>
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009caa:	f043 0204 	orr.w	r2, r3, #4
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00e      	beq.n	8009cda <HAL_UART_IRQHandler+0xee>
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2204      	movs	r2, #4
 8009ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cd2:	f043 0202 	orr.w	r2, r3, #2
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	f003 0308 	and.w	r3, r3, #8
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d013      	beq.n	8009d0c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d009      	beq.n	8009d0c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d04:	f043 0208 	orr.w	r2, r3, #8
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00f      	beq.n	8009d36 <HAL_UART_IRQHandler+0x14a>
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00a      	beq.n	8009d36 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d2e:	f043 0220 	orr.w	r2, r3, #32
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8093 	beq.w	8009e66 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00c      	beq.n	8009d64 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d007      	beq.n	8009d64 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d68:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d74:	2b40      	cmp	r3, #64	; 0x40
 8009d76:	d004      	beq.n	8009d82 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d031      	beq.n	8009de6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fd60 	bl	800a848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b40      	cmp	r3, #64	; 0x40
 8009d94:	d123      	bne.n	8009dde <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009da4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d013      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db2:	4a30      	ldr	r2, [pc, #192]	; (8009e74 <HAL_UART_IRQHandler+0x288>)
 8009db4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fd f819 	bl	8006df2 <HAL_DMA_Abort_IT>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d016      	beq.n	8009df4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd4:	e00e      	b.n	8009df4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f858 	bl	8009e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ddc:	e00a      	b.n	8009df4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f854 	bl	8009e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de4:	e006      	b.n	8009df4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f850 	bl	8009e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009df2:	e038      	b.n	8009e66 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df4:	bf00      	nop
    return;
 8009df6:	e036      	b.n	8009e66 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00d      	beq.n	8009e1e <HAL_UART_IRQHandler+0x232>
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d008      	beq.n	8009e1e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fe0f 	bl	800aa3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e1c:	e026      	b.n	8009e6c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00d      	beq.n	8009e44 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d008      	beq.n	8009e44 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d017      	beq.n	8009e6a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	4798      	blx	r3
    }
    return;
 8009e42:	e012      	b.n	8009e6a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00e      	beq.n	8009e6c <HAL_UART_IRQHandler+0x280>
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d009      	beq.n	8009e6c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fd2b 	bl	800a8b4 <UART_EndTransmit_IT>
    return;
 8009e5e:	bf00      	nop
 8009e60:	e004      	b.n	8009e6c <HAL_UART_IRQHandler+0x280>
      return;
 8009e62:	bf00      	nop
 8009e64:	e002      	b.n	8009e6c <HAL_UART_IRQHandler+0x280>
    return;
 8009e66:	bf00      	nop
 8009e68:	e000      	b.n	8009e6c <HAL_UART_IRQHandler+0x280>
    return;
 8009e6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009e6c:	3720      	adds	r7, #32
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	0800a889 	.word	0x0800a889

08009e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ea0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009ea4:	b08a      	sub	sp, #40	; 0x28
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4bb8      	ldr	r3, [pc, #736]	; (800a1b8 <UART_SetConfig+0x318>)
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ede:	430b      	orrs	r3, r1
 8009ee0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4aae      	ldr	r2, [pc, #696]	; (800a1bc <UART_SetConfig+0x31c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d004      	beq.n	8009f12 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f22:	430a      	orrs	r2, r1
 8009f24:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4aa5      	ldr	r2, [pc, #660]	; (800a1c0 <UART_SetConfig+0x320>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d126      	bne.n	8009f7e <UART_SetConfig+0xde>
 8009f30:	4ba4      	ldr	r3, [pc, #656]	; (800a1c4 <UART_SetConfig+0x324>)
 8009f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d81a      	bhi.n	8009f74 <UART_SetConfig+0xd4>
 8009f3e:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <UART_SetConfig+0xa4>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f5d 	.word	0x08009f5d
 8009f50:	08009f6d 	.word	0x08009f6d
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f5a:	e105      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f62:	e101      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009f64:	2304      	movs	r3, #4
 8009f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f6a:	e0fd      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f72:	e0f9      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009f74:	2310      	movs	r3, #16
 8009f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f7a:	bf00      	nop
 8009f7c:	e0f4      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a91      	ldr	r2, [pc, #580]	; (800a1c8 <UART_SetConfig+0x328>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d138      	bne.n	8009ffa <UART_SetConfig+0x15a>
 8009f88:	4b8e      	ldr	r3, [pc, #568]	; (800a1c4 <UART_SetConfig+0x324>)
 8009f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f8e:	f003 030c 	and.w	r3, r3, #12
 8009f92:	2b0c      	cmp	r3, #12
 8009f94:	d82c      	bhi.n	8009ff0 <UART_SetConfig+0x150>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <UART_SetConfig+0xfc>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fd1 	.word	0x08009fd1
 8009fa0:	08009ff1 	.word	0x08009ff1
 8009fa4:	08009ff1 	.word	0x08009ff1
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	08009fe1 	.word	0x08009fe1
 8009fb0:	08009ff1 	.word	0x08009ff1
 8009fb4:	08009ff1 	.word	0x08009ff1
 8009fb8:	08009ff1 	.word	0x08009ff1
 8009fbc:	08009fd9 	.word	0x08009fd9
 8009fc0:	08009ff1 	.word	0x08009ff1
 8009fc4:	08009ff1 	.word	0x08009ff1
 8009fc8:	08009ff1 	.word	0x08009ff1
 8009fcc:	08009fe9 	.word	0x08009fe9
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fd6:	e0c7      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fde:	e0c3      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fe6:	e0bf      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fee:	e0bb      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ff6:	bf00      	nop
 8009ff8:	e0b6      	b.n	800a168 <UART_SetConfig+0x2c8>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a73      	ldr	r2, [pc, #460]	; (800a1cc <UART_SetConfig+0x32c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d125      	bne.n	800a050 <UART_SetConfig+0x1b0>
 800a004:	4b6f      	ldr	r3, [pc, #444]	; (800a1c4 <UART_SetConfig+0x324>)
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a00e:	2b10      	cmp	r3, #16
 800a010:	d011      	beq.n	800a036 <UART_SetConfig+0x196>
 800a012:	2b10      	cmp	r3, #16
 800a014:	d802      	bhi.n	800a01c <UART_SetConfig+0x17c>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <UART_SetConfig+0x186>
 800a01a:	e014      	b.n	800a046 <UART_SetConfig+0x1a6>
 800a01c:	2b20      	cmp	r3, #32
 800a01e:	d006      	beq.n	800a02e <UART_SetConfig+0x18e>
 800a020:	2b30      	cmp	r3, #48	; 0x30
 800a022:	d00c      	beq.n	800a03e <UART_SetConfig+0x19e>
 800a024:	e00f      	b.n	800a046 <UART_SetConfig+0x1a6>
 800a026:	2300      	movs	r3, #0
 800a028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a02c:	e09c      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a02e:	2302      	movs	r3, #2
 800a030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a034:	e098      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a036:	2304      	movs	r3, #4
 800a038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a03c:	e094      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a03e:	2308      	movs	r3, #8
 800a040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a044:	e090      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a046:	2310      	movs	r3, #16
 800a048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a04c:	bf00      	nop
 800a04e:	e08b      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a5e      	ldr	r2, [pc, #376]	; (800a1d0 <UART_SetConfig+0x330>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d125      	bne.n	800a0a6 <UART_SetConfig+0x206>
 800a05a:	4b5a      	ldr	r3, [pc, #360]	; (800a1c4 <UART_SetConfig+0x324>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a064:	2b40      	cmp	r3, #64	; 0x40
 800a066:	d011      	beq.n	800a08c <UART_SetConfig+0x1ec>
 800a068:	2b40      	cmp	r3, #64	; 0x40
 800a06a:	d802      	bhi.n	800a072 <UART_SetConfig+0x1d2>
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <UART_SetConfig+0x1dc>
 800a070:	e014      	b.n	800a09c <UART_SetConfig+0x1fc>
 800a072:	2b80      	cmp	r3, #128	; 0x80
 800a074:	d006      	beq.n	800a084 <UART_SetConfig+0x1e4>
 800a076:	2bc0      	cmp	r3, #192	; 0xc0
 800a078:	d00c      	beq.n	800a094 <UART_SetConfig+0x1f4>
 800a07a:	e00f      	b.n	800a09c <UART_SetConfig+0x1fc>
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a082:	e071      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a084:	2302      	movs	r3, #2
 800a086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a08a:	e06d      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a08c:	2304      	movs	r3, #4
 800a08e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a092:	e069      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a094:	2308      	movs	r3, #8
 800a096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a09a:	e065      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a09c:	2310      	movs	r3, #16
 800a09e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0a2:	bf00      	nop
 800a0a4:	e060      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a4a      	ldr	r2, [pc, #296]	; (800a1d4 <UART_SetConfig+0x334>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d129      	bne.n	800a104 <UART_SetConfig+0x264>
 800a0b0:	4b44      	ldr	r3, [pc, #272]	; (800a1c4 <UART_SetConfig+0x324>)
 800a0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0be:	d014      	beq.n	800a0ea <UART_SetConfig+0x24a>
 800a0c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c4:	d802      	bhi.n	800a0cc <UART_SetConfig+0x22c>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d007      	beq.n	800a0da <UART_SetConfig+0x23a>
 800a0ca:	e016      	b.n	800a0fa <UART_SetConfig+0x25a>
 800a0cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0d0:	d007      	beq.n	800a0e2 <UART_SetConfig+0x242>
 800a0d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0d6:	d00c      	beq.n	800a0f2 <UART_SetConfig+0x252>
 800a0d8:	e00f      	b.n	800a0fa <UART_SetConfig+0x25a>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0e0:	e042      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0e8:	e03e      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a0ea:	2304      	movs	r3, #4
 800a0ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0f0:	e03a      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a0f2:	2308      	movs	r3, #8
 800a0f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0f8:	e036      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a0fa:	2310      	movs	r3, #16
 800a0fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a100:	bf00      	nop
 800a102:	e031      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a2c      	ldr	r2, [pc, #176]	; (800a1bc <UART_SetConfig+0x31c>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d129      	bne.n	800a162 <UART_SetConfig+0x2c2>
 800a10e:	4b2d      	ldr	r3, [pc, #180]	; (800a1c4 <UART_SetConfig+0x324>)
 800a110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a11c:	d014      	beq.n	800a148 <UART_SetConfig+0x2a8>
 800a11e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a122:	d802      	bhi.n	800a12a <UART_SetConfig+0x28a>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d007      	beq.n	800a138 <UART_SetConfig+0x298>
 800a128:	e016      	b.n	800a158 <UART_SetConfig+0x2b8>
 800a12a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a12e:	d007      	beq.n	800a140 <UART_SetConfig+0x2a0>
 800a130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a134:	d00c      	beq.n	800a150 <UART_SetConfig+0x2b0>
 800a136:	e00f      	b.n	800a158 <UART_SetConfig+0x2b8>
 800a138:	2300      	movs	r3, #0
 800a13a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a13e:	e013      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a140:	2302      	movs	r3, #2
 800a142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a146:	e00f      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a148:	2304      	movs	r3, #4
 800a14a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a14e:	e00b      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a150:	2308      	movs	r3, #8
 800a152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a156:	e007      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a158:	2310      	movs	r3, #16
 800a15a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a15e:	bf00      	nop
 800a160:	e002      	b.n	800a168 <UART_SetConfig+0x2c8>
 800a162:	2310      	movs	r3, #16
 800a164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a13      	ldr	r2, [pc, #76]	; (800a1bc <UART_SetConfig+0x31c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	f040 80fe 	bne.w	800a370 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d837      	bhi.n	800a1ec <UART_SetConfig+0x34c>
 800a17c:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <UART_SetConfig+0x2e4>)
 800a17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a182:	bf00      	nop
 800a184:	0800a1a9 	.word	0x0800a1a9
 800a188:	0800a1ed 	.word	0x0800a1ed
 800a18c:	0800a1b1 	.word	0x0800a1b1
 800a190:	0800a1ed 	.word	0x0800a1ed
 800a194:	0800a1dd 	.word	0x0800a1dd
 800a198:	0800a1ed 	.word	0x0800a1ed
 800a19c:	0800a1ed 	.word	0x0800a1ed
 800a1a0:	0800a1ed 	.word	0x0800a1ed
 800a1a4:	0800a1e5 	.word	0x0800a1e5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a1a8:	f7fd fe40 	bl	8007e2c <HAL_RCC_GetPCLK1Freq>
 800a1ac:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a1ae:	e020      	b.n	800a1f2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a1b0:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <UART_SetConfig+0x338>)
 800a1b2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a1b4:	e01d      	b.n	800a1f2 <UART_SetConfig+0x352>
 800a1b6:	bf00      	nop
 800a1b8:	efff69f3 	.word	0xefff69f3
 800a1bc:	40008000 	.word	0x40008000
 800a1c0:	40013800 	.word	0x40013800
 800a1c4:	40021000 	.word	0x40021000
 800a1c8:	40004400 	.word	0x40004400
 800a1cc:	40004800 	.word	0x40004800
 800a1d0:	40004c00 	.word	0x40004c00
 800a1d4:	40005000 	.word	0x40005000
 800a1d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a1dc:	f7fd fd90 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 800a1e0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a1e2:	e006      	b.n	800a1f2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a1e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a1ea:	e002      	b.n	800a1f2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	76fb      	strb	r3, [r7, #27]
        break;
 800a1f0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 81b9 	beq.w	800a56c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	4613      	mov	r3, r2
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	4413      	add	r3, r2
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	429a      	cmp	r2, r3
 800a208:	d305      	bcc.n	800a216 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	429a      	cmp	r2, r3
 800a214:	d902      	bls.n	800a21c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	76fb      	strb	r3, [r7, #27]
 800a21a:	e1a7      	b.n	800a56c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800a21c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a220:	2b08      	cmp	r3, #8
 800a222:	f200 8092 	bhi.w	800a34a <UART_SetConfig+0x4aa>
 800a226:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <UART_SetConfig+0x38c>)
 800a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22c:	0800a251 	.word	0x0800a251
 800a230:	0800a34b 	.word	0x0800a34b
 800a234:	0800a29f 	.word	0x0800a29f
 800a238:	0800a34b 	.word	0x0800a34b
 800a23c:	0800a2d3 	.word	0x0800a2d3
 800a240:	0800a34b 	.word	0x0800a34b
 800a244:	0800a34b 	.word	0x0800a34b
 800a248:	0800a34b 	.word	0x0800a34b
 800a24c:	0800a321 	.word	0x0800a321
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a250:	f7fd fdec 	bl	8007e2c <HAL_RCC_GetPCLK1Freq>
 800a254:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4619      	mov	r1, r3
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	f04f 0300 	mov.w	r3, #0
 800a262:	f04f 0400 	mov.w	r4, #0
 800a266:	0214      	lsls	r4, r2, #8
 800a268:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a26c:	020b      	lsls	r3, r1, #8
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	6852      	ldr	r2, [r2, #4]
 800a272:	0852      	lsrs	r2, r2, #1
 800a274:	4611      	mov	r1, r2
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	eb13 0b01 	adds.w	fp, r3, r1
 800a27e:	eb44 0c02 	adc.w	ip, r4, r2
 800a282:	4658      	mov	r0, fp
 800a284:	4661      	mov	r1, ip
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f04f 0400 	mov.w	r4, #0
 800a28e:	461a      	mov	r2, r3
 800a290:	4623      	mov	r3, r4
 800a292:	f7f6 fd19 	bl	8000cc8 <__aeabi_uldivmod>
 800a296:	4603      	mov	r3, r0
 800a298:	460c      	mov	r4, r1
 800a29a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a29c:	e058      	b.n	800a350 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	085b      	lsrs	r3, r3, #1
 800a2a4:	f04f 0400 	mov.w	r4, #0
 800a2a8:	49ae      	ldr	r1, [pc, #696]	; (800a564 <UART_SetConfig+0x6c4>)
 800a2aa:	f04f 0200 	mov.w	r2, #0
 800a2ae:	eb13 0b01 	adds.w	fp, r3, r1
 800a2b2:	eb44 0c02 	adc.w	ip, r4, r2
 800a2b6:	4658      	mov	r0, fp
 800a2b8:	4661      	mov	r1, ip
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f04f 0400 	mov.w	r4, #0
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	4623      	mov	r3, r4
 800a2c6:	f7f6 fcff 	bl	8000cc8 <__aeabi_uldivmod>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a2d0:	e03e      	b.n	800a350 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800a2d2:	f7fd fd15 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 800a2d6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f04f 0200 	mov.w	r2, #0
 800a2e0:	f04f 0300 	mov.w	r3, #0
 800a2e4:	f04f 0400 	mov.w	r4, #0
 800a2e8:	0214      	lsls	r4, r2, #8
 800a2ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a2ee:	020b      	lsls	r3, r1, #8
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6852      	ldr	r2, [r2, #4]
 800a2f4:	0852      	lsrs	r2, r2, #1
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	eb13 0b01 	adds.w	fp, r3, r1
 800a300:	eb44 0c02 	adc.w	ip, r4, r2
 800a304:	4658      	mov	r0, fp
 800a306:	4661      	mov	r1, ip
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f04f 0400 	mov.w	r4, #0
 800a310:	461a      	mov	r2, r3
 800a312:	4623      	mov	r3, r4
 800a314:	f7f6 fcd8 	bl	8000cc8 <__aeabi_uldivmod>
 800a318:	4603      	mov	r3, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a31e:	e017      	b.n	800a350 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	085b      	lsrs	r3, r3, #1
 800a326:	f04f 0400 	mov.w	r4, #0
 800a32a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800a32e:	f144 0100 	adc.w	r1, r4, #0
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f04f 0400 	mov.w	r4, #0
 800a33a:	461a      	mov	r2, r3
 800a33c:	4623      	mov	r3, r4
 800a33e:	f7f6 fcc3 	bl	8000cc8 <__aeabi_uldivmod>
 800a342:	4603      	mov	r3, r0
 800a344:	460c      	mov	r4, r1
 800a346:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a348:	e002      	b.n	800a350 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	76fb      	strb	r3, [r7, #27]
            break;
 800a34e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a356:	d308      	bcc.n	800a36a <UART_SetConfig+0x4ca>
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a35e:	d204      	bcs.n	800a36a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69fa      	ldr	r2, [r7, #28]
 800a366:	60da      	str	r2, [r3, #12]
 800a368:	e100      	b.n	800a56c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	76fb      	strb	r3, [r7, #27]
 800a36e:	e0fd      	b.n	800a56c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a378:	f040 8084 	bne.w	800a484 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800a37c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a380:	2b08      	cmp	r3, #8
 800a382:	d85f      	bhi.n	800a444 <UART_SetConfig+0x5a4>
 800a384:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <UART_SetConfig+0x4ec>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3d1 	.word	0x0800a3d1
 800a394:	0800a3f1 	.word	0x0800a3f1
 800a398:	0800a445 	.word	0x0800a445
 800a39c:	0800a40d 	.word	0x0800a40d
 800a3a0:	0800a445 	.word	0x0800a445
 800a3a4:	0800a445 	.word	0x0800a445
 800a3a8:	0800a445 	.word	0x0800a445
 800a3ac:	0800a42d 	.word	0x0800a42d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3b0:	f7fd fd3c 	bl	8007e2c <HAL_RCC_GetPCLK1Freq>
 800a3b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	005a      	lsls	r2, r3, #1
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	085b      	lsrs	r3, r3, #1
 800a3c0:	441a      	add	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3ce:	e03c      	b.n	800a44a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3d0:	f7fd fd42 	bl	8007e58 <HAL_RCC_GetPCLK2Freq>
 800a3d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	005a      	lsls	r2, r3, #1
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	085b      	lsrs	r3, r3, #1
 800a3e0:	441a      	add	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3ee:	e02c      	b.n	800a44a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800a3fa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	6852      	ldr	r2, [r2, #4]
 800a402:	fbb3 f3f2 	udiv	r3, r3, r2
 800a406:	b29b      	uxth	r3, r3
 800a408:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a40a:	e01e      	b.n	800a44a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a40c:	f7fd fc78 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 800a410:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	005a      	lsls	r2, r3, #1
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	085b      	lsrs	r3, r3, #1
 800a41c:	441a      	add	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	fbb2 f3f3 	udiv	r3, r2, r3
 800a426:	b29b      	uxth	r3, r3
 800a428:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a42a:	e00e      	b.n	800a44a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	085b      	lsrs	r3, r3, #1
 800a432:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43e:	b29b      	uxth	r3, r3
 800a440:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a442:	e002      	b.n	800a44a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	76fb      	strb	r3, [r7, #27]
        break;
 800a448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	2b0f      	cmp	r3, #15
 800a44e:	d916      	bls.n	800a47e <UART_SetConfig+0x5de>
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a456:	d212      	bcs.n	800a47e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	f023 030f 	bic.w	r3, r3, #15
 800a460:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	085b      	lsrs	r3, r3, #1
 800a466:	b29b      	uxth	r3, r3
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	89fb      	ldrh	r3, [r7, #14]
 800a470:	4313      	orrs	r3, r2
 800a472:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	89fa      	ldrh	r2, [r7, #14]
 800a47a:	60da      	str	r2, [r3, #12]
 800a47c:	e076      	b.n	800a56c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	76fb      	strb	r3, [r7, #27]
 800a482:	e073      	b.n	800a56c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800a484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d85c      	bhi.n	800a546 <UART_SetConfig+0x6a6>
 800a48c:	a201      	add	r2, pc, #4	; (adr r2, 800a494 <UART_SetConfig+0x5f4>)
 800a48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a492:	bf00      	nop
 800a494:	0800a4b9 	.word	0x0800a4b9
 800a498:	0800a4d7 	.word	0x0800a4d7
 800a49c:	0800a4f5 	.word	0x0800a4f5
 800a4a0:	0800a547 	.word	0x0800a547
 800a4a4:	0800a511 	.word	0x0800a511
 800a4a8:	0800a547 	.word	0x0800a547
 800a4ac:	0800a547 	.word	0x0800a547
 800a4b0:	0800a547 	.word	0x0800a547
 800a4b4:	0800a52f 	.word	0x0800a52f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4b8:	f7fd fcb8 	bl	8007e2c <HAL_RCC_GetPCLK1Freq>
 800a4bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	085a      	lsrs	r2, r3, #1
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	441a      	add	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a4d4:	e03a      	b.n	800a54c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4d6:	f7fd fcbf 	bl	8007e58 <HAL_RCC_GetPCLK2Freq>
 800a4da:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	085a      	lsrs	r2, r3, #1
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	441a      	add	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a4f2:	e02b      	b.n	800a54c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	085b      	lsrs	r3, r3, #1
 800a4fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a4fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	6852      	ldr	r2, [r2, #4]
 800a506:	fbb3 f3f2 	udiv	r3, r3, r2
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a50e:	e01d      	b.n	800a54c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a510:	f7fd fbf6 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 800a514:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	085a      	lsrs	r2, r3, #1
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	441a      	add	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	fbb2 f3f3 	udiv	r3, r2, r3
 800a528:	b29b      	uxth	r3, r3
 800a52a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a52c:	e00e      	b.n	800a54c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	085b      	lsrs	r3, r3, #1
 800a534:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a540:	b29b      	uxth	r3, r3
 800a542:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a544:	e002      	b.n	800a54c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	76fb      	strb	r3, [r7, #27]
        break;
 800a54a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	2b0f      	cmp	r3, #15
 800a550:	d90a      	bls.n	800a568 <UART_SetConfig+0x6c8>
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a558:	d206      	bcs.n	800a568 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	60da      	str	r2, [r3, #12]
 800a562:	e003      	b.n	800a56c <UART_SetConfig+0x6cc>
 800a564:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a578:	7efb      	ldrb	r3, [r7, #27]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3728      	adds	r7, #40	; 0x28
 800a57e:	46bd      	mov	sp, r7
 800a580:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00a      	beq.n	800a5ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	f003 0304 	and.w	r3, r3, #4
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00a      	beq.n	800a5f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	f003 0308 	and.w	r3, r3, #8
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	f003 0310 	and.w	r3, r3, #16
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00a      	beq.n	800a636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00a      	beq.n	800a658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01a      	beq.n	800a69a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a682:	d10a      	bne.n	800a69a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	430a      	orrs	r2, r1
 800a698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00a      	beq.n	800a6bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	605a      	str	r2, [r3, #4]
  }
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af02      	add	r7, sp, #8
 800a6ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a6d6:	f7fc fa6f 	bl	8006bb8 <HAL_GetTick>
 800a6da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0308 	and.w	r3, r3, #8
 800a6e6:	2b08      	cmp	r3, #8
 800a6e8:	d10e      	bne.n	800a708 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f82a 	bl	800a752 <UART_WaitOnFlagUntilTimeout>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e020      	b.n	800a74a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b04      	cmp	r3, #4
 800a714:	d10e      	bne.n	800a734 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a716:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f814 	bl	800a752 <UART_WaitOnFlagUntilTimeout>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e00a      	b.n	800a74a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2220      	movs	r2, #32
 800a738:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	603b      	str	r3, [r7, #0]
 800a75e:	4613      	mov	r3, r2
 800a760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a762:	e05d      	b.n	800a820 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d059      	beq.n	800a820 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76c:	f7fc fa24 	bl	8006bb8 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d302      	bcc.n	800a782 <UART_WaitOnFlagUntilTimeout+0x30>
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d11b      	bne.n	800a7ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a790:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0201 	bic.w	r2, r2, #1
 800a7a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e042      	b.n	800a840 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d02b      	beq.n	800a820 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7d6:	d123      	bne.n	800a820 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7e0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7f0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0201 	bic.w	r2, r2, #1
 800a800:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2220      	movs	r2, #32
 800a806:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2220      	movs	r2, #32
 800a80c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2220      	movs	r2, #32
 800a812:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e00f      	b.n	800a840 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	69da      	ldr	r2, [r3, #28]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	4013      	ands	r3, r2
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	bf0c      	ite	eq
 800a830:	2301      	moveq	r3, #1
 800a832:	2300      	movne	r3, #0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	461a      	mov	r2, r3
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d092      	beq.n	800a764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a85e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689a      	ldr	r2, [r3, #8]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0201 	bic.w	r2, r2, #1
 800a86e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2220      	movs	r2, #32
 800a874:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7ff faf0 	bl	8009e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8ac:	bf00      	nop
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff facd 	bl	8009e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8f4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8fa:	2b22      	cmp	r3, #34	; 0x22
 800a8fc:	d13a      	bne.n	800a974 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a904:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a906:	89bb      	ldrh	r3, [r7, #12]
 800a908:	b2d9      	uxtb	r1, r3
 800a90a:	89fb      	ldrh	r3, [r7, #14]
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a912:	400a      	ands	r2, r1
 800a914:	b2d2      	uxtb	r2, r2
 800a916:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a928:	b29b      	uxth	r3, r3
 800a92a:	3b01      	subs	r3, #1
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d123      	bne.n	800a988 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a94e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689a      	ldr	r2, [r3, #8]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f022 0201 	bic.w	r2, r2, #1
 800a95e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2220      	movs	r2, #32
 800a964:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7fa fa1d 	bl	8004dac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a972:	e009      	b.n	800a988 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	8b1b      	ldrh	r3, [r3, #24]
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f042 0208 	orr.w	r2, r2, #8
 800a984:	b292      	uxth	r2, r2
 800a986:	831a      	strh	r2, [r3, #24]
}
 800a988:	bf00      	nop
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a99e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9a4:	2b22      	cmp	r3, #34	; 0x22
 800a9a6:	d13a      	bne.n	800aa1e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a9ae:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a9b6:	89ba      	ldrh	r2, [r7, #12]
 800a9b8:	89fb      	ldrh	r3, [r7, #14]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c6:	1c9a      	adds	r2, r3, #2
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d123      	bne.n	800aa32 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a9f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0201 	bic.w	r2, r2, #1
 800aa08:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7fa f9c8 	bl	8004dac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa1c:	e009      	b.n	800aa32 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	8b1b      	ldrh	r3, [r3, #24]
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f042 0208 	orr.w	r2, r2, #8
 800aa2e:	b292      	uxth	r2, r2
 800aa30:	831a      	strh	r2, [r3, #24]
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b083      	sub	sp, #12
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
	...

0800aa50 <__errno>:
 800aa50:	4b01      	ldr	r3, [pc, #4]	; (800aa58 <__errno+0x8>)
 800aa52:	6818      	ldr	r0, [r3, #0]
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	20000014 	.word	0x20000014

0800aa5c <__libc_init_array>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	4e0d      	ldr	r6, [pc, #52]	; (800aa94 <__libc_init_array+0x38>)
 800aa60:	4c0d      	ldr	r4, [pc, #52]	; (800aa98 <__libc_init_array+0x3c>)
 800aa62:	1ba4      	subs	r4, r4, r6
 800aa64:	10a4      	asrs	r4, r4, #2
 800aa66:	2500      	movs	r5, #0
 800aa68:	42a5      	cmp	r5, r4
 800aa6a:	d109      	bne.n	800aa80 <__libc_init_array+0x24>
 800aa6c:	4e0b      	ldr	r6, [pc, #44]	; (800aa9c <__libc_init_array+0x40>)
 800aa6e:	4c0c      	ldr	r4, [pc, #48]	; (800aaa0 <__libc_init_array+0x44>)
 800aa70:	f001 fea4 	bl	800c7bc <_init>
 800aa74:	1ba4      	subs	r4, r4, r6
 800aa76:	10a4      	asrs	r4, r4, #2
 800aa78:	2500      	movs	r5, #0
 800aa7a:	42a5      	cmp	r5, r4
 800aa7c:	d105      	bne.n	800aa8a <__libc_init_array+0x2e>
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa84:	4798      	blx	r3
 800aa86:	3501      	adds	r5, #1
 800aa88:	e7ee      	b.n	800aa68 <__libc_init_array+0xc>
 800aa8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa8e:	4798      	blx	r3
 800aa90:	3501      	adds	r5, #1
 800aa92:	e7f2      	b.n	800aa7a <__libc_init_array+0x1e>
 800aa94:	08012904 	.word	0x08012904
 800aa98:	08012904 	.word	0x08012904
 800aa9c:	08012904 	.word	0x08012904
 800aaa0:	08012908 	.word	0x08012908

0800aaa4 <memset>:
 800aaa4:	4402      	add	r2, r0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d100      	bne.n	800aaae <memset+0xa>
 800aaac:	4770      	bx	lr
 800aaae:	f803 1b01 	strb.w	r1, [r3], #1
 800aab2:	e7f9      	b.n	800aaa8 <memset+0x4>

0800aab4 <__cvt>:
 800aab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab8:	ec55 4b10 	vmov	r4, r5, d0
 800aabc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800aabe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aac2:	2d00      	cmp	r5, #0
 800aac4:	460e      	mov	r6, r1
 800aac6:	4691      	mov	r9, r2
 800aac8:	4619      	mov	r1, r3
 800aaca:	bfb8      	it	lt
 800aacc:	4622      	movlt	r2, r4
 800aace:	462b      	mov	r3, r5
 800aad0:	f027 0720 	bic.w	r7, r7, #32
 800aad4:	bfbb      	ittet	lt
 800aad6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aada:	461d      	movlt	r5, r3
 800aadc:	2300      	movge	r3, #0
 800aade:	232d      	movlt	r3, #45	; 0x2d
 800aae0:	bfb8      	it	lt
 800aae2:	4614      	movlt	r4, r2
 800aae4:	2f46      	cmp	r7, #70	; 0x46
 800aae6:	700b      	strb	r3, [r1, #0]
 800aae8:	d004      	beq.n	800aaf4 <__cvt+0x40>
 800aaea:	2f45      	cmp	r7, #69	; 0x45
 800aaec:	d100      	bne.n	800aaf0 <__cvt+0x3c>
 800aaee:	3601      	adds	r6, #1
 800aaf0:	2102      	movs	r1, #2
 800aaf2:	e000      	b.n	800aaf6 <__cvt+0x42>
 800aaf4:	2103      	movs	r1, #3
 800aaf6:	ab03      	add	r3, sp, #12
 800aaf8:	9301      	str	r3, [sp, #4]
 800aafa:	ab02      	add	r3, sp, #8
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	4632      	mov	r2, r6
 800ab00:	4653      	mov	r3, sl
 800ab02:	ec45 4b10 	vmov	d0, r4, r5
 800ab06:	f000 fbab 	bl	800b260 <_dtoa_r>
 800ab0a:	2f47      	cmp	r7, #71	; 0x47
 800ab0c:	4680      	mov	r8, r0
 800ab0e:	d102      	bne.n	800ab16 <__cvt+0x62>
 800ab10:	f019 0f01 	tst.w	r9, #1
 800ab14:	d026      	beq.n	800ab64 <__cvt+0xb0>
 800ab16:	2f46      	cmp	r7, #70	; 0x46
 800ab18:	eb08 0906 	add.w	r9, r8, r6
 800ab1c:	d111      	bne.n	800ab42 <__cvt+0x8e>
 800ab1e:	f898 3000 	ldrb.w	r3, [r8]
 800ab22:	2b30      	cmp	r3, #48	; 0x30
 800ab24:	d10a      	bne.n	800ab3c <__cvt+0x88>
 800ab26:	2200      	movs	r2, #0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 ffeb 	bl	8000b08 <__aeabi_dcmpeq>
 800ab32:	b918      	cbnz	r0, 800ab3c <__cvt+0x88>
 800ab34:	f1c6 0601 	rsb	r6, r6, #1
 800ab38:	f8ca 6000 	str.w	r6, [sl]
 800ab3c:	f8da 3000 	ldr.w	r3, [sl]
 800ab40:	4499      	add	r9, r3
 800ab42:	2200      	movs	r2, #0
 800ab44:	2300      	movs	r3, #0
 800ab46:	4620      	mov	r0, r4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	f7f5 ffdd 	bl	8000b08 <__aeabi_dcmpeq>
 800ab4e:	b938      	cbnz	r0, 800ab60 <__cvt+0xac>
 800ab50:	2230      	movs	r2, #48	; 0x30
 800ab52:	9b03      	ldr	r3, [sp, #12]
 800ab54:	454b      	cmp	r3, r9
 800ab56:	d205      	bcs.n	800ab64 <__cvt+0xb0>
 800ab58:	1c59      	adds	r1, r3, #1
 800ab5a:	9103      	str	r1, [sp, #12]
 800ab5c:	701a      	strb	r2, [r3, #0]
 800ab5e:	e7f8      	b.n	800ab52 <__cvt+0x9e>
 800ab60:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab68:	eba3 0308 	sub.w	r3, r3, r8
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	b004      	add	sp, #16
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ab76 <__exponent>:
 800ab76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	bfba      	itte	lt
 800ab7e:	4249      	neglt	r1, r1
 800ab80:	232d      	movlt	r3, #45	; 0x2d
 800ab82:	232b      	movge	r3, #43	; 0x2b
 800ab84:	2909      	cmp	r1, #9
 800ab86:	f804 2b02 	strb.w	r2, [r4], #2
 800ab8a:	7043      	strb	r3, [r0, #1]
 800ab8c:	dd20      	ble.n	800abd0 <__exponent+0x5a>
 800ab8e:	f10d 0307 	add.w	r3, sp, #7
 800ab92:	461f      	mov	r7, r3
 800ab94:	260a      	movs	r6, #10
 800ab96:	fb91 f5f6 	sdiv	r5, r1, r6
 800ab9a:	fb06 1115 	mls	r1, r6, r5, r1
 800ab9e:	3130      	adds	r1, #48	; 0x30
 800aba0:	2d09      	cmp	r5, #9
 800aba2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aba6:	f103 32ff 	add.w	r2, r3, #4294967295
 800abaa:	4629      	mov	r1, r5
 800abac:	dc09      	bgt.n	800abc2 <__exponent+0x4c>
 800abae:	3130      	adds	r1, #48	; 0x30
 800abb0:	3b02      	subs	r3, #2
 800abb2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800abb6:	42bb      	cmp	r3, r7
 800abb8:	4622      	mov	r2, r4
 800abba:	d304      	bcc.n	800abc6 <__exponent+0x50>
 800abbc:	1a10      	subs	r0, r2, r0
 800abbe:	b003      	add	sp, #12
 800abc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc2:	4613      	mov	r3, r2
 800abc4:	e7e7      	b.n	800ab96 <__exponent+0x20>
 800abc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abca:	f804 2b01 	strb.w	r2, [r4], #1
 800abce:	e7f2      	b.n	800abb6 <__exponent+0x40>
 800abd0:	2330      	movs	r3, #48	; 0x30
 800abd2:	4419      	add	r1, r3
 800abd4:	7083      	strb	r3, [r0, #2]
 800abd6:	1d02      	adds	r2, r0, #4
 800abd8:	70c1      	strb	r1, [r0, #3]
 800abda:	e7ef      	b.n	800abbc <__exponent+0x46>

0800abdc <_printf_float>:
 800abdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe0:	b08d      	sub	sp, #52	; 0x34
 800abe2:	460c      	mov	r4, r1
 800abe4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800abe8:	4616      	mov	r6, r2
 800abea:	461f      	mov	r7, r3
 800abec:	4605      	mov	r5, r0
 800abee:	f001 f8ef 	bl	800bdd0 <_localeconv_r>
 800abf2:	6803      	ldr	r3, [r0, #0]
 800abf4:	9304      	str	r3, [sp, #16]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f5 fb5a 	bl	80002b0 <strlen>
 800abfc:	2300      	movs	r3, #0
 800abfe:	930a      	str	r3, [sp, #40]	; 0x28
 800ac00:	f8d8 3000 	ldr.w	r3, [r8]
 800ac04:	9005      	str	r0, [sp, #20]
 800ac06:	3307      	adds	r3, #7
 800ac08:	f023 0307 	bic.w	r3, r3, #7
 800ac0c:	f103 0208 	add.w	r2, r3, #8
 800ac10:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac14:	f8d4 b000 	ldr.w	fp, [r4]
 800ac18:	f8c8 2000 	str.w	r2, [r8]
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac24:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac2c:	9307      	str	r3, [sp, #28]
 800ac2e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac32:	f04f 32ff 	mov.w	r2, #4294967295
 800ac36:	4ba7      	ldr	r3, [pc, #668]	; (800aed4 <_printf_float+0x2f8>)
 800ac38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac3c:	f7f5 ff96 	bl	8000b6c <__aeabi_dcmpun>
 800ac40:	bb70      	cbnz	r0, 800aca0 <_printf_float+0xc4>
 800ac42:	f04f 32ff 	mov.w	r2, #4294967295
 800ac46:	4ba3      	ldr	r3, [pc, #652]	; (800aed4 <_printf_float+0x2f8>)
 800ac48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac4c:	f7f5 ff70 	bl	8000b30 <__aeabi_dcmple>
 800ac50:	bb30      	cbnz	r0, 800aca0 <_printf_float+0xc4>
 800ac52:	2200      	movs	r2, #0
 800ac54:	2300      	movs	r3, #0
 800ac56:	4640      	mov	r0, r8
 800ac58:	4649      	mov	r1, r9
 800ac5a:	f7f5 ff5f 	bl	8000b1c <__aeabi_dcmplt>
 800ac5e:	b110      	cbz	r0, 800ac66 <_printf_float+0x8a>
 800ac60:	232d      	movs	r3, #45	; 0x2d
 800ac62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac66:	4a9c      	ldr	r2, [pc, #624]	; (800aed8 <_printf_float+0x2fc>)
 800ac68:	4b9c      	ldr	r3, [pc, #624]	; (800aedc <_printf_float+0x300>)
 800ac6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ac6e:	bf8c      	ite	hi
 800ac70:	4690      	movhi	r8, r2
 800ac72:	4698      	movls	r8, r3
 800ac74:	2303      	movs	r3, #3
 800ac76:	f02b 0204 	bic.w	r2, fp, #4
 800ac7a:	6123      	str	r3, [r4, #16]
 800ac7c:	6022      	str	r2, [r4, #0]
 800ac7e:	f04f 0900 	mov.w	r9, #0
 800ac82:	9700      	str	r7, [sp, #0]
 800ac84:	4633      	mov	r3, r6
 800ac86:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f000 f9e6 	bl	800b05c <_printf_common>
 800ac90:	3001      	adds	r0, #1
 800ac92:	f040 808d 	bne.w	800adb0 <_printf_float+0x1d4>
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9a:	b00d      	add	sp, #52	; 0x34
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	4642      	mov	r2, r8
 800aca2:	464b      	mov	r3, r9
 800aca4:	4640      	mov	r0, r8
 800aca6:	4649      	mov	r1, r9
 800aca8:	f7f5 ff60 	bl	8000b6c <__aeabi_dcmpun>
 800acac:	b110      	cbz	r0, 800acb4 <_printf_float+0xd8>
 800acae:	4a8c      	ldr	r2, [pc, #560]	; (800aee0 <_printf_float+0x304>)
 800acb0:	4b8c      	ldr	r3, [pc, #560]	; (800aee4 <_printf_float+0x308>)
 800acb2:	e7da      	b.n	800ac6a <_printf_float+0x8e>
 800acb4:	6861      	ldr	r1, [r4, #4]
 800acb6:	1c4b      	adds	r3, r1, #1
 800acb8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800acbc:	a80a      	add	r0, sp, #40	; 0x28
 800acbe:	d13e      	bne.n	800ad3e <_printf_float+0x162>
 800acc0:	2306      	movs	r3, #6
 800acc2:	6063      	str	r3, [r4, #4]
 800acc4:	2300      	movs	r3, #0
 800acc6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800acca:	ab09      	add	r3, sp, #36	; 0x24
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	ec49 8b10 	vmov	d0, r8, r9
 800acd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acd6:	6022      	str	r2, [r4, #0]
 800acd8:	f8cd a004 	str.w	sl, [sp, #4]
 800acdc:	6861      	ldr	r1, [r4, #4]
 800acde:	4628      	mov	r0, r5
 800ace0:	f7ff fee8 	bl	800aab4 <__cvt>
 800ace4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ace8:	2b47      	cmp	r3, #71	; 0x47
 800acea:	4680      	mov	r8, r0
 800acec:	d109      	bne.n	800ad02 <_printf_float+0x126>
 800acee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf0:	1cd8      	adds	r0, r3, #3
 800acf2:	db02      	blt.n	800acfa <_printf_float+0x11e>
 800acf4:	6862      	ldr	r2, [r4, #4]
 800acf6:	4293      	cmp	r3, r2
 800acf8:	dd47      	ble.n	800ad8a <_printf_float+0x1ae>
 800acfa:	f1aa 0a02 	sub.w	sl, sl, #2
 800acfe:	fa5f fa8a 	uxtb.w	sl, sl
 800ad02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ad06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad08:	d824      	bhi.n	800ad54 <_printf_float+0x178>
 800ad0a:	3901      	subs	r1, #1
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad12:	9109      	str	r1, [sp, #36]	; 0x24
 800ad14:	f7ff ff2f 	bl	800ab76 <__exponent>
 800ad18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad1a:	1813      	adds	r3, r2, r0
 800ad1c:	2a01      	cmp	r2, #1
 800ad1e:	4681      	mov	r9, r0
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	dc02      	bgt.n	800ad2a <_printf_float+0x14e>
 800ad24:	6822      	ldr	r2, [r4, #0]
 800ad26:	07d1      	lsls	r1, r2, #31
 800ad28:	d501      	bpl.n	800ad2e <_printf_float+0x152>
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	6123      	str	r3, [r4, #16]
 800ad2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0a5      	beq.n	800ac82 <_printf_float+0xa6>
 800ad36:	232d      	movs	r3, #45	; 0x2d
 800ad38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad3c:	e7a1      	b.n	800ac82 <_printf_float+0xa6>
 800ad3e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ad42:	f000 8177 	beq.w	800b034 <_printf_float+0x458>
 800ad46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ad4a:	d1bb      	bne.n	800acc4 <_printf_float+0xe8>
 800ad4c:	2900      	cmp	r1, #0
 800ad4e:	d1b9      	bne.n	800acc4 <_printf_float+0xe8>
 800ad50:	2301      	movs	r3, #1
 800ad52:	e7b6      	b.n	800acc2 <_printf_float+0xe6>
 800ad54:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ad58:	d119      	bne.n	800ad8e <_printf_float+0x1b2>
 800ad5a:	2900      	cmp	r1, #0
 800ad5c:	6863      	ldr	r3, [r4, #4]
 800ad5e:	dd0c      	ble.n	800ad7a <_printf_float+0x19e>
 800ad60:	6121      	str	r1, [r4, #16]
 800ad62:	b913      	cbnz	r3, 800ad6a <_printf_float+0x18e>
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	07d2      	lsls	r2, r2, #31
 800ad68:	d502      	bpl.n	800ad70 <_printf_float+0x194>
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	440b      	add	r3, r1
 800ad6e:	6123      	str	r3, [r4, #16]
 800ad70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad72:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad74:	f04f 0900 	mov.w	r9, #0
 800ad78:	e7d9      	b.n	800ad2e <_printf_float+0x152>
 800ad7a:	b913      	cbnz	r3, 800ad82 <_printf_float+0x1a6>
 800ad7c:	6822      	ldr	r2, [r4, #0]
 800ad7e:	07d0      	lsls	r0, r2, #31
 800ad80:	d501      	bpl.n	800ad86 <_printf_float+0x1aa>
 800ad82:	3302      	adds	r3, #2
 800ad84:	e7f3      	b.n	800ad6e <_printf_float+0x192>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e7f1      	b.n	800ad6e <_printf_float+0x192>
 800ad8a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ad8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ad92:	4293      	cmp	r3, r2
 800ad94:	db05      	blt.n	800ada2 <_printf_float+0x1c6>
 800ad96:	6822      	ldr	r2, [r4, #0]
 800ad98:	6123      	str	r3, [r4, #16]
 800ad9a:	07d1      	lsls	r1, r2, #31
 800ad9c:	d5e8      	bpl.n	800ad70 <_printf_float+0x194>
 800ad9e:	3301      	adds	r3, #1
 800ada0:	e7e5      	b.n	800ad6e <_printf_float+0x192>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bfd4      	ite	le
 800ada6:	f1c3 0302 	rsble	r3, r3, #2
 800adaa:	2301      	movgt	r3, #1
 800adac:	4413      	add	r3, r2
 800adae:	e7de      	b.n	800ad6e <_printf_float+0x192>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	055a      	lsls	r2, r3, #21
 800adb4:	d407      	bmi.n	800adc6 <_printf_float+0x1ea>
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	4642      	mov	r2, r8
 800adba:	4631      	mov	r1, r6
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b8      	blx	r7
 800adc0:	3001      	adds	r0, #1
 800adc2:	d12b      	bne.n	800ae1c <_printf_float+0x240>
 800adc4:	e767      	b.n	800ac96 <_printf_float+0xba>
 800adc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800adca:	f240 80dc 	bls.w	800af86 <_printf_float+0x3aa>
 800adce:	2200      	movs	r2, #0
 800add0:	2300      	movs	r3, #0
 800add2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800add6:	f7f5 fe97 	bl	8000b08 <__aeabi_dcmpeq>
 800adda:	2800      	cmp	r0, #0
 800addc:	d033      	beq.n	800ae46 <_printf_float+0x26a>
 800adde:	2301      	movs	r3, #1
 800ade0:	4a41      	ldr	r2, [pc, #260]	; (800aee8 <_printf_float+0x30c>)
 800ade2:	4631      	mov	r1, r6
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	f43f af54 	beq.w	800ac96 <_printf_float+0xba>
 800adee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adf2:	429a      	cmp	r2, r3
 800adf4:	db02      	blt.n	800adfc <_printf_float+0x220>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	07d8      	lsls	r0, r3, #31
 800adfa:	d50f      	bpl.n	800ae1c <_printf_float+0x240>
 800adfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae00:	4631      	mov	r1, r6
 800ae02:	4628      	mov	r0, r5
 800ae04:	47b8      	blx	r7
 800ae06:	3001      	adds	r0, #1
 800ae08:	f43f af45 	beq.w	800ac96 <_printf_float+0xba>
 800ae0c:	f04f 0800 	mov.w	r8, #0
 800ae10:	f104 091a 	add.w	r9, r4, #26
 800ae14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae16:	3b01      	subs	r3, #1
 800ae18:	4543      	cmp	r3, r8
 800ae1a:	dc09      	bgt.n	800ae30 <_printf_float+0x254>
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	079b      	lsls	r3, r3, #30
 800ae20:	f100 8103 	bmi.w	800b02a <_printf_float+0x44e>
 800ae24:	68e0      	ldr	r0, [r4, #12]
 800ae26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae28:	4298      	cmp	r0, r3
 800ae2a:	bfb8      	it	lt
 800ae2c:	4618      	movlt	r0, r3
 800ae2e:	e734      	b.n	800ac9a <_printf_float+0xbe>
 800ae30:	2301      	movs	r3, #1
 800ae32:	464a      	mov	r2, r9
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	f43f af2b 	beq.w	800ac96 <_printf_float+0xba>
 800ae40:	f108 0801 	add.w	r8, r8, #1
 800ae44:	e7e6      	b.n	800ae14 <_printf_float+0x238>
 800ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dc2b      	bgt.n	800aea4 <_printf_float+0x2c8>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	4a26      	ldr	r2, [pc, #152]	; (800aee8 <_printf_float+0x30c>)
 800ae50:	4631      	mov	r1, r6
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	3001      	adds	r0, #1
 800ae58:	f43f af1d 	beq.w	800ac96 <_printf_float+0xba>
 800ae5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5e:	b923      	cbnz	r3, 800ae6a <_printf_float+0x28e>
 800ae60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae62:	b913      	cbnz	r3, 800ae6a <_printf_float+0x28e>
 800ae64:	6823      	ldr	r3, [r4, #0]
 800ae66:	07d9      	lsls	r1, r3, #31
 800ae68:	d5d8      	bpl.n	800ae1c <_printf_float+0x240>
 800ae6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae6e:	4631      	mov	r1, r6
 800ae70:	4628      	mov	r0, r5
 800ae72:	47b8      	blx	r7
 800ae74:	3001      	adds	r0, #1
 800ae76:	f43f af0e 	beq.w	800ac96 <_printf_float+0xba>
 800ae7a:	f04f 0900 	mov.w	r9, #0
 800ae7e:	f104 0a1a 	add.w	sl, r4, #26
 800ae82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae84:	425b      	negs	r3, r3
 800ae86:	454b      	cmp	r3, r9
 800ae88:	dc01      	bgt.n	800ae8e <_printf_float+0x2b2>
 800ae8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae8c:	e794      	b.n	800adb8 <_printf_float+0x1dc>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	4652      	mov	r2, sl
 800ae92:	4631      	mov	r1, r6
 800ae94:	4628      	mov	r0, r5
 800ae96:	47b8      	blx	r7
 800ae98:	3001      	adds	r0, #1
 800ae9a:	f43f aefc 	beq.w	800ac96 <_printf_float+0xba>
 800ae9e:	f109 0901 	add.w	r9, r9, #1
 800aea2:	e7ee      	b.n	800ae82 <_printf_float+0x2a6>
 800aea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	bfa8      	it	ge
 800aeac:	461a      	movge	r2, r3
 800aeae:	2a00      	cmp	r2, #0
 800aeb0:	4691      	mov	r9, r2
 800aeb2:	dd07      	ble.n	800aec4 <_printf_float+0x2e8>
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	4642      	mov	r2, r8
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f aee9 	beq.w	800ac96 <_printf_float+0xba>
 800aec4:	f104 031a 	add.w	r3, r4, #26
 800aec8:	f04f 0b00 	mov.w	fp, #0
 800aecc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aed0:	9306      	str	r3, [sp, #24]
 800aed2:	e015      	b.n	800af00 <_printf_float+0x324>
 800aed4:	7fefffff 	.word	0x7fefffff
 800aed8:	0801266c 	.word	0x0801266c
 800aedc:	08012668 	.word	0x08012668
 800aee0:	08012674 	.word	0x08012674
 800aee4:	08012670 	.word	0x08012670
 800aee8:	08012678 	.word	0x08012678
 800aeec:	2301      	movs	r3, #1
 800aeee:	9a06      	ldr	r2, [sp, #24]
 800aef0:	4631      	mov	r1, r6
 800aef2:	4628      	mov	r0, r5
 800aef4:	47b8      	blx	r7
 800aef6:	3001      	adds	r0, #1
 800aef8:	f43f aecd 	beq.w	800ac96 <_printf_float+0xba>
 800aefc:	f10b 0b01 	add.w	fp, fp, #1
 800af00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800af04:	ebaa 0309 	sub.w	r3, sl, r9
 800af08:	455b      	cmp	r3, fp
 800af0a:	dcef      	bgt.n	800aeec <_printf_float+0x310>
 800af0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af10:	429a      	cmp	r2, r3
 800af12:	44d0      	add	r8, sl
 800af14:	db15      	blt.n	800af42 <_printf_float+0x366>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	07da      	lsls	r2, r3, #31
 800af1a:	d412      	bmi.n	800af42 <_printf_float+0x366>
 800af1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af20:	eba3 020a 	sub.w	r2, r3, sl
 800af24:	eba3 0a01 	sub.w	sl, r3, r1
 800af28:	4592      	cmp	sl, r2
 800af2a:	bfa8      	it	ge
 800af2c:	4692      	movge	sl, r2
 800af2e:	f1ba 0f00 	cmp.w	sl, #0
 800af32:	dc0e      	bgt.n	800af52 <_printf_float+0x376>
 800af34:	f04f 0800 	mov.w	r8, #0
 800af38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af3c:	f104 091a 	add.w	r9, r4, #26
 800af40:	e019      	b.n	800af76 <_printf_float+0x39a>
 800af42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af46:	4631      	mov	r1, r6
 800af48:	4628      	mov	r0, r5
 800af4a:	47b8      	blx	r7
 800af4c:	3001      	adds	r0, #1
 800af4e:	d1e5      	bne.n	800af1c <_printf_float+0x340>
 800af50:	e6a1      	b.n	800ac96 <_printf_float+0xba>
 800af52:	4653      	mov	r3, sl
 800af54:	4642      	mov	r2, r8
 800af56:	4631      	mov	r1, r6
 800af58:	4628      	mov	r0, r5
 800af5a:	47b8      	blx	r7
 800af5c:	3001      	adds	r0, #1
 800af5e:	d1e9      	bne.n	800af34 <_printf_float+0x358>
 800af60:	e699      	b.n	800ac96 <_printf_float+0xba>
 800af62:	2301      	movs	r3, #1
 800af64:	464a      	mov	r2, r9
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	f43f ae92 	beq.w	800ac96 <_printf_float+0xba>
 800af72:	f108 0801 	add.w	r8, r8, #1
 800af76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af7a:	1a9b      	subs	r3, r3, r2
 800af7c:	eba3 030a 	sub.w	r3, r3, sl
 800af80:	4543      	cmp	r3, r8
 800af82:	dcee      	bgt.n	800af62 <_printf_float+0x386>
 800af84:	e74a      	b.n	800ae1c <_printf_float+0x240>
 800af86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af88:	2a01      	cmp	r2, #1
 800af8a:	dc01      	bgt.n	800af90 <_printf_float+0x3b4>
 800af8c:	07db      	lsls	r3, r3, #31
 800af8e:	d53a      	bpl.n	800b006 <_printf_float+0x42a>
 800af90:	2301      	movs	r3, #1
 800af92:	4642      	mov	r2, r8
 800af94:	4631      	mov	r1, r6
 800af96:	4628      	mov	r0, r5
 800af98:	47b8      	blx	r7
 800af9a:	3001      	adds	r0, #1
 800af9c:	f43f ae7b 	beq.w	800ac96 <_printf_float+0xba>
 800afa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afa4:	4631      	mov	r1, r6
 800afa6:	4628      	mov	r0, r5
 800afa8:	47b8      	blx	r7
 800afaa:	3001      	adds	r0, #1
 800afac:	f108 0801 	add.w	r8, r8, #1
 800afb0:	f43f ae71 	beq.w	800ac96 <_printf_float+0xba>
 800afb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb6:	2200      	movs	r2, #0
 800afb8:	f103 3aff 	add.w	sl, r3, #4294967295
 800afbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afc0:	2300      	movs	r3, #0
 800afc2:	f7f5 fda1 	bl	8000b08 <__aeabi_dcmpeq>
 800afc6:	b9c8      	cbnz	r0, 800affc <_printf_float+0x420>
 800afc8:	4653      	mov	r3, sl
 800afca:	4642      	mov	r2, r8
 800afcc:	4631      	mov	r1, r6
 800afce:	4628      	mov	r0, r5
 800afd0:	47b8      	blx	r7
 800afd2:	3001      	adds	r0, #1
 800afd4:	d10e      	bne.n	800aff4 <_printf_float+0x418>
 800afd6:	e65e      	b.n	800ac96 <_printf_float+0xba>
 800afd8:	2301      	movs	r3, #1
 800afda:	4652      	mov	r2, sl
 800afdc:	4631      	mov	r1, r6
 800afde:	4628      	mov	r0, r5
 800afe0:	47b8      	blx	r7
 800afe2:	3001      	adds	r0, #1
 800afe4:	f43f ae57 	beq.w	800ac96 <_printf_float+0xba>
 800afe8:	f108 0801 	add.w	r8, r8, #1
 800afec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afee:	3b01      	subs	r3, #1
 800aff0:	4543      	cmp	r3, r8
 800aff2:	dcf1      	bgt.n	800afd8 <_printf_float+0x3fc>
 800aff4:	464b      	mov	r3, r9
 800aff6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800affa:	e6de      	b.n	800adba <_printf_float+0x1de>
 800affc:	f04f 0800 	mov.w	r8, #0
 800b000:	f104 0a1a 	add.w	sl, r4, #26
 800b004:	e7f2      	b.n	800afec <_printf_float+0x410>
 800b006:	2301      	movs	r3, #1
 800b008:	e7df      	b.n	800afca <_printf_float+0x3ee>
 800b00a:	2301      	movs	r3, #1
 800b00c:	464a      	mov	r2, r9
 800b00e:	4631      	mov	r1, r6
 800b010:	4628      	mov	r0, r5
 800b012:	47b8      	blx	r7
 800b014:	3001      	adds	r0, #1
 800b016:	f43f ae3e 	beq.w	800ac96 <_printf_float+0xba>
 800b01a:	f108 0801 	add.w	r8, r8, #1
 800b01e:	68e3      	ldr	r3, [r4, #12]
 800b020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b022:	1a9b      	subs	r3, r3, r2
 800b024:	4543      	cmp	r3, r8
 800b026:	dcf0      	bgt.n	800b00a <_printf_float+0x42e>
 800b028:	e6fc      	b.n	800ae24 <_printf_float+0x248>
 800b02a:	f04f 0800 	mov.w	r8, #0
 800b02e:	f104 0919 	add.w	r9, r4, #25
 800b032:	e7f4      	b.n	800b01e <_printf_float+0x442>
 800b034:	2900      	cmp	r1, #0
 800b036:	f43f ae8b 	beq.w	800ad50 <_printf_float+0x174>
 800b03a:	2300      	movs	r3, #0
 800b03c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b040:	ab09      	add	r3, sp, #36	; 0x24
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	ec49 8b10 	vmov	d0, r8, r9
 800b048:	6022      	str	r2, [r4, #0]
 800b04a:	f8cd a004 	str.w	sl, [sp, #4]
 800b04e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b052:	4628      	mov	r0, r5
 800b054:	f7ff fd2e 	bl	800aab4 <__cvt>
 800b058:	4680      	mov	r8, r0
 800b05a:	e648      	b.n	800acee <_printf_float+0x112>

0800b05c <_printf_common>:
 800b05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b060:	4691      	mov	r9, r2
 800b062:	461f      	mov	r7, r3
 800b064:	688a      	ldr	r2, [r1, #8]
 800b066:	690b      	ldr	r3, [r1, #16]
 800b068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b06c:	4293      	cmp	r3, r2
 800b06e:	bfb8      	it	lt
 800b070:	4613      	movlt	r3, r2
 800b072:	f8c9 3000 	str.w	r3, [r9]
 800b076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b07a:	4606      	mov	r6, r0
 800b07c:	460c      	mov	r4, r1
 800b07e:	b112      	cbz	r2, 800b086 <_printf_common+0x2a>
 800b080:	3301      	adds	r3, #1
 800b082:	f8c9 3000 	str.w	r3, [r9]
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	0699      	lsls	r1, r3, #26
 800b08a:	bf42      	ittt	mi
 800b08c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b090:	3302      	addmi	r3, #2
 800b092:	f8c9 3000 	strmi.w	r3, [r9]
 800b096:	6825      	ldr	r5, [r4, #0]
 800b098:	f015 0506 	ands.w	r5, r5, #6
 800b09c:	d107      	bne.n	800b0ae <_printf_common+0x52>
 800b09e:	f104 0a19 	add.w	sl, r4, #25
 800b0a2:	68e3      	ldr	r3, [r4, #12]
 800b0a4:	f8d9 2000 	ldr.w	r2, [r9]
 800b0a8:	1a9b      	subs	r3, r3, r2
 800b0aa:	42ab      	cmp	r3, r5
 800b0ac:	dc28      	bgt.n	800b100 <_printf_common+0xa4>
 800b0ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b0b2:	6822      	ldr	r2, [r4, #0]
 800b0b4:	3300      	adds	r3, #0
 800b0b6:	bf18      	it	ne
 800b0b8:	2301      	movne	r3, #1
 800b0ba:	0692      	lsls	r2, r2, #26
 800b0bc:	d42d      	bmi.n	800b11a <_printf_common+0xbe>
 800b0be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	47c0      	blx	r8
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d020      	beq.n	800b10e <_printf_common+0xb2>
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	68e5      	ldr	r5, [r4, #12]
 800b0d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b0d4:	f003 0306 	and.w	r3, r3, #6
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	bf08      	it	eq
 800b0dc:	1aad      	subeq	r5, r5, r2
 800b0de:	68a3      	ldr	r3, [r4, #8]
 800b0e0:	6922      	ldr	r2, [r4, #16]
 800b0e2:	bf0c      	ite	eq
 800b0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0e8:	2500      	movne	r5, #0
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	bfc4      	itt	gt
 800b0ee:	1a9b      	subgt	r3, r3, r2
 800b0f0:	18ed      	addgt	r5, r5, r3
 800b0f2:	f04f 0900 	mov.w	r9, #0
 800b0f6:	341a      	adds	r4, #26
 800b0f8:	454d      	cmp	r5, r9
 800b0fa:	d11a      	bne.n	800b132 <_printf_common+0xd6>
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e008      	b.n	800b112 <_printf_common+0xb6>
 800b100:	2301      	movs	r3, #1
 800b102:	4652      	mov	r2, sl
 800b104:	4639      	mov	r1, r7
 800b106:	4630      	mov	r0, r6
 800b108:	47c0      	blx	r8
 800b10a:	3001      	adds	r0, #1
 800b10c:	d103      	bne.n	800b116 <_printf_common+0xba>
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b116:	3501      	adds	r5, #1
 800b118:	e7c3      	b.n	800b0a2 <_printf_common+0x46>
 800b11a:	18e1      	adds	r1, r4, r3
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	2030      	movs	r0, #48	; 0x30
 800b120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b124:	4422      	add	r2, r4
 800b126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b12a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b12e:	3302      	adds	r3, #2
 800b130:	e7c5      	b.n	800b0be <_printf_common+0x62>
 800b132:	2301      	movs	r3, #1
 800b134:	4622      	mov	r2, r4
 800b136:	4639      	mov	r1, r7
 800b138:	4630      	mov	r0, r6
 800b13a:	47c0      	blx	r8
 800b13c:	3001      	adds	r0, #1
 800b13e:	d0e6      	beq.n	800b10e <_printf_common+0xb2>
 800b140:	f109 0901 	add.w	r9, r9, #1
 800b144:	e7d8      	b.n	800b0f8 <_printf_common+0x9c>

0800b146 <quorem>:
 800b146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14a:	6903      	ldr	r3, [r0, #16]
 800b14c:	690c      	ldr	r4, [r1, #16]
 800b14e:	42a3      	cmp	r3, r4
 800b150:	4680      	mov	r8, r0
 800b152:	f2c0 8082 	blt.w	800b25a <quorem+0x114>
 800b156:	3c01      	subs	r4, #1
 800b158:	f101 0714 	add.w	r7, r1, #20
 800b15c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b160:	f100 0614 	add.w	r6, r0, #20
 800b164:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b168:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b16c:	eb06 030c 	add.w	r3, r6, ip
 800b170:	3501      	adds	r5, #1
 800b172:	eb07 090c 	add.w	r9, r7, ip
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	fbb0 f5f5 	udiv	r5, r0, r5
 800b17c:	b395      	cbz	r5, 800b1e4 <quorem+0x9e>
 800b17e:	f04f 0a00 	mov.w	sl, #0
 800b182:	4638      	mov	r0, r7
 800b184:	46b6      	mov	lr, r6
 800b186:	46d3      	mov	fp, sl
 800b188:	f850 2b04 	ldr.w	r2, [r0], #4
 800b18c:	b293      	uxth	r3, r2
 800b18e:	fb05 a303 	mla	r3, r5, r3, sl
 800b192:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b196:	b29b      	uxth	r3, r3
 800b198:	ebab 0303 	sub.w	r3, fp, r3
 800b19c:	0c12      	lsrs	r2, r2, #16
 800b19e:	f8de b000 	ldr.w	fp, [lr]
 800b1a2:	fb05 a202 	mla	r2, r5, r2, sl
 800b1a6:	fa13 f38b 	uxtah	r3, r3, fp
 800b1aa:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b1ae:	fa1f fb82 	uxth.w	fp, r2
 800b1b2:	f8de 2000 	ldr.w	r2, [lr]
 800b1b6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b1ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1c4:	4581      	cmp	r9, r0
 800b1c6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b1ca:	f84e 3b04 	str.w	r3, [lr], #4
 800b1ce:	d2db      	bcs.n	800b188 <quorem+0x42>
 800b1d0:	f856 300c 	ldr.w	r3, [r6, ip]
 800b1d4:	b933      	cbnz	r3, 800b1e4 <quorem+0x9e>
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	3b04      	subs	r3, #4
 800b1da:	429e      	cmp	r6, r3
 800b1dc:	461a      	mov	r2, r3
 800b1de:	d330      	bcc.n	800b242 <quorem+0xfc>
 800b1e0:	f8c8 4010 	str.w	r4, [r8, #16]
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	f001 f829 	bl	800c23c <__mcmp>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	db25      	blt.n	800b23a <quorem+0xf4>
 800b1ee:	3501      	adds	r5, #1
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f04f 0c00 	mov.w	ip, #0
 800b1f6:	f857 2b04 	ldr.w	r2, [r7], #4
 800b1fa:	f8d0 e000 	ldr.w	lr, [r0]
 800b1fe:	b293      	uxth	r3, r2
 800b200:	ebac 0303 	sub.w	r3, ip, r3
 800b204:	0c12      	lsrs	r2, r2, #16
 800b206:	fa13 f38e 	uxtah	r3, r3, lr
 800b20a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b20e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b212:	b29b      	uxth	r3, r3
 800b214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b218:	45b9      	cmp	r9, r7
 800b21a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b21e:	f840 3b04 	str.w	r3, [r0], #4
 800b222:	d2e8      	bcs.n	800b1f6 <quorem+0xb0>
 800b224:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b228:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b22c:	b92a      	cbnz	r2, 800b23a <quorem+0xf4>
 800b22e:	3b04      	subs	r3, #4
 800b230:	429e      	cmp	r6, r3
 800b232:	461a      	mov	r2, r3
 800b234:	d30b      	bcc.n	800b24e <quorem+0x108>
 800b236:	f8c8 4010 	str.w	r4, [r8, #16]
 800b23a:	4628      	mov	r0, r5
 800b23c:	b003      	add	sp, #12
 800b23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b242:	6812      	ldr	r2, [r2, #0]
 800b244:	3b04      	subs	r3, #4
 800b246:	2a00      	cmp	r2, #0
 800b248:	d1ca      	bne.n	800b1e0 <quorem+0x9a>
 800b24a:	3c01      	subs	r4, #1
 800b24c:	e7c5      	b.n	800b1da <quorem+0x94>
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	3b04      	subs	r3, #4
 800b252:	2a00      	cmp	r2, #0
 800b254:	d1ef      	bne.n	800b236 <quorem+0xf0>
 800b256:	3c01      	subs	r4, #1
 800b258:	e7ea      	b.n	800b230 <quorem+0xea>
 800b25a:	2000      	movs	r0, #0
 800b25c:	e7ee      	b.n	800b23c <quorem+0xf6>
	...

0800b260 <_dtoa_r>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	ec57 6b10 	vmov	r6, r7, d0
 800b268:	b097      	sub	sp, #92	; 0x5c
 800b26a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b26c:	9106      	str	r1, [sp, #24]
 800b26e:	4604      	mov	r4, r0
 800b270:	920b      	str	r2, [sp, #44]	; 0x2c
 800b272:	9312      	str	r3, [sp, #72]	; 0x48
 800b274:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b278:	e9cd 6700 	strd	r6, r7, [sp]
 800b27c:	b93d      	cbnz	r5, 800b28e <_dtoa_r+0x2e>
 800b27e:	2010      	movs	r0, #16
 800b280:	f000 fdb4 	bl	800bdec <malloc>
 800b284:	6260      	str	r0, [r4, #36]	; 0x24
 800b286:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b28a:	6005      	str	r5, [r0, #0]
 800b28c:	60c5      	str	r5, [r0, #12]
 800b28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b290:	6819      	ldr	r1, [r3, #0]
 800b292:	b151      	cbz	r1, 800b2aa <_dtoa_r+0x4a>
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	604a      	str	r2, [r1, #4]
 800b298:	2301      	movs	r3, #1
 800b29a:	4093      	lsls	r3, r2
 800b29c:	608b      	str	r3, [r1, #8]
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 fdeb 	bl	800be7a <_Bfree>
 800b2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	1e3b      	subs	r3, r7, #0
 800b2ac:	bfbb      	ittet	lt
 800b2ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b2b2:	9301      	strlt	r3, [sp, #4]
 800b2b4:	2300      	movge	r3, #0
 800b2b6:	2201      	movlt	r2, #1
 800b2b8:	bfac      	ite	ge
 800b2ba:	f8c8 3000 	strge.w	r3, [r8]
 800b2be:	f8c8 2000 	strlt.w	r2, [r8]
 800b2c2:	4baf      	ldr	r3, [pc, #700]	; (800b580 <_dtoa_r+0x320>)
 800b2c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b2c8:	ea33 0308 	bics.w	r3, r3, r8
 800b2cc:	d114      	bne.n	800b2f8 <_dtoa_r+0x98>
 800b2ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b2d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	9b00      	ldr	r3, [sp, #0]
 800b2d8:	b923      	cbnz	r3, 800b2e4 <_dtoa_r+0x84>
 800b2da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f000 8542 	beq.w	800bd68 <_dtoa_r+0xb08>
 800b2e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b594 <_dtoa_r+0x334>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 8544 	beq.w	800bd78 <_dtoa_r+0xb18>
 800b2f0:	f10b 0303 	add.w	r3, fp, #3
 800b2f4:	f000 bd3e 	b.w	800bd74 <_dtoa_r+0xb14>
 800b2f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2300      	movs	r3, #0
 800b300:	4630      	mov	r0, r6
 800b302:	4639      	mov	r1, r7
 800b304:	f7f5 fc00 	bl	8000b08 <__aeabi_dcmpeq>
 800b308:	4681      	mov	r9, r0
 800b30a:	b168      	cbz	r0, 800b328 <_dtoa_r+0xc8>
 800b30c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b30e:	2301      	movs	r3, #1
 800b310:	6013      	str	r3, [r2, #0]
 800b312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 8524 	beq.w	800bd62 <_dtoa_r+0xb02>
 800b31a:	4b9a      	ldr	r3, [pc, #616]	; (800b584 <_dtoa_r+0x324>)
 800b31c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b31e:	f103 3bff 	add.w	fp, r3, #4294967295
 800b322:	6013      	str	r3, [r2, #0]
 800b324:	f000 bd28 	b.w	800bd78 <_dtoa_r+0xb18>
 800b328:	aa14      	add	r2, sp, #80	; 0x50
 800b32a:	a915      	add	r1, sp, #84	; 0x54
 800b32c:	ec47 6b10 	vmov	d0, r6, r7
 800b330:	4620      	mov	r0, r4
 800b332:	f000 fffa 	bl	800c32a <__d2b>
 800b336:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b33a:	9004      	str	r0, [sp, #16]
 800b33c:	2d00      	cmp	r5, #0
 800b33e:	d07c      	beq.n	800b43a <_dtoa_r+0x1da>
 800b340:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b344:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b348:	46b2      	mov	sl, r6
 800b34a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b352:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b356:	2200      	movs	r2, #0
 800b358:	4b8b      	ldr	r3, [pc, #556]	; (800b588 <_dtoa_r+0x328>)
 800b35a:	4650      	mov	r0, sl
 800b35c:	4659      	mov	r1, fp
 800b35e:	f7f4 ffb3 	bl	80002c8 <__aeabi_dsub>
 800b362:	a381      	add	r3, pc, #516	; (adr r3, 800b568 <_dtoa_r+0x308>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	f7f5 f966 	bl	8000638 <__aeabi_dmul>
 800b36c:	a380      	add	r3, pc, #512	; (adr r3, 800b570 <_dtoa_r+0x310>)
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f7f4 ffab 	bl	80002cc <__adddf3>
 800b376:	4606      	mov	r6, r0
 800b378:	4628      	mov	r0, r5
 800b37a:	460f      	mov	r7, r1
 800b37c:	f7f5 f8f2 	bl	8000564 <__aeabi_i2d>
 800b380:	a37d      	add	r3, pc, #500	; (adr r3, 800b578 <_dtoa_r+0x318>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f7f5 f957 	bl	8000638 <__aeabi_dmul>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	4630      	mov	r0, r6
 800b390:	4639      	mov	r1, r7
 800b392:	f7f4 ff9b 	bl	80002cc <__adddf3>
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	f7f5 fbfd 	bl	8000b98 <__aeabi_d2iz>
 800b39e:	2200      	movs	r2, #0
 800b3a0:	4682      	mov	sl, r0
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	f7f5 fbb8 	bl	8000b1c <__aeabi_dcmplt>
 800b3ac:	b148      	cbz	r0, 800b3c2 <_dtoa_r+0x162>
 800b3ae:	4650      	mov	r0, sl
 800b3b0:	f7f5 f8d8 	bl	8000564 <__aeabi_i2d>
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	463b      	mov	r3, r7
 800b3b8:	f7f5 fba6 	bl	8000b08 <__aeabi_dcmpeq>
 800b3bc:	b908      	cbnz	r0, 800b3c2 <_dtoa_r+0x162>
 800b3be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3c2:	f1ba 0f16 	cmp.w	sl, #22
 800b3c6:	d859      	bhi.n	800b47c <_dtoa_r+0x21c>
 800b3c8:	4970      	ldr	r1, [pc, #448]	; (800b58c <_dtoa_r+0x32c>)
 800b3ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b3ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3d6:	f7f5 fbbf 	bl	8000b58 <__aeabi_dcmpgt>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d050      	beq.n	800b480 <_dtoa_r+0x220>
 800b3de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3e8:	1b5d      	subs	r5, r3, r5
 800b3ea:	f1b5 0801 	subs.w	r8, r5, #1
 800b3ee:	bf49      	itett	mi
 800b3f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b3f4:	2300      	movpl	r3, #0
 800b3f6:	9305      	strmi	r3, [sp, #20]
 800b3f8:	f04f 0800 	movmi.w	r8, #0
 800b3fc:	bf58      	it	pl
 800b3fe:	9305      	strpl	r3, [sp, #20]
 800b400:	f1ba 0f00 	cmp.w	sl, #0
 800b404:	db3e      	blt.n	800b484 <_dtoa_r+0x224>
 800b406:	2300      	movs	r3, #0
 800b408:	44d0      	add	r8, sl
 800b40a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b40e:	9307      	str	r3, [sp, #28]
 800b410:	9b06      	ldr	r3, [sp, #24]
 800b412:	2b09      	cmp	r3, #9
 800b414:	f200 8090 	bhi.w	800b538 <_dtoa_r+0x2d8>
 800b418:	2b05      	cmp	r3, #5
 800b41a:	bfc4      	itt	gt
 800b41c:	3b04      	subgt	r3, #4
 800b41e:	9306      	strgt	r3, [sp, #24]
 800b420:	9b06      	ldr	r3, [sp, #24]
 800b422:	f1a3 0302 	sub.w	r3, r3, #2
 800b426:	bfcc      	ite	gt
 800b428:	2500      	movgt	r5, #0
 800b42a:	2501      	movle	r5, #1
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	f200 808f 	bhi.w	800b550 <_dtoa_r+0x2f0>
 800b432:	e8df f003 	tbb	[pc, r3]
 800b436:	7f7d      	.short	0x7f7d
 800b438:	7131      	.short	0x7131
 800b43a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b43e:	441d      	add	r5, r3
 800b440:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b444:	2820      	cmp	r0, #32
 800b446:	dd13      	ble.n	800b470 <_dtoa_r+0x210>
 800b448:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b44c:	9b00      	ldr	r3, [sp, #0]
 800b44e:	fa08 f800 	lsl.w	r8, r8, r0
 800b452:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b456:	fa23 f000 	lsr.w	r0, r3, r0
 800b45a:	ea48 0000 	orr.w	r0, r8, r0
 800b45e:	f7f5 f871 	bl	8000544 <__aeabi_ui2d>
 800b462:	2301      	movs	r3, #1
 800b464:	4682      	mov	sl, r0
 800b466:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b46a:	3d01      	subs	r5, #1
 800b46c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b46e:	e772      	b.n	800b356 <_dtoa_r+0xf6>
 800b470:	9b00      	ldr	r3, [sp, #0]
 800b472:	f1c0 0020 	rsb	r0, r0, #32
 800b476:	fa03 f000 	lsl.w	r0, r3, r0
 800b47a:	e7f0      	b.n	800b45e <_dtoa_r+0x1fe>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e7b1      	b.n	800b3e4 <_dtoa_r+0x184>
 800b480:	900f      	str	r0, [sp, #60]	; 0x3c
 800b482:	e7b0      	b.n	800b3e6 <_dtoa_r+0x186>
 800b484:	9b05      	ldr	r3, [sp, #20]
 800b486:	eba3 030a 	sub.w	r3, r3, sl
 800b48a:	9305      	str	r3, [sp, #20]
 800b48c:	f1ca 0300 	rsb	r3, sl, #0
 800b490:	9307      	str	r3, [sp, #28]
 800b492:	2300      	movs	r3, #0
 800b494:	930e      	str	r3, [sp, #56]	; 0x38
 800b496:	e7bb      	b.n	800b410 <_dtoa_r+0x1b0>
 800b498:	2301      	movs	r3, #1
 800b49a:	930a      	str	r3, [sp, #40]	; 0x28
 800b49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dd59      	ble.n	800b556 <_dtoa_r+0x2f6>
 800b4a2:	9302      	str	r3, [sp, #8]
 800b4a4:	4699      	mov	r9, r3
 800b4a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	6072      	str	r2, [r6, #4]
 800b4ac:	2204      	movs	r2, #4
 800b4ae:	f102 0014 	add.w	r0, r2, #20
 800b4b2:	4298      	cmp	r0, r3
 800b4b4:	6871      	ldr	r1, [r6, #4]
 800b4b6:	d953      	bls.n	800b560 <_dtoa_r+0x300>
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fcaa 	bl	800be12 <_Balloc>
 800b4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c0:	6030      	str	r0, [r6, #0]
 800b4c2:	f1b9 0f0e 	cmp.w	r9, #14
 800b4c6:	f8d3 b000 	ldr.w	fp, [r3]
 800b4ca:	f200 80e6 	bhi.w	800b69a <_dtoa_r+0x43a>
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	f000 80e3 	beq.w	800b69a <_dtoa_r+0x43a>
 800b4d4:	ed9d 7b00 	vldr	d7, [sp]
 800b4d8:	f1ba 0f00 	cmp.w	sl, #0
 800b4dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b4e0:	dd74      	ble.n	800b5cc <_dtoa_r+0x36c>
 800b4e2:	4a2a      	ldr	r2, [pc, #168]	; (800b58c <_dtoa_r+0x32c>)
 800b4e4:	f00a 030f 	and.w	r3, sl, #15
 800b4e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4ec:	ed93 7b00 	vldr	d7, [r3]
 800b4f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b4f4:	06f0      	lsls	r0, r6, #27
 800b4f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b4fa:	d565      	bpl.n	800b5c8 <_dtoa_r+0x368>
 800b4fc:	4b24      	ldr	r3, [pc, #144]	; (800b590 <_dtoa_r+0x330>)
 800b4fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b502:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b506:	f7f5 f9c1 	bl	800088c <__aeabi_ddiv>
 800b50a:	e9cd 0100 	strd	r0, r1, [sp]
 800b50e:	f006 060f 	and.w	r6, r6, #15
 800b512:	2503      	movs	r5, #3
 800b514:	4f1e      	ldr	r7, [pc, #120]	; (800b590 <_dtoa_r+0x330>)
 800b516:	e04c      	b.n	800b5b2 <_dtoa_r+0x352>
 800b518:	2301      	movs	r3, #1
 800b51a:	930a      	str	r3, [sp, #40]	; 0x28
 800b51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b51e:	4453      	add	r3, sl
 800b520:	f103 0901 	add.w	r9, r3, #1
 800b524:	9302      	str	r3, [sp, #8]
 800b526:	464b      	mov	r3, r9
 800b528:	2b01      	cmp	r3, #1
 800b52a:	bfb8      	it	lt
 800b52c:	2301      	movlt	r3, #1
 800b52e:	e7ba      	b.n	800b4a6 <_dtoa_r+0x246>
 800b530:	2300      	movs	r3, #0
 800b532:	e7b2      	b.n	800b49a <_dtoa_r+0x23a>
 800b534:	2300      	movs	r3, #0
 800b536:	e7f0      	b.n	800b51a <_dtoa_r+0x2ba>
 800b538:	2501      	movs	r5, #1
 800b53a:	2300      	movs	r3, #0
 800b53c:	9306      	str	r3, [sp, #24]
 800b53e:	950a      	str	r5, [sp, #40]	; 0x28
 800b540:	f04f 33ff 	mov.w	r3, #4294967295
 800b544:	9302      	str	r3, [sp, #8]
 800b546:	4699      	mov	r9, r3
 800b548:	2200      	movs	r2, #0
 800b54a:	2312      	movs	r3, #18
 800b54c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b54e:	e7aa      	b.n	800b4a6 <_dtoa_r+0x246>
 800b550:	2301      	movs	r3, #1
 800b552:	930a      	str	r3, [sp, #40]	; 0x28
 800b554:	e7f4      	b.n	800b540 <_dtoa_r+0x2e0>
 800b556:	2301      	movs	r3, #1
 800b558:	9302      	str	r3, [sp, #8]
 800b55a:	4699      	mov	r9, r3
 800b55c:	461a      	mov	r2, r3
 800b55e:	e7f5      	b.n	800b54c <_dtoa_r+0x2ec>
 800b560:	3101      	adds	r1, #1
 800b562:	6071      	str	r1, [r6, #4]
 800b564:	0052      	lsls	r2, r2, #1
 800b566:	e7a2      	b.n	800b4ae <_dtoa_r+0x24e>
 800b568:	636f4361 	.word	0x636f4361
 800b56c:	3fd287a7 	.word	0x3fd287a7
 800b570:	8b60c8b3 	.word	0x8b60c8b3
 800b574:	3fc68a28 	.word	0x3fc68a28
 800b578:	509f79fb 	.word	0x509f79fb
 800b57c:	3fd34413 	.word	0x3fd34413
 800b580:	7ff00000 	.word	0x7ff00000
 800b584:	08012679 	.word	0x08012679
 800b588:	3ff80000 	.word	0x3ff80000
 800b58c:	08012710 	.word	0x08012710
 800b590:	080126e8 	.word	0x080126e8
 800b594:	08012683 	.word	0x08012683
 800b598:	07f1      	lsls	r1, r6, #31
 800b59a:	d508      	bpl.n	800b5ae <_dtoa_r+0x34e>
 800b59c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5a4:	f7f5 f848 	bl	8000638 <__aeabi_dmul>
 800b5a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5ac:	3501      	adds	r5, #1
 800b5ae:	1076      	asrs	r6, r6, #1
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	2e00      	cmp	r6, #0
 800b5b4:	d1f0      	bne.n	800b598 <_dtoa_r+0x338>
 800b5b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5be:	f7f5 f965 	bl	800088c <__aeabi_ddiv>
 800b5c2:	e9cd 0100 	strd	r0, r1, [sp]
 800b5c6:	e01a      	b.n	800b5fe <_dtoa_r+0x39e>
 800b5c8:	2502      	movs	r5, #2
 800b5ca:	e7a3      	b.n	800b514 <_dtoa_r+0x2b4>
 800b5cc:	f000 80a0 	beq.w	800b710 <_dtoa_r+0x4b0>
 800b5d0:	f1ca 0600 	rsb	r6, sl, #0
 800b5d4:	4b9f      	ldr	r3, [pc, #636]	; (800b854 <_dtoa_r+0x5f4>)
 800b5d6:	4fa0      	ldr	r7, [pc, #640]	; (800b858 <_dtoa_r+0x5f8>)
 800b5d8:	f006 020f 	and.w	r2, r6, #15
 800b5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5e8:	f7f5 f826 	bl	8000638 <__aeabi_dmul>
 800b5ec:	e9cd 0100 	strd	r0, r1, [sp]
 800b5f0:	1136      	asrs	r6, r6, #4
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	2502      	movs	r5, #2
 800b5f6:	2e00      	cmp	r6, #0
 800b5f8:	d17f      	bne.n	800b6fa <_dtoa_r+0x49a>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1e1      	bne.n	800b5c2 <_dtoa_r+0x362>
 800b5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 8087 	beq.w	800b714 <_dtoa_r+0x4b4>
 800b606:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b60a:	2200      	movs	r2, #0
 800b60c:	4b93      	ldr	r3, [pc, #588]	; (800b85c <_dtoa_r+0x5fc>)
 800b60e:	4630      	mov	r0, r6
 800b610:	4639      	mov	r1, r7
 800b612:	f7f5 fa83 	bl	8000b1c <__aeabi_dcmplt>
 800b616:	2800      	cmp	r0, #0
 800b618:	d07c      	beq.n	800b714 <_dtoa_r+0x4b4>
 800b61a:	f1b9 0f00 	cmp.w	r9, #0
 800b61e:	d079      	beq.n	800b714 <_dtoa_r+0x4b4>
 800b620:	9b02      	ldr	r3, [sp, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	dd35      	ble.n	800b692 <_dtoa_r+0x432>
 800b626:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b62a:	9308      	str	r3, [sp, #32]
 800b62c:	4639      	mov	r1, r7
 800b62e:	2200      	movs	r2, #0
 800b630:	4b8b      	ldr	r3, [pc, #556]	; (800b860 <_dtoa_r+0x600>)
 800b632:	4630      	mov	r0, r6
 800b634:	f7f5 f800 	bl	8000638 <__aeabi_dmul>
 800b638:	e9cd 0100 	strd	r0, r1, [sp]
 800b63c:	9f02      	ldr	r7, [sp, #8]
 800b63e:	3501      	adds	r5, #1
 800b640:	4628      	mov	r0, r5
 800b642:	f7f4 ff8f 	bl	8000564 <__aeabi_i2d>
 800b646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b64a:	f7f4 fff5 	bl	8000638 <__aeabi_dmul>
 800b64e:	2200      	movs	r2, #0
 800b650:	4b84      	ldr	r3, [pc, #528]	; (800b864 <_dtoa_r+0x604>)
 800b652:	f7f4 fe3b 	bl	80002cc <__adddf3>
 800b656:	4605      	mov	r5, r0
 800b658:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b65c:	2f00      	cmp	r7, #0
 800b65e:	d15d      	bne.n	800b71c <_dtoa_r+0x4bc>
 800b660:	2200      	movs	r2, #0
 800b662:	4b81      	ldr	r3, [pc, #516]	; (800b868 <_dtoa_r+0x608>)
 800b664:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b668:	f7f4 fe2e 	bl	80002c8 <__aeabi_dsub>
 800b66c:	462a      	mov	r2, r5
 800b66e:	4633      	mov	r3, r6
 800b670:	e9cd 0100 	strd	r0, r1, [sp]
 800b674:	f7f5 fa70 	bl	8000b58 <__aeabi_dcmpgt>
 800b678:	2800      	cmp	r0, #0
 800b67a:	f040 8288 	bne.w	800bb8e <_dtoa_r+0x92e>
 800b67e:	462a      	mov	r2, r5
 800b680:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b688:	f7f5 fa48 	bl	8000b1c <__aeabi_dcmplt>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	f040 827c 	bne.w	800bb8a <_dtoa_r+0x92a>
 800b692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b696:	e9cd 2300 	strd	r2, r3, [sp]
 800b69a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f2c0 8150 	blt.w	800b942 <_dtoa_r+0x6e2>
 800b6a2:	f1ba 0f0e 	cmp.w	sl, #14
 800b6a6:	f300 814c 	bgt.w	800b942 <_dtoa_r+0x6e2>
 800b6aa:	4b6a      	ldr	r3, [pc, #424]	; (800b854 <_dtoa_r+0x5f4>)
 800b6ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b6b0:	ed93 7b00 	vldr	d7, [r3]
 800b6b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b6bc:	f280 80d8 	bge.w	800b870 <_dtoa_r+0x610>
 800b6c0:	f1b9 0f00 	cmp.w	r9, #0
 800b6c4:	f300 80d4 	bgt.w	800b870 <_dtoa_r+0x610>
 800b6c8:	f040 825e 	bne.w	800bb88 <_dtoa_r+0x928>
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4b66      	ldr	r3, [pc, #408]	; (800b868 <_dtoa_r+0x608>)
 800b6d0:	ec51 0b17 	vmov	r0, r1, d7
 800b6d4:	f7f4 ffb0 	bl	8000638 <__aeabi_dmul>
 800b6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6dc:	f7f5 fa32 	bl	8000b44 <__aeabi_dcmpge>
 800b6e0:	464f      	mov	r7, r9
 800b6e2:	464e      	mov	r6, r9
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	f040 8234 	bne.w	800bb52 <_dtoa_r+0x8f2>
 800b6ea:	2331      	movs	r3, #49	; 0x31
 800b6ec:	f10b 0501 	add.w	r5, fp, #1
 800b6f0:	f88b 3000 	strb.w	r3, [fp]
 800b6f4:	f10a 0a01 	add.w	sl, sl, #1
 800b6f8:	e22f      	b.n	800bb5a <_dtoa_r+0x8fa>
 800b6fa:	07f2      	lsls	r2, r6, #31
 800b6fc:	d505      	bpl.n	800b70a <_dtoa_r+0x4aa>
 800b6fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b702:	f7f4 ff99 	bl	8000638 <__aeabi_dmul>
 800b706:	3501      	adds	r5, #1
 800b708:	2301      	movs	r3, #1
 800b70a:	1076      	asrs	r6, r6, #1
 800b70c:	3708      	adds	r7, #8
 800b70e:	e772      	b.n	800b5f6 <_dtoa_r+0x396>
 800b710:	2502      	movs	r5, #2
 800b712:	e774      	b.n	800b5fe <_dtoa_r+0x39e>
 800b714:	f8cd a020 	str.w	sl, [sp, #32]
 800b718:	464f      	mov	r7, r9
 800b71a:	e791      	b.n	800b640 <_dtoa_r+0x3e0>
 800b71c:	4b4d      	ldr	r3, [pc, #308]	; (800b854 <_dtoa_r+0x5f4>)
 800b71e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b722:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d047      	beq.n	800b7bc <_dtoa_r+0x55c>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	2000      	movs	r0, #0
 800b732:	494e      	ldr	r1, [pc, #312]	; (800b86c <_dtoa_r+0x60c>)
 800b734:	f7f5 f8aa 	bl	800088c <__aeabi_ddiv>
 800b738:	462a      	mov	r2, r5
 800b73a:	4633      	mov	r3, r6
 800b73c:	f7f4 fdc4 	bl	80002c8 <__aeabi_dsub>
 800b740:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b744:	465d      	mov	r5, fp
 800b746:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b74a:	f7f5 fa25 	bl	8000b98 <__aeabi_d2iz>
 800b74e:	4606      	mov	r6, r0
 800b750:	f7f4 ff08 	bl	8000564 <__aeabi_i2d>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b75c:	f7f4 fdb4 	bl	80002c8 <__aeabi_dsub>
 800b760:	3630      	adds	r6, #48	; 0x30
 800b762:	f805 6b01 	strb.w	r6, [r5], #1
 800b766:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b76a:	e9cd 0100 	strd	r0, r1, [sp]
 800b76e:	f7f5 f9d5 	bl	8000b1c <__aeabi_dcmplt>
 800b772:	2800      	cmp	r0, #0
 800b774:	d163      	bne.n	800b83e <_dtoa_r+0x5de>
 800b776:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b77a:	2000      	movs	r0, #0
 800b77c:	4937      	ldr	r1, [pc, #220]	; (800b85c <_dtoa_r+0x5fc>)
 800b77e:	f7f4 fda3 	bl	80002c8 <__aeabi_dsub>
 800b782:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b786:	f7f5 f9c9 	bl	8000b1c <__aeabi_dcmplt>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f040 80b7 	bne.w	800b8fe <_dtoa_r+0x69e>
 800b790:	eba5 030b 	sub.w	r3, r5, fp
 800b794:	429f      	cmp	r7, r3
 800b796:	f77f af7c 	ble.w	800b692 <_dtoa_r+0x432>
 800b79a:	2200      	movs	r2, #0
 800b79c:	4b30      	ldr	r3, [pc, #192]	; (800b860 <_dtoa_r+0x600>)
 800b79e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b7a2:	f7f4 ff49 	bl	8000638 <__aeabi_dmul>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b7ac:	4b2c      	ldr	r3, [pc, #176]	; (800b860 <_dtoa_r+0x600>)
 800b7ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7b2:	f7f4 ff41 	bl	8000638 <__aeabi_dmul>
 800b7b6:	e9cd 0100 	strd	r0, r1, [sp]
 800b7ba:	e7c4      	b.n	800b746 <_dtoa_r+0x4e6>
 800b7bc:	462a      	mov	r2, r5
 800b7be:	4633      	mov	r3, r6
 800b7c0:	f7f4 ff3a 	bl	8000638 <__aeabi_dmul>
 800b7c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b7c8:	eb0b 0507 	add.w	r5, fp, r7
 800b7cc:	465e      	mov	r6, fp
 800b7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7d2:	f7f5 f9e1 	bl	8000b98 <__aeabi_d2iz>
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	f7f4 fec4 	bl	8000564 <__aeabi_i2d>
 800b7dc:	3730      	adds	r7, #48	; 0x30
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7e6:	f7f4 fd6f 	bl	80002c8 <__aeabi_dsub>
 800b7ea:	f806 7b01 	strb.w	r7, [r6], #1
 800b7ee:	42ae      	cmp	r6, r5
 800b7f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b7f4:	f04f 0200 	mov.w	r2, #0
 800b7f8:	d126      	bne.n	800b848 <_dtoa_r+0x5e8>
 800b7fa:	4b1c      	ldr	r3, [pc, #112]	; (800b86c <_dtoa_r+0x60c>)
 800b7fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b800:	f7f4 fd64 	bl	80002cc <__adddf3>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b80c:	f7f5 f9a4 	bl	8000b58 <__aeabi_dcmpgt>
 800b810:	2800      	cmp	r0, #0
 800b812:	d174      	bne.n	800b8fe <_dtoa_r+0x69e>
 800b814:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b818:	2000      	movs	r0, #0
 800b81a:	4914      	ldr	r1, [pc, #80]	; (800b86c <_dtoa_r+0x60c>)
 800b81c:	f7f4 fd54 	bl	80002c8 <__aeabi_dsub>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b828:	f7f5 f978 	bl	8000b1c <__aeabi_dcmplt>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	f43f af30 	beq.w	800b692 <_dtoa_r+0x432>
 800b832:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b836:	2b30      	cmp	r3, #48	; 0x30
 800b838:	f105 32ff 	add.w	r2, r5, #4294967295
 800b83c:	d002      	beq.n	800b844 <_dtoa_r+0x5e4>
 800b83e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b842:	e04a      	b.n	800b8da <_dtoa_r+0x67a>
 800b844:	4615      	mov	r5, r2
 800b846:	e7f4      	b.n	800b832 <_dtoa_r+0x5d2>
 800b848:	4b05      	ldr	r3, [pc, #20]	; (800b860 <_dtoa_r+0x600>)
 800b84a:	f7f4 fef5 	bl	8000638 <__aeabi_dmul>
 800b84e:	e9cd 0100 	strd	r0, r1, [sp]
 800b852:	e7bc      	b.n	800b7ce <_dtoa_r+0x56e>
 800b854:	08012710 	.word	0x08012710
 800b858:	080126e8 	.word	0x080126e8
 800b85c:	3ff00000 	.word	0x3ff00000
 800b860:	40240000 	.word	0x40240000
 800b864:	401c0000 	.word	0x401c0000
 800b868:	40140000 	.word	0x40140000
 800b86c:	3fe00000 	.word	0x3fe00000
 800b870:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b874:	465d      	mov	r5, fp
 800b876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f5 f805 	bl	800088c <__aeabi_ddiv>
 800b882:	f7f5 f989 	bl	8000b98 <__aeabi_d2iz>
 800b886:	4680      	mov	r8, r0
 800b888:	f7f4 fe6c 	bl	8000564 <__aeabi_i2d>
 800b88c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b890:	f7f4 fed2 	bl	8000638 <__aeabi_dmul>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4630      	mov	r0, r6
 800b89a:	4639      	mov	r1, r7
 800b89c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b8a0:	f7f4 fd12 	bl	80002c8 <__aeabi_dsub>
 800b8a4:	f805 6b01 	strb.w	r6, [r5], #1
 800b8a8:	eba5 060b 	sub.w	r6, r5, fp
 800b8ac:	45b1      	cmp	r9, r6
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	d139      	bne.n	800b928 <_dtoa_r+0x6c8>
 800b8b4:	f7f4 fd0a 	bl	80002cc <__adddf3>
 800b8b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8bc:	4606      	mov	r6, r0
 800b8be:	460f      	mov	r7, r1
 800b8c0:	f7f5 f94a 	bl	8000b58 <__aeabi_dcmpgt>
 800b8c4:	b9c8      	cbnz	r0, 800b8fa <_dtoa_r+0x69a>
 800b8c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	f7f5 f91b 	bl	8000b08 <__aeabi_dcmpeq>
 800b8d2:	b110      	cbz	r0, 800b8da <_dtoa_r+0x67a>
 800b8d4:	f018 0f01 	tst.w	r8, #1
 800b8d8:	d10f      	bne.n	800b8fa <_dtoa_r+0x69a>
 800b8da:	9904      	ldr	r1, [sp, #16]
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 facc 	bl	800be7a <_Bfree>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8e6:	702b      	strb	r3, [r5, #0]
 800b8e8:	f10a 0301 	add.w	r3, sl, #1
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 8241 	beq.w	800bd78 <_dtoa_r+0xb18>
 800b8f6:	601d      	str	r5, [r3, #0]
 800b8f8:	e23e      	b.n	800bd78 <_dtoa_r+0xb18>
 800b8fa:	f8cd a020 	str.w	sl, [sp, #32]
 800b8fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b902:	2a39      	cmp	r2, #57	; 0x39
 800b904:	f105 33ff 	add.w	r3, r5, #4294967295
 800b908:	d108      	bne.n	800b91c <_dtoa_r+0x6bc>
 800b90a:	459b      	cmp	fp, r3
 800b90c:	d10a      	bne.n	800b924 <_dtoa_r+0x6c4>
 800b90e:	9b08      	ldr	r3, [sp, #32]
 800b910:	3301      	adds	r3, #1
 800b912:	9308      	str	r3, [sp, #32]
 800b914:	2330      	movs	r3, #48	; 0x30
 800b916:	f88b 3000 	strb.w	r3, [fp]
 800b91a:	465b      	mov	r3, fp
 800b91c:	781a      	ldrb	r2, [r3, #0]
 800b91e:	3201      	adds	r2, #1
 800b920:	701a      	strb	r2, [r3, #0]
 800b922:	e78c      	b.n	800b83e <_dtoa_r+0x5de>
 800b924:	461d      	mov	r5, r3
 800b926:	e7ea      	b.n	800b8fe <_dtoa_r+0x69e>
 800b928:	2200      	movs	r2, #0
 800b92a:	4b9b      	ldr	r3, [pc, #620]	; (800bb98 <_dtoa_r+0x938>)
 800b92c:	f7f4 fe84 	bl	8000638 <__aeabi_dmul>
 800b930:	2200      	movs	r2, #0
 800b932:	2300      	movs	r3, #0
 800b934:	4606      	mov	r6, r0
 800b936:	460f      	mov	r7, r1
 800b938:	f7f5 f8e6 	bl	8000b08 <__aeabi_dcmpeq>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d09a      	beq.n	800b876 <_dtoa_r+0x616>
 800b940:	e7cb      	b.n	800b8da <_dtoa_r+0x67a>
 800b942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b944:	2a00      	cmp	r2, #0
 800b946:	f000 808b 	beq.w	800ba60 <_dtoa_r+0x800>
 800b94a:	9a06      	ldr	r2, [sp, #24]
 800b94c:	2a01      	cmp	r2, #1
 800b94e:	dc6e      	bgt.n	800ba2e <_dtoa_r+0x7ce>
 800b950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b952:	2a00      	cmp	r2, #0
 800b954:	d067      	beq.n	800ba26 <_dtoa_r+0x7c6>
 800b956:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b95a:	9f07      	ldr	r7, [sp, #28]
 800b95c:	9d05      	ldr	r5, [sp, #20]
 800b95e:	9a05      	ldr	r2, [sp, #20]
 800b960:	2101      	movs	r1, #1
 800b962:	441a      	add	r2, r3
 800b964:	4620      	mov	r0, r4
 800b966:	9205      	str	r2, [sp, #20]
 800b968:	4498      	add	r8, r3
 800b96a:	f000 fb26 	bl	800bfba <__i2b>
 800b96e:	4606      	mov	r6, r0
 800b970:	2d00      	cmp	r5, #0
 800b972:	dd0c      	ble.n	800b98e <_dtoa_r+0x72e>
 800b974:	f1b8 0f00 	cmp.w	r8, #0
 800b978:	dd09      	ble.n	800b98e <_dtoa_r+0x72e>
 800b97a:	4545      	cmp	r5, r8
 800b97c:	9a05      	ldr	r2, [sp, #20]
 800b97e:	462b      	mov	r3, r5
 800b980:	bfa8      	it	ge
 800b982:	4643      	movge	r3, r8
 800b984:	1ad2      	subs	r2, r2, r3
 800b986:	9205      	str	r2, [sp, #20]
 800b988:	1aed      	subs	r5, r5, r3
 800b98a:	eba8 0803 	sub.w	r8, r8, r3
 800b98e:	9b07      	ldr	r3, [sp, #28]
 800b990:	b1eb      	cbz	r3, 800b9ce <_dtoa_r+0x76e>
 800b992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b994:	2b00      	cmp	r3, #0
 800b996:	d067      	beq.n	800ba68 <_dtoa_r+0x808>
 800b998:	b18f      	cbz	r7, 800b9be <_dtoa_r+0x75e>
 800b99a:	4631      	mov	r1, r6
 800b99c:	463a      	mov	r2, r7
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 fbaa 	bl	800c0f8 <__pow5mult>
 800b9a4:	9a04      	ldr	r2, [sp, #16]
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 fb0e 	bl	800bfcc <__multiply>
 800b9b0:	9904      	ldr	r1, [sp, #16]
 800b9b2:	9008      	str	r0, [sp, #32]
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fa60 	bl	800be7a <_Bfree>
 800b9ba:	9b08      	ldr	r3, [sp, #32]
 800b9bc:	9304      	str	r3, [sp, #16]
 800b9be:	9b07      	ldr	r3, [sp, #28]
 800b9c0:	1bda      	subs	r2, r3, r7
 800b9c2:	d004      	beq.n	800b9ce <_dtoa_r+0x76e>
 800b9c4:	9904      	ldr	r1, [sp, #16]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f000 fb96 	bl	800c0f8 <__pow5mult>
 800b9cc:	9004      	str	r0, [sp, #16]
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 faf2 	bl	800bfba <__i2b>
 800b9d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9d8:	4607      	mov	r7, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 81d0 	beq.w	800bd80 <_dtoa_r+0xb20>
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	4601      	mov	r1, r0
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f000 fb87 	bl	800c0f8 <__pow5mult>
 800b9ea:	9b06      	ldr	r3, [sp, #24]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	dc40      	bgt.n	800ba74 <_dtoa_r+0x814>
 800b9f2:	9b00      	ldr	r3, [sp, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d139      	bne.n	800ba6c <_dtoa_r+0x80c>
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d136      	bne.n	800ba70 <_dtoa_r+0x810>
 800ba02:	9b01      	ldr	r3, [sp, #4]
 800ba04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba08:	0d1b      	lsrs	r3, r3, #20
 800ba0a:	051b      	lsls	r3, r3, #20
 800ba0c:	b12b      	cbz	r3, 800ba1a <_dtoa_r+0x7ba>
 800ba0e:	9b05      	ldr	r3, [sp, #20]
 800ba10:	3301      	adds	r3, #1
 800ba12:	9305      	str	r3, [sp, #20]
 800ba14:	f108 0801 	add.w	r8, r8, #1
 800ba18:	2301      	movs	r3, #1
 800ba1a:	9307      	str	r3, [sp, #28]
 800ba1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d12a      	bne.n	800ba78 <_dtoa_r+0x818>
 800ba22:	2001      	movs	r0, #1
 800ba24:	e030      	b.n	800ba88 <_dtoa_r+0x828>
 800ba26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba2c:	e795      	b.n	800b95a <_dtoa_r+0x6fa>
 800ba2e:	9b07      	ldr	r3, [sp, #28]
 800ba30:	f109 37ff 	add.w	r7, r9, #4294967295
 800ba34:	42bb      	cmp	r3, r7
 800ba36:	bfbf      	itttt	lt
 800ba38:	9b07      	ldrlt	r3, [sp, #28]
 800ba3a:	9707      	strlt	r7, [sp, #28]
 800ba3c:	1afa      	sublt	r2, r7, r3
 800ba3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ba40:	bfbb      	ittet	lt
 800ba42:	189b      	addlt	r3, r3, r2
 800ba44:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ba46:	1bdf      	subge	r7, r3, r7
 800ba48:	2700      	movlt	r7, #0
 800ba4a:	f1b9 0f00 	cmp.w	r9, #0
 800ba4e:	bfb5      	itete	lt
 800ba50:	9b05      	ldrlt	r3, [sp, #20]
 800ba52:	9d05      	ldrge	r5, [sp, #20]
 800ba54:	eba3 0509 	sublt.w	r5, r3, r9
 800ba58:	464b      	movge	r3, r9
 800ba5a:	bfb8      	it	lt
 800ba5c:	2300      	movlt	r3, #0
 800ba5e:	e77e      	b.n	800b95e <_dtoa_r+0x6fe>
 800ba60:	9f07      	ldr	r7, [sp, #28]
 800ba62:	9d05      	ldr	r5, [sp, #20]
 800ba64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ba66:	e783      	b.n	800b970 <_dtoa_r+0x710>
 800ba68:	9a07      	ldr	r2, [sp, #28]
 800ba6a:	e7ab      	b.n	800b9c4 <_dtoa_r+0x764>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	e7d4      	b.n	800ba1a <_dtoa_r+0x7ba>
 800ba70:	9b00      	ldr	r3, [sp, #0]
 800ba72:	e7d2      	b.n	800ba1a <_dtoa_r+0x7ba>
 800ba74:	2300      	movs	r3, #0
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ba7e:	6918      	ldr	r0, [r3, #16]
 800ba80:	f000 fa4d 	bl	800bf1e <__hi0bits>
 800ba84:	f1c0 0020 	rsb	r0, r0, #32
 800ba88:	4440      	add	r0, r8
 800ba8a:	f010 001f 	ands.w	r0, r0, #31
 800ba8e:	d047      	beq.n	800bb20 <_dtoa_r+0x8c0>
 800ba90:	f1c0 0320 	rsb	r3, r0, #32
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	dd3b      	ble.n	800bb10 <_dtoa_r+0x8b0>
 800ba98:	9b05      	ldr	r3, [sp, #20]
 800ba9a:	f1c0 001c 	rsb	r0, r0, #28
 800ba9e:	4403      	add	r3, r0
 800baa0:	9305      	str	r3, [sp, #20]
 800baa2:	4405      	add	r5, r0
 800baa4:	4480      	add	r8, r0
 800baa6:	9b05      	ldr	r3, [sp, #20]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dd05      	ble.n	800bab8 <_dtoa_r+0x858>
 800baac:	461a      	mov	r2, r3
 800baae:	9904      	ldr	r1, [sp, #16]
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 fb6f 	bl	800c194 <__lshift>
 800bab6:	9004      	str	r0, [sp, #16]
 800bab8:	f1b8 0f00 	cmp.w	r8, #0
 800babc:	dd05      	ble.n	800baca <_dtoa_r+0x86a>
 800babe:	4639      	mov	r1, r7
 800bac0:	4642      	mov	r2, r8
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 fb66 	bl	800c194 <__lshift>
 800bac8:	4607      	mov	r7, r0
 800baca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bacc:	b353      	cbz	r3, 800bb24 <_dtoa_r+0x8c4>
 800bace:	4639      	mov	r1, r7
 800bad0:	9804      	ldr	r0, [sp, #16]
 800bad2:	f000 fbb3 	bl	800c23c <__mcmp>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	da24      	bge.n	800bb24 <_dtoa_r+0x8c4>
 800bada:	2300      	movs	r3, #0
 800badc:	220a      	movs	r2, #10
 800bade:	9904      	ldr	r1, [sp, #16]
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 f9e1 	bl	800bea8 <__multadd>
 800bae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae8:	9004      	str	r0, [sp, #16]
 800baea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 814d 	beq.w	800bd8e <_dtoa_r+0xb2e>
 800baf4:	2300      	movs	r3, #0
 800baf6:	4631      	mov	r1, r6
 800baf8:	220a      	movs	r2, #10
 800bafa:	4620      	mov	r0, r4
 800bafc:	f000 f9d4 	bl	800bea8 <__multadd>
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	4606      	mov	r6, r0
 800bb06:	dc4f      	bgt.n	800bba8 <_dtoa_r+0x948>
 800bb08:	9b06      	ldr	r3, [sp, #24]
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	dd4c      	ble.n	800bba8 <_dtoa_r+0x948>
 800bb0e:	e011      	b.n	800bb34 <_dtoa_r+0x8d4>
 800bb10:	d0c9      	beq.n	800baa6 <_dtoa_r+0x846>
 800bb12:	9a05      	ldr	r2, [sp, #20]
 800bb14:	331c      	adds	r3, #28
 800bb16:	441a      	add	r2, r3
 800bb18:	9205      	str	r2, [sp, #20]
 800bb1a:	441d      	add	r5, r3
 800bb1c:	4498      	add	r8, r3
 800bb1e:	e7c2      	b.n	800baa6 <_dtoa_r+0x846>
 800bb20:	4603      	mov	r3, r0
 800bb22:	e7f6      	b.n	800bb12 <_dtoa_r+0x8b2>
 800bb24:	f1b9 0f00 	cmp.w	r9, #0
 800bb28:	dc38      	bgt.n	800bb9c <_dtoa_r+0x93c>
 800bb2a:	9b06      	ldr	r3, [sp, #24]
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	dd35      	ble.n	800bb9c <_dtoa_r+0x93c>
 800bb30:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb34:	9b02      	ldr	r3, [sp, #8]
 800bb36:	b963      	cbnz	r3, 800bb52 <_dtoa_r+0x8f2>
 800bb38:	4639      	mov	r1, r7
 800bb3a:	2205      	movs	r2, #5
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f000 f9b3 	bl	800bea8 <__multadd>
 800bb42:	4601      	mov	r1, r0
 800bb44:	4607      	mov	r7, r0
 800bb46:	9804      	ldr	r0, [sp, #16]
 800bb48:	f000 fb78 	bl	800c23c <__mcmp>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f73f adcc 	bgt.w	800b6ea <_dtoa_r+0x48a>
 800bb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb54:	465d      	mov	r5, fp
 800bb56:	ea6f 0a03 	mvn.w	sl, r3
 800bb5a:	f04f 0900 	mov.w	r9, #0
 800bb5e:	4639      	mov	r1, r7
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 f98a 	bl	800be7a <_Bfree>
 800bb66:	2e00      	cmp	r6, #0
 800bb68:	f43f aeb7 	beq.w	800b8da <_dtoa_r+0x67a>
 800bb6c:	f1b9 0f00 	cmp.w	r9, #0
 800bb70:	d005      	beq.n	800bb7e <_dtoa_r+0x91e>
 800bb72:	45b1      	cmp	r9, r6
 800bb74:	d003      	beq.n	800bb7e <_dtoa_r+0x91e>
 800bb76:	4649      	mov	r1, r9
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 f97e 	bl	800be7a <_Bfree>
 800bb7e:	4631      	mov	r1, r6
 800bb80:	4620      	mov	r0, r4
 800bb82:	f000 f97a 	bl	800be7a <_Bfree>
 800bb86:	e6a8      	b.n	800b8da <_dtoa_r+0x67a>
 800bb88:	2700      	movs	r7, #0
 800bb8a:	463e      	mov	r6, r7
 800bb8c:	e7e1      	b.n	800bb52 <_dtoa_r+0x8f2>
 800bb8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bb92:	463e      	mov	r6, r7
 800bb94:	e5a9      	b.n	800b6ea <_dtoa_r+0x48a>
 800bb96:	bf00      	nop
 800bb98:	40240000 	.word	0x40240000
 800bb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 80fa 	beq.w	800bd9c <_dtoa_r+0xb3c>
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	dd05      	ble.n	800bbb8 <_dtoa_r+0x958>
 800bbac:	4631      	mov	r1, r6
 800bbae:	462a      	mov	r2, r5
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 faef 	bl	800c194 <__lshift>
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	9b07      	ldr	r3, [sp, #28]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d04c      	beq.n	800bc58 <_dtoa_r+0x9f8>
 800bbbe:	6871      	ldr	r1, [r6, #4]
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 f926 	bl	800be12 <_Balloc>
 800bbc6:	6932      	ldr	r2, [r6, #16]
 800bbc8:	3202      	adds	r2, #2
 800bbca:	4605      	mov	r5, r0
 800bbcc:	0092      	lsls	r2, r2, #2
 800bbce:	f106 010c 	add.w	r1, r6, #12
 800bbd2:	300c      	adds	r0, #12
 800bbd4:	f000 f912 	bl	800bdfc <memcpy>
 800bbd8:	2201      	movs	r2, #1
 800bbda:	4629      	mov	r1, r5
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f000 fad9 	bl	800c194 <__lshift>
 800bbe2:	9b00      	ldr	r3, [sp, #0]
 800bbe4:	f8cd b014 	str.w	fp, [sp, #20]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	46b1      	mov	r9, r6
 800bbee:	9307      	str	r3, [sp, #28]
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	9804      	ldr	r0, [sp, #16]
 800bbf6:	f7ff faa6 	bl	800b146 <quorem>
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bc02:	9804      	ldr	r0, [sp, #16]
 800bc04:	f000 fb1a 	bl	800c23c <__mcmp>
 800bc08:	4632      	mov	r2, r6
 800bc0a:	9000      	str	r0, [sp, #0]
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f000 fb2e 	bl	800c270 <__mdiff>
 800bc14:	68c3      	ldr	r3, [r0, #12]
 800bc16:	4602      	mov	r2, r0
 800bc18:	bb03      	cbnz	r3, 800bc5c <_dtoa_r+0x9fc>
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	9008      	str	r0, [sp, #32]
 800bc1e:	9804      	ldr	r0, [sp, #16]
 800bc20:	f000 fb0c 	bl	800c23c <__mcmp>
 800bc24:	9a08      	ldr	r2, [sp, #32]
 800bc26:	4603      	mov	r3, r0
 800bc28:	4611      	mov	r1, r2
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	9308      	str	r3, [sp, #32]
 800bc2e:	f000 f924 	bl	800be7a <_Bfree>
 800bc32:	9b08      	ldr	r3, [sp, #32]
 800bc34:	b9a3      	cbnz	r3, 800bc60 <_dtoa_r+0xa00>
 800bc36:	9a06      	ldr	r2, [sp, #24]
 800bc38:	b992      	cbnz	r2, 800bc60 <_dtoa_r+0xa00>
 800bc3a:	9a07      	ldr	r2, [sp, #28]
 800bc3c:	b982      	cbnz	r2, 800bc60 <_dtoa_r+0xa00>
 800bc3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc42:	d029      	beq.n	800bc98 <_dtoa_r+0xa38>
 800bc44:	9b00      	ldr	r3, [sp, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	dd01      	ble.n	800bc4e <_dtoa_r+0x9ee>
 800bc4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bc4e:	9b05      	ldr	r3, [sp, #20]
 800bc50:	1c5d      	adds	r5, r3, #1
 800bc52:	f883 8000 	strb.w	r8, [r3]
 800bc56:	e782      	b.n	800bb5e <_dtoa_r+0x8fe>
 800bc58:	4630      	mov	r0, r6
 800bc5a:	e7c2      	b.n	800bbe2 <_dtoa_r+0x982>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e7e3      	b.n	800bc28 <_dtoa_r+0x9c8>
 800bc60:	9a00      	ldr	r2, [sp, #0]
 800bc62:	2a00      	cmp	r2, #0
 800bc64:	db04      	blt.n	800bc70 <_dtoa_r+0xa10>
 800bc66:	d125      	bne.n	800bcb4 <_dtoa_r+0xa54>
 800bc68:	9a06      	ldr	r2, [sp, #24]
 800bc6a:	bb1a      	cbnz	r2, 800bcb4 <_dtoa_r+0xa54>
 800bc6c:	9a07      	ldr	r2, [sp, #28]
 800bc6e:	bb0a      	cbnz	r2, 800bcb4 <_dtoa_r+0xa54>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	ddec      	ble.n	800bc4e <_dtoa_r+0x9ee>
 800bc74:	2201      	movs	r2, #1
 800bc76:	9904      	ldr	r1, [sp, #16]
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f000 fa8b 	bl	800c194 <__lshift>
 800bc7e:	4639      	mov	r1, r7
 800bc80:	9004      	str	r0, [sp, #16]
 800bc82:	f000 fadb 	bl	800c23c <__mcmp>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	dc03      	bgt.n	800bc92 <_dtoa_r+0xa32>
 800bc8a:	d1e0      	bne.n	800bc4e <_dtoa_r+0x9ee>
 800bc8c:	f018 0f01 	tst.w	r8, #1
 800bc90:	d0dd      	beq.n	800bc4e <_dtoa_r+0x9ee>
 800bc92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc96:	d1d8      	bne.n	800bc4a <_dtoa_r+0x9ea>
 800bc98:	9b05      	ldr	r3, [sp, #20]
 800bc9a:	9a05      	ldr	r2, [sp, #20]
 800bc9c:	1c5d      	adds	r5, r3, #1
 800bc9e:	2339      	movs	r3, #57	; 0x39
 800bca0:	7013      	strb	r3, [r2, #0]
 800bca2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bca6:	2b39      	cmp	r3, #57	; 0x39
 800bca8:	f105 32ff 	add.w	r2, r5, #4294967295
 800bcac:	d04f      	beq.n	800bd4e <_dtoa_r+0xaee>
 800bcae:	3301      	adds	r3, #1
 800bcb0:	7013      	strb	r3, [r2, #0]
 800bcb2:	e754      	b.n	800bb5e <_dtoa_r+0x8fe>
 800bcb4:	9a05      	ldr	r2, [sp, #20]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f102 0501 	add.w	r5, r2, #1
 800bcbc:	dd06      	ble.n	800bccc <_dtoa_r+0xa6c>
 800bcbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bcc2:	d0e9      	beq.n	800bc98 <_dtoa_r+0xa38>
 800bcc4:	f108 0801 	add.w	r8, r8, #1
 800bcc8:	9b05      	ldr	r3, [sp, #20]
 800bcca:	e7c2      	b.n	800bc52 <_dtoa_r+0x9f2>
 800bccc:	9a02      	ldr	r2, [sp, #8]
 800bcce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bcd2:	eba5 030b 	sub.w	r3, r5, fp
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d021      	beq.n	800bd1e <_dtoa_r+0xabe>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	220a      	movs	r2, #10
 800bcde:	9904      	ldr	r1, [sp, #16]
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 f8e1 	bl	800bea8 <__multadd>
 800bce6:	45b1      	cmp	r9, r6
 800bce8:	9004      	str	r0, [sp, #16]
 800bcea:	f04f 0300 	mov.w	r3, #0
 800bcee:	f04f 020a 	mov.w	r2, #10
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	d105      	bne.n	800bd04 <_dtoa_r+0xaa4>
 800bcf8:	f000 f8d6 	bl	800bea8 <__multadd>
 800bcfc:	4681      	mov	r9, r0
 800bcfe:	4606      	mov	r6, r0
 800bd00:	9505      	str	r5, [sp, #20]
 800bd02:	e776      	b.n	800bbf2 <_dtoa_r+0x992>
 800bd04:	f000 f8d0 	bl	800bea8 <__multadd>
 800bd08:	4631      	mov	r1, r6
 800bd0a:	4681      	mov	r9, r0
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	220a      	movs	r2, #10
 800bd10:	4620      	mov	r0, r4
 800bd12:	f000 f8c9 	bl	800bea8 <__multadd>
 800bd16:	4606      	mov	r6, r0
 800bd18:	e7f2      	b.n	800bd00 <_dtoa_r+0xaa0>
 800bd1a:	f04f 0900 	mov.w	r9, #0
 800bd1e:	2201      	movs	r2, #1
 800bd20:	9904      	ldr	r1, [sp, #16]
 800bd22:	4620      	mov	r0, r4
 800bd24:	f000 fa36 	bl	800c194 <__lshift>
 800bd28:	4639      	mov	r1, r7
 800bd2a:	9004      	str	r0, [sp, #16]
 800bd2c:	f000 fa86 	bl	800c23c <__mcmp>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	dcb6      	bgt.n	800bca2 <_dtoa_r+0xa42>
 800bd34:	d102      	bne.n	800bd3c <_dtoa_r+0xadc>
 800bd36:	f018 0f01 	tst.w	r8, #1
 800bd3a:	d1b2      	bne.n	800bca2 <_dtoa_r+0xa42>
 800bd3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd40:	2b30      	cmp	r3, #48	; 0x30
 800bd42:	f105 32ff 	add.w	r2, r5, #4294967295
 800bd46:	f47f af0a 	bne.w	800bb5e <_dtoa_r+0x8fe>
 800bd4a:	4615      	mov	r5, r2
 800bd4c:	e7f6      	b.n	800bd3c <_dtoa_r+0xadc>
 800bd4e:	4593      	cmp	fp, r2
 800bd50:	d105      	bne.n	800bd5e <_dtoa_r+0xafe>
 800bd52:	2331      	movs	r3, #49	; 0x31
 800bd54:	f10a 0a01 	add.w	sl, sl, #1
 800bd58:	f88b 3000 	strb.w	r3, [fp]
 800bd5c:	e6ff      	b.n	800bb5e <_dtoa_r+0x8fe>
 800bd5e:	4615      	mov	r5, r2
 800bd60:	e79f      	b.n	800bca2 <_dtoa_r+0xa42>
 800bd62:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bdc8 <_dtoa_r+0xb68>
 800bd66:	e007      	b.n	800bd78 <_dtoa_r+0xb18>
 800bd68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bdcc <_dtoa_r+0xb6c>
 800bd6e:	b11b      	cbz	r3, 800bd78 <_dtoa_r+0xb18>
 800bd70:	f10b 0308 	add.w	r3, fp, #8
 800bd74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	4658      	mov	r0, fp
 800bd7a:	b017      	add	sp, #92	; 0x5c
 800bd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd80:	9b06      	ldr	r3, [sp, #24]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	f77f ae35 	ble.w	800b9f2 <_dtoa_r+0x792>
 800bd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd8a:	9307      	str	r3, [sp, #28]
 800bd8c:	e649      	b.n	800ba22 <_dtoa_r+0x7c2>
 800bd8e:	9b02      	ldr	r3, [sp, #8]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dc03      	bgt.n	800bd9c <_dtoa_r+0xb3c>
 800bd94:	9b06      	ldr	r3, [sp, #24]
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	f73f aecc 	bgt.w	800bb34 <_dtoa_r+0x8d4>
 800bd9c:	465d      	mov	r5, fp
 800bd9e:	4639      	mov	r1, r7
 800bda0:	9804      	ldr	r0, [sp, #16]
 800bda2:	f7ff f9d0 	bl	800b146 <quorem>
 800bda6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bdaa:	f805 8b01 	strb.w	r8, [r5], #1
 800bdae:	9a02      	ldr	r2, [sp, #8]
 800bdb0:	eba5 030b 	sub.w	r3, r5, fp
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	ddb0      	ble.n	800bd1a <_dtoa_r+0xaba>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	220a      	movs	r2, #10
 800bdbc:	9904      	ldr	r1, [sp, #16]
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 f872 	bl	800bea8 <__multadd>
 800bdc4:	9004      	str	r0, [sp, #16]
 800bdc6:	e7ea      	b.n	800bd9e <_dtoa_r+0xb3e>
 800bdc8:	08012678 	.word	0x08012678
 800bdcc:	0801267a 	.word	0x0801267a

0800bdd0 <_localeconv_r>:
 800bdd0:	4b04      	ldr	r3, [pc, #16]	; (800bde4 <_localeconv_r+0x14>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6a18      	ldr	r0, [r3, #32]
 800bdd6:	4b04      	ldr	r3, [pc, #16]	; (800bde8 <_localeconv_r+0x18>)
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	bf08      	it	eq
 800bddc:	4618      	moveq	r0, r3
 800bdde:	30f0      	adds	r0, #240	; 0xf0
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	20000014 	.word	0x20000014
 800bde8:	20000078 	.word	0x20000078

0800bdec <malloc>:
 800bdec:	4b02      	ldr	r3, [pc, #8]	; (800bdf8 <malloc+0xc>)
 800bdee:	4601      	mov	r1, r0
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f000 baf7 	b.w	800c3e4 <_malloc_r>
 800bdf6:	bf00      	nop
 800bdf8:	20000014 	.word	0x20000014

0800bdfc <memcpy>:
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	1e43      	subs	r3, r0, #1
 800be00:	440a      	add	r2, r1
 800be02:	4291      	cmp	r1, r2
 800be04:	d100      	bne.n	800be08 <memcpy+0xc>
 800be06:	bd10      	pop	{r4, pc}
 800be08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be10:	e7f7      	b.n	800be02 <memcpy+0x6>

0800be12 <_Balloc>:
 800be12:	b570      	push	{r4, r5, r6, lr}
 800be14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be16:	4604      	mov	r4, r0
 800be18:	460e      	mov	r6, r1
 800be1a:	b93d      	cbnz	r5, 800be2c <_Balloc+0x1a>
 800be1c:	2010      	movs	r0, #16
 800be1e:	f7ff ffe5 	bl	800bdec <malloc>
 800be22:	6260      	str	r0, [r4, #36]	; 0x24
 800be24:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be28:	6005      	str	r5, [r0, #0]
 800be2a:	60c5      	str	r5, [r0, #12]
 800be2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800be2e:	68eb      	ldr	r3, [r5, #12]
 800be30:	b183      	cbz	r3, 800be54 <_Balloc+0x42>
 800be32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800be3a:	b9b8      	cbnz	r0, 800be6c <_Balloc+0x5a>
 800be3c:	2101      	movs	r1, #1
 800be3e:	fa01 f506 	lsl.w	r5, r1, r6
 800be42:	1d6a      	adds	r2, r5, #5
 800be44:	0092      	lsls	r2, r2, #2
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fabe 	bl	800c3c8 <_calloc_r>
 800be4c:	b160      	cbz	r0, 800be68 <_Balloc+0x56>
 800be4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800be52:	e00e      	b.n	800be72 <_Balloc+0x60>
 800be54:	2221      	movs	r2, #33	; 0x21
 800be56:	2104      	movs	r1, #4
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 fab5 	bl	800c3c8 <_calloc_r>
 800be5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be60:	60e8      	str	r0, [r5, #12]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e4      	bne.n	800be32 <_Balloc+0x20>
 800be68:	2000      	movs	r0, #0
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	6802      	ldr	r2, [r0, #0]
 800be6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800be72:	2300      	movs	r3, #0
 800be74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be78:	e7f7      	b.n	800be6a <_Balloc+0x58>

0800be7a <_Bfree>:
 800be7a:	b570      	push	{r4, r5, r6, lr}
 800be7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800be7e:	4606      	mov	r6, r0
 800be80:	460d      	mov	r5, r1
 800be82:	b93c      	cbnz	r4, 800be94 <_Bfree+0x1a>
 800be84:	2010      	movs	r0, #16
 800be86:	f7ff ffb1 	bl	800bdec <malloc>
 800be8a:	6270      	str	r0, [r6, #36]	; 0x24
 800be8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be90:	6004      	str	r4, [r0, #0]
 800be92:	60c4      	str	r4, [r0, #12]
 800be94:	b13d      	cbz	r5, 800bea6 <_Bfree+0x2c>
 800be96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800be98:	686a      	ldr	r2, [r5, #4]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bea0:	6029      	str	r1, [r5, #0]
 800bea2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bea6:	bd70      	pop	{r4, r5, r6, pc}

0800bea8 <__multadd>:
 800bea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beac:	690d      	ldr	r5, [r1, #16]
 800beae:	461f      	mov	r7, r3
 800beb0:	4606      	mov	r6, r0
 800beb2:	460c      	mov	r4, r1
 800beb4:	f101 0c14 	add.w	ip, r1, #20
 800beb8:	2300      	movs	r3, #0
 800beba:	f8dc 0000 	ldr.w	r0, [ip]
 800bebe:	b281      	uxth	r1, r0
 800bec0:	fb02 7101 	mla	r1, r2, r1, r7
 800bec4:	0c0f      	lsrs	r7, r1, #16
 800bec6:	0c00      	lsrs	r0, r0, #16
 800bec8:	fb02 7000 	mla	r0, r2, r0, r7
 800becc:	b289      	uxth	r1, r1
 800bece:	3301      	adds	r3, #1
 800bed0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bed4:	429d      	cmp	r5, r3
 800bed6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800beda:	f84c 1b04 	str.w	r1, [ip], #4
 800bede:	dcec      	bgt.n	800beba <__multadd+0x12>
 800bee0:	b1d7      	cbz	r7, 800bf18 <__multadd+0x70>
 800bee2:	68a3      	ldr	r3, [r4, #8]
 800bee4:	42ab      	cmp	r3, r5
 800bee6:	dc12      	bgt.n	800bf0e <__multadd+0x66>
 800bee8:	6861      	ldr	r1, [r4, #4]
 800beea:	4630      	mov	r0, r6
 800beec:	3101      	adds	r1, #1
 800beee:	f7ff ff90 	bl	800be12 <_Balloc>
 800bef2:	6922      	ldr	r2, [r4, #16]
 800bef4:	3202      	adds	r2, #2
 800bef6:	f104 010c 	add.w	r1, r4, #12
 800befa:	4680      	mov	r8, r0
 800befc:	0092      	lsls	r2, r2, #2
 800befe:	300c      	adds	r0, #12
 800bf00:	f7ff ff7c 	bl	800bdfc <memcpy>
 800bf04:	4621      	mov	r1, r4
 800bf06:	4630      	mov	r0, r6
 800bf08:	f7ff ffb7 	bl	800be7a <_Bfree>
 800bf0c:	4644      	mov	r4, r8
 800bf0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf12:	3501      	adds	r5, #1
 800bf14:	615f      	str	r7, [r3, #20]
 800bf16:	6125      	str	r5, [r4, #16]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf1e <__hi0bits>:
 800bf1e:	0c02      	lsrs	r2, r0, #16
 800bf20:	0412      	lsls	r2, r2, #16
 800bf22:	4603      	mov	r3, r0
 800bf24:	b9b2      	cbnz	r2, 800bf54 <__hi0bits+0x36>
 800bf26:	0403      	lsls	r3, r0, #16
 800bf28:	2010      	movs	r0, #16
 800bf2a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bf2e:	bf04      	itt	eq
 800bf30:	021b      	lsleq	r3, r3, #8
 800bf32:	3008      	addeq	r0, #8
 800bf34:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bf38:	bf04      	itt	eq
 800bf3a:	011b      	lsleq	r3, r3, #4
 800bf3c:	3004      	addeq	r0, #4
 800bf3e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bf42:	bf04      	itt	eq
 800bf44:	009b      	lsleq	r3, r3, #2
 800bf46:	3002      	addeq	r0, #2
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	db06      	blt.n	800bf5a <__hi0bits+0x3c>
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	d503      	bpl.n	800bf58 <__hi0bits+0x3a>
 800bf50:	3001      	adds	r0, #1
 800bf52:	4770      	bx	lr
 800bf54:	2000      	movs	r0, #0
 800bf56:	e7e8      	b.n	800bf2a <__hi0bits+0xc>
 800bf58:	2020      	movs	r0, #32
 800bf5a:	4770      	bx	lr

0800bf5c <__lo0bits>:
 800bf5c:	6803      	ldr	r3, [r0, #0]
 800bf5e:	f013 0207 	ands.w	r2, r3, #7
 800bf62:	4601      	mov	r1, r0
 800bf64:	d00b      	beq.n	800bf7e <__lo0bits+0x22>
 800bf66:	07da      	lsls	r2, r3, #31
 800bf68:	d423      	bmi.n	800bfb2 <__lo0bits+0x56>
 800bf6a:	0798      	lsls	r0, r3, #30
 800bf6c:	bf49      	itett	mi
 800bf6e:	085b      	lsrmi	r3, r3, #1
 800bf70:	089b      	lsrpl	r3, r3, #2
 800bf72:	2001      	movmi	r0, #1
 800bf74:	600b      	strmi	r3, [r1, #0]
 800bf76:	bf5c      	itt	pl
 800bf78:	600b      	strpl	r3, [r1, #0]
 800bf7a:	2002      	movpl	r0, #2
 800bf7c:	4770      	bx	lr
 800bf7e:	b298      	uxth	r0, r3
 800bf80:	b9a8      	cbnz	r0, 800bfae <__lo0bits+0x52>
 800bf82:	0c1b      	lsrs	r3, r3, #16
 800bf84:	2010      	movs	r0, #16
 800bf86:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf8a:	bf04      	itt	eq
 800bf8c:	0a1b      	lsreq	r3, r3, #8
 800bf8e:	3008      	addeq	r0, #8
 800bf90:	071a      	lsls	r2, r3, #28
 800bf92:	bf04      	itt	eq
 800bf94:	091b      	lsreq	r3, r3, #4
 800bf96:	3004      	addeq	r0, #4
 800bf98:	079a      	lsls	r2, r3, #30
 800bf9a:	bf04      	itt	eq
 800bf9c:	089b      	lsreq	r3, r3, #2
 800bf9e:	3002      	addeq	r0, #2
 800bfa0:	07da      	lsls	r2, r3, #31
 800bfa2:	d402      	bmi.n	800bfaa <__lo0bits+0x4e>
 800bfa4:	085b      	lsrs	r3, r3, #1
 800bfa6:	d006      	beq.n	800bfb6 <__lo0bits+0x5a>
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	600b      	str	r3, [r1, #0]
 800bfac:	4770      	bx	lr
 800bfae:	4610      	mov	r0, r2
 800bfb0:	e7e9      	b.n	800bf86 <__lo0bits+0x2a>
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	4770      	bx	lr
 800bfb6:	2020      	movs	r0, #32
 800bfb8:	4770      	bx	lr

0800bfba <__i2b>:
 800bfba:	b510      	push	{r4, lr}
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	f7ff ff27 	bl	800be12 <_Balloc>
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	6144      	str	r4, [r0, #20]
 800bfc8:	6102      	str	r2, [r0, #16]
 800bfca:	bd10      	pop	{r4, pc}

0800bfcc <__multiply>:
 800bfcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	4614      	mov	r4, r2
 800bfd2:	690a      	ldr	r2, [r1, #16]
 800bfd4:	6923      	ldr	r3, [r4, #16]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	bfb8      	it	lt
 800bfda:	460b      	movlt	r3, r1
 800bfdc:	4688      	mov	r8, r1
 800bfde:	bfbc      	itt	lt
 800bfe0:	46a0      	movlt	r8, r4
 800bfe2:	461c      	movlt	r4, r3
 800bfe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfe8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bfec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bff0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bff4:	eb07 0609 	add.w	r6, r7, r9
 800bff8:	42b3      	cmp	r3, r6
 800bffa:	bfb8      	it	lt
 800bffc:	3101      	addlt	r1, #1
 800bffe:	f7ff ff08 	bl	800be12 <_Balloc>
 800c002:	f100 0514 	add.w	r5, r0, #20
 800c006:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c00a:	462b      	mov	r3, r5
 800c00c:	2200      	movs	r2, #0
 800c00e:	4573      	cmp	r3, lr
 800c010:	d316      	bcc.n	800c040 <__multiply+0x74>
 800c012:	f104 0214 	add.w	r2, r4, #20
 800c016:	f108 0114 	add.w	r1, r8, #20
 800c01a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c01e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	9b00      	ldr	r3, [sp, #0]
 800c026:	9201      	str	r2, [sp, #4]
 800c028:	4293      	cmp	r3, r2
 800c02a:	d80c      	bhi.n	800c046 <__multiply+0x7a>
 800c02c:	2e00      	cmp	r6, #0
 800c02e:	dd03      	ble.n	800c038 <__multiply+0x6c>
 800c030:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c034:	2b00      	cmp	r3, #0
 800c036:	d05d      	beq.n	800c0f4 <__multiply+0x128>
 800c038:	6106      	str	r6, [r0, #16]
 800c03a:	b003      	add	sp, #12
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	f843 2b04 	str.w	r2, [r3], #4
 800c044:	e7e3      	b.n	800c00e <__multiply+0x42>
 800c046:	f8b2 b000 	ldrh.w	fp, [r2]
 800c04a:	f1bb 0f00 	cmp.w	fp, #0
 800c04e:	d023      	beq.n	800c098 <__multiply+0xcc>
 800c050:	4689      	mov	r9, r1
 800c052:	46ac      	mov	ip, r5
 800c054:	f04f 0800 	mov.w	r8, #0
 800c058:	f859 4b04 	ldr.w	r4, [r9], #4
 800c05c:	f8dc a000 	ldr.w	sl, [ip]
 800c060:	b2a3      	uxth	r3, r4
 800c062:	fa1f fa8a 	uxth.w	sl, sl
 800c066:	fb0b a303 	mla	r3, fp, r3, sl
 800c06a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c06e:	f8dc 4000 	ldr.w	r4, [ip]
 800c072:	4443      	add	r3, r8
 800c074:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c078:	fb0b 840a 	mla	r4, fp, sl, r8
 800c07c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c080:	46e2      	mov	sl, ip
 800c082:	b29b      	uxth	r3, r3
 800c084:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c088:	454f      	cmp	r7, r9
 800c08a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c08e:	f84a 3b04 	str.w	r3, [sl], #4
 800c092:	d82b      	bhi.n	800c0ec <__multiply+0x120>
 800c094:	f8cc 8004 	str.w	r8, [ip, #4]
 800c098:	9b01      	ldr	r3, [sp, #4]
 800c09a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c09e:	3204      	adds	r2, #4
 800c0a0:	f1ba 0f00 	cmp.w	sl, #0
 800c0a4:	d020      	beq.n	800c0e8 <__multiply+0x11c>
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	4689      	mov	r9, r1
 800c0aa:	46a8      	mov	r8, r5
 800c0ac:	f04f 0b00 	mov.w	fp, #0
 800c0b0:	f8b9 c000 	ldrh.w	ip, [r9]
 800c0b4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c0b8:	fb0a 440c 	mla	r4, sl, ip, r4
 800c0bc:	445c      	add	r4, fp
 800c0be:	46c4      	mov	ip, r8
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c0c6:	f84c 3b04 	str.w	r3, [ip], #4
 800c0ca:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0ce:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c0d2:	0c1b      	lsrs	r3, r3, #16
 800c0d4:	fb0a b303 	mla	r3, sl, r3, fp
 800c0d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c0dc:	454f      	cmp	r7, r9
 800c0de:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c0e2:	d805      	bhi.n	800c0f0 <__multiply+0x124>
 800c0e4:	f8c8 3004 	str.w	r3, [r8, #4]
 800c0e8:	3504      	adds	r5, #4
 800c0ea:	e79b      	b.n	800c024 <__multiply+0x58>
 800c0ec:	46d4      	mov	ip, sl
 800c0ee:	e7b3      	b.n	800c058 <__multiply+0x8c>
 800c0f0:	46e0      	mov	r8, ip
 800c0f2:	e7dd      	b.n	800c0b0 <__multiply+0xe4>
 800c0f4:	3e01      	subs	r6, #1
 800c0f6:	e799      	b.n	800c02c <__multiply+0x60>

0800c0f8 <__pow5mult>:
 800c0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0fc:	4615      	mov	r5, r2
 800c0fe:	f012 0203 	ands.w	r2, r2, #3
 800c102:	4606      	mov	r6, r0
 800c104:	460f      	mov	r7, r1
 800c106:	d007      	beq.n	800c118 <__pow5mult+0x20>
 800c108:	3a01      	subs	r2, #1
 800c10a:	4c21      	ldr	r4, [pc, #132]	; (800c190 <__pow5mult+0x98>)
 800c10c:	2300      	movs	r3, #0
 800c10e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c112:	f7ff fec9 	bl	800bea8 <__multadd>
 800c116:	4607      	mov	r7, r0
 800c118:	10ad      	asrs	r5, r5, #2
 800c11a:	d035      	beq.n	800c188 <__pow5mult+0x90>
 800c11c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c11e:	b93c      	cbnz	r4, 800c130 <__pow5mult+0x38>
 800c120:	2010      	movs	r0, #16
 800c122:	f7ff fe63 	bl	800bdec <malloc>
 800c126:	6270      	str	r0, [r6, #36]	; 0x24
 800c128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c12c:	6004      	str	r4, [r0, #0]
 800c12e:	60c4      	str	r4, [r0, #12]
 800c130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c138:	b94c      	cbnz	r4, 800c14e <__pow5mult+0x56>
 800c13a:	f240 2171 	movw	r1, #625	; 0x271
 800c13e:	4630      	mov	r0, r6
 800c140:	f7ff ff3b 	bl	800bfba <__i2b>
 800c144:	2300      	movs	r3, #0
 800c146:	f8c8 0008 	str.w	r0, [r8, #8]
 800c14a:	4604      	mov	r4, r0
 800c14c:	6003      	str	r3, [r0, #0]
 800c14e:	f04f 0800 	mov.w	r8, #0
 800c152:	07eb      	lsls	r3, r5, #31
 800c154:	d50a      	bpl.n	800c16c <__pow5mult+0x74>
 800c156:	4639      	mov	r1, r7
 800c158:	4622      	mov	r2, r4
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff ff36 	bl	800bfcc <__multiply>
 800c160:	4639      	mov	r1, r7
 800c162:	4681      	mov	r9, r0
 800c164:	4630      	mov	r0, r6
 800c166:	f7ff fe88 	bl	800be7a <_Bfree>
 800c16a:	464f      	mov	r7, r9
 800c16c:	106d      	asrs	r5, r5, #1
 800c16e:	d00b      	beq.n	800c188 <__pow5mult+0x90>
 800c170:	6820      	ldr	r0, [r4, #0]
 800c172:	b938      	cbnz	r0, 800c184 <__pow5mult+0x8c>
 800c174:	4622      	mov	r2, r4
 800c176:	4621      	mov	r1, r4
 800c178:	4630      	mov	r0, r6
 800c17a:	f7ff ff27 	bl	800bfcc <__multiply>
 800c17e:	6020      	str	r0, [r4, #0]
 800c180:	f8c0 8000 	str.w	r8, [r0]
 800c184:	4604      	mov	r4, r0
 800c186:	e7e4      	b.n	800c152 <__pow5mult+0x5a>
 800c188:	4638      	mov	r0, r7
 800c18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18e:	bf00      	nop
 800c190:	080127d8 	.word	0x080127d8

0800c194 <__lshift>:
 800c194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c198:	460c      	mov	r4, r1
 800c19a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c19e:	6923      	ldr	r3, [r4, #16]
 800c1a0:	6849      	ldr	r1, [r1, #4]
 800c1a2:	eb0a 0903 	add.w	r9, sl, r3
 800c1a6:	68a3      	ldr	r3, [r4, #8]
 800c1a8:	4607      	mov	r7, r0
 800c1aa:	4616      	mov	r6, r2
 800c1ac:	f109 0501 	add.w	r5, r9, #1
 800c1b0:	42ab      	cmp	r3, r5
 800c1b2:	db32      	blt.n	800c21a <__lshift+0x86>
 800c1b4:	4638      	mov	r0, r7
 800c1b6:	f7ff fe2c 	bl	800be12 <_Balloc>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4680      	mov	r8, r0
 800c1be:	f100 0114 	add.w	r1, r0, #20
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	4553      	cmp	r3, sl
 800c1c6:	db2b      	blt.n	800c220 <__lshift+0x8c>
 800c1c8:	6920      	ldr	r0, [r4, #16]
 800c1ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1ce:	f104 0314 	add.w	r3, r4, #20
 800c1d2:	f016 021f 	ands.w	r2, r6, #31
 800c1d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1de:	d025      	beq.n	800c22c <__lshift+0x98>
 800c1e0:	f1c2 0e20 	rsb	lr, r2, #32
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	681e      	ldr	r6, [r3, #0]
 800c1e8:	468a      	mov	sl, r1
 800c1ea:	4096      	lsls	r6, r2
 800c1ec:	4330      	orrs	r0, r6
 800c1ee:	f84a 0b04 	str.w	r0, [sl], #4
 800c1f2:	f853 0b04 	ldr.w	r0, [r3], #4
 800c1f6:	459c      	cmp	ip, r3
 800c1f8:	fa20 f00e 	lsr.w	r0, r0, lr
 800c1fc:	d814      	bhi.n	800c228 <__lshift+0x94>
 800c1fe:	6048      	str	r0, [r1, #4]
 800c200:	b108      	cbz	r0, 800c206 <__lshift+0x72>
 800c202:	f109 0502 	add.w	r5, r9, #2
 800c206:	3d01      	subs	r5, #1
 800c208:	4638      	mov	r0, r7
 800c20a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c20e:	4621      	mov	r1, r4
 800c210:	f7ff fe33 	bl	800be7a <_Bfree>
 800c214:	4640      	mov	r0, r8
 800c216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c21a:	3101      	adds	r1, #1
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	e7c7      	b.n	800c1b0 <__lshift+0x1c>
 800c220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c224:	3301      	adds	r3, #1
 800c226:	e7cd      	b.n	800c1c4 <__lshift+0x30>
 800c228:	4651      	mov	r1, sl
 800c22a:	e7dc      	b.n	800c1e6 <__lshift+0x52>
 800c22c:	3904      	subs	r1, #4
 800c22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c232:	f841 2f04 	str.w	r2, [r1, #4]!
 800c236:	459c      	cmp	ip, r3
 800c238:	d8f9      	bhi.n	800c22e <__lshift+0x9a>
 800c23a:	e7e4      	b.n	800c206 <__lshift+0x72>

0800c23c <__mcmp>:
 800c23c:	6903      	ldr	r3, [r0, #16]
 800c23e:	690a      	ldr	r2, [r1, #16]
 800c240:	1a9b      	subs	r3, r3, r2
 800c242:	b530      	push	{r4, r5, lr}
 800c244:	d10c      	bne.n	800c260 <__mcmp+0x24>
 800c246:	0092      	lsls	r2, r2, #2
 800c248:	3014      	adds	r0, #20
 800c24a:	3114      	adds	r1, #20
 800c24c:	1884      	adds	r4, r0, r2
 800c24e:	4411      	add	r1, r2
 800c250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c258:	4295      	cmp	r5, r2
 800c25a:	d003      	beq.n	800c264 <__mcmp+0x28>
 800c25c:	d305      	bcc.n	800c26a <__mcmp+0x2e>
 800c25e:	2301      	movs	r3, #1
 800c260:	4618      	mov	r0, r3
 800c262:	bd30      	pop	{r4, r5, pc}
 800c264:	42a0      	cmp	r0, r4
 800c266:	d3f3      	bcc.n	800c250 <__mcmp+0x14>
 800c268:	e7fa      	b.n	800c260 <__mcmp+0x24>
 800c26a:	f04f 33ff 	mov.w	r3, #4294967295
 800c26e:	e7f7      	b.n	800c260 <__mcmp+0x24>

0800c270 <__mdiff>:
 800c270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c274:	460d      	mov	r5, r1
 800c276:	4607      	mov	r7, r0
 800c278:	4611      	mov	r1, r2
 800c27a:	4628      	mov	r0, r5
 800c27c:	4614      	mov	r4, r2
 800c27e:	f7ff ffdd 	bl	800c23c <__mcmp>
 800c282:	1e06      	subs	r6, r0, #0
 800c284:	d108      	bne.n	800c298 <__mdiff+0x28>
 800c286:	4631      	mov	r1, r6
 800c288:	4638      	mov	r0, r7
 800c28a:	f7ff fdc2 	bl	800be12 <_Balloc>
 800c28e:	2301      	movs	r3, #1
 800c290:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c298:	bfa4      	itt	ge
 800c29a:	4623      	movge	r3, r4
 800c29c:	462c      	movge	r4, r5
 800c29e:	4638      	mov	r0, r7
 800c2a0:	6861      	ldr	r1, [r4, #4]
 800c2a2:	bfa6      	itte	ge
 800c2a4:	461d      	movge	r5, r3
 800c2a6:	2600      	movge	r6, #0
 800c2a8:	2601      	movlt	r6, #1
 800c2aa:	f7ff fdb2 	bl	800be12 <_Balloc>
 800c2ae:	692b      	ldr	r3, [r5, #16]
 800c2b0:	60c6      	str	r6, [r0, #12]
 800c2b2:	6926      	ldr	r6, [r4, #16]
 800c2b4:	f105 0914 	add.w	r9, r5, #20
 800c2b8:	f104 0214 	add.w	r2, r4, #20
 800c2bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c2c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c2c4:	f100 0514 	add.w	r5, r0, #20
 800c2c8:	f04f 0e00 	mov.w	lr, #0
 800c2cc:	f852 ab04 	ldr.w	sl, [r2], #4
 800c2d0:	f859 4b04 	ldr.w	r4, [r9], #4
 800c2d4:	fa1e f18a 	uxtah	r1, lr, sl
 800c2d8:	b2a3      	uxth	r3, r4
 800c2da:	1ac9      	subs	r1, r1, r3
 800c2dc:	0c23      	lsrs	r3, r4, #16
 800c2de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c2e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c2e6:	b289      	uxth	r1, r1
 800c2e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c2ec:	45c8      	cmp	r8, r9
 800c2ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c2f2:	4694      	mov	ip, r2
 800c2f4:	f845 3b04 	str.w	r3, [r5], #4
 800c2f8:	d8e8      	bhi.n	800c2cc <__mdiff+0x5c>
 800c2fa:	45bc      	cmp	ip, r7
 800c2fc:	d304      	bcc.n	800c308 <__mdiff+0x98>
 800c2fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c302:	b183      	cbz	r3, 800c326 <__mdiff+0xb6>
 800c304:	6106      	str	r6, [r0, #16]
 800c306:	e7c5      	b.n	800c294 <__mdiff+0x24>
 800c308:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c30c:	fa1e f381 	uxtah	r3, lr, r1
 800c310:	141a      	asrs	r2, r3, #16
 800c312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c316:	b29b      	uxth	r3, r3
 800c318:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c31c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c320:	f845 3b04 	str.w	r3, [r5], #4
 800c324:	e7e9      	b.n	800c2fa <__mdiff+0x8a>
 800c326:	3e01      	subs	r6, #1
 800c328:	e7e9      	b.n	800c2fe <__mdiff+0x8e>

0800c32a <__d2b>:
 800c32a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c32e:	460e      	mov	r6, r1
 800c330:	2101      	movs	r1, #1
 800c332:	ec59 8b10 	vmov	r8, r9, d0
 800c336:	4615      	mov	r5, r2
 800c338:	f7ff fd6b 	bl	800be12 <_Balloc>
 800c33c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c340:	4607      	mov	r7, r0
 800c342:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c346:	bb34      	cbnz	r4, 800c396 <__d2b+0x6c>
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	f1b8 0300 	subs.w	r3, r8, #0
 800c34e:	d027      	beq.n	800c3a0 <__d2b+0x76>
 800c350:	a802      	add	r0, sp, #8
 800c352:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c356:	f7ff fe01 	bl	800bf5c <__lo0bits>
 800c35a:	9900      	ldr	r1, [sp, #0]
 800c35c:	b1f0      	cbz	r0, 800c39c <__d2b+0x72>
 800c35e:	9a01      	ldr	r2, [sp, #4]
 800c360:	f1c0 0320 	rsb	r3, r0, #32
 800c364:	fa02 f303 	lsl.w	r3, r2, r3
 800c368:	430b      	orrs	r3, r1
 800c36a:	40c2      	lsrs	r2, r0
 800c36c:	617b      	str	r3, [r7, #20]
 800c36e:	9201      	str	r2, [sp, #4]
 800c370:	9b01      	ldr	r3, [sp, #4]
 800c372:	61bb      	str	r3, [r7, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	bf14      	ite	ne
 800c378:	2102      	movne	r1, #2
 800c37a:	2101      	moveq	r1, #1
 800c37c:	6139      	str	r1, [r7, #16]
 800c37e:	b1c4      	cbz	r4, 800c3b2 <__d2b+0x88>
 800c380:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c384:	4404      	add	r4, r0
 800c386:	6034      	str	r4, [r6, #0]
 800c388:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c38c:	6028      	str	r0, [r5, #0]
 800c38e:	4638      	mov	r0, r7
 800c390:	b003      	add	sp, #12
 800c392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c39a:	e7d5      	b.n	800c348 <__d2b+0x1e>
 800c39c:	6179      	str	r1, [r7, #20]
 800c39e:	e7e7      	b.n	800c370 <__d2b+0x46>
 800c3a0:	a801      	add	r0, sp, #4
 800c3a2:	f7ff fddb 	bl	800bf5c <__lo0bits>
 800c3a6:	9b01      	ldr	r3, [sp, #4]
 800c3a8:	617b      	str	r3, [r7, #20]
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	6139      	str	r1, [r7, #16]
 800c3ae:	3020      	adds	r0, #32
 800c3b0:	e7e5      	b.n	800c37e <__d2b+0x54>
 800c3b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c3b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3ba:	6030      	str	r0, [r6, #0]
 800c3bc:	6918      	ldr	r0, [r3, #16]
 800c3be:	f7ff fdae 	bl	800bf1e <__hi0bits>
 800c3c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c3c6:	e7e1      	b.n	800c38c <__d2b+0x62>

0800c3c8 <_calloc_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	fb02 f401 	mul.w	r4, r2, r1
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	f000 f808 	bl	800c3e4 <_malloc_r>
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	b118      	cbz	r0, 800c3e0 <_calloc_r+0x18>
 800c3d8:	4622      	mov	r2, r4
 800c3da:	2100      	movs	r1, #0
 800c3dc:	f7fe fb62 	bl	800aaa4 <memset>
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}

0800c3e4 <_malloc_r>:
 800c3e4:	b570      	push	{r4, r5, r6, lr}
 800c3e6:	1ccd      	adds	r5, r1, #3
 800c3e8:	f025 0503 	bic.w	r5, r5, #3
 800c3ec:	3508      	adds	r5, #8
 800c3ee:	2d0c      	cmp	r5, #12
 800c3f0:	bf38      	it	cc
 800c3f2:	250c      	movcc	r5, #12
 800c3f4:	2d00      	cmp	r5, #0
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	db01      	blt.n	800c3fe <_malloc_r+0x1a>
 800c3fa:	42a9      	cmp	r1, r5
 800c3fc:	d903      	bls.n	800c406 <_malloc_r+0x22>
 800c3fe:	230c      	movs	r3, #12
 800c400:	6033      	str	r3, [r6, #0]
 800c402:	2000      	movs	r0, #0
 800c404:	bd70      	pop	{r4, r5, r6, pc}
 800c406:	f000 f869 	bl	800c4dc <__malloc_lock>
 800c40a:	4a21      	ldr	r2, [pc, #132]	; (800c490 <_malloc_r+0xac>)
 800c40c:	6814      	ldr	r4, [r2, #0]
 800c40e:	4621      	mov	r1, r4
 800c410:	b991      	cbnz	r1, 800c438 <_malloc_r+0x54>
 800c412:	4c20      	ldr	r4, [pc, #128]	; (800c494 <_malloc_r+0xb0>)
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	b91b      	cbnz	r3, 800c420 <_malloc_r+0x3c>
 800c418:	4630      	mov	r0, r6
 800c41a:	f000 f83d 	bl	800c498 <_sbrk_r>
 800c41e:	6020      	str	r0, [r4, #0]
 800c420:	4629      	mov	r1, r5
 800c422:	4630      	mov	r0, r6
 800c424:	f000 f838 	bl	800c498 <_sbrk_r>
 800c428:	1c43      	adds	r3, r0, #1
 800c42a:	d124      	bne.n	800c476 <_malloc_r+0x92>
 800c42c:	230c      	movs	r3, #12
 800c42e:	6033      	str	r3, [r6, #0]
 800c430:	4630      	mov	r0, r6
 800c432:	f000 f854 	bl	800c4de <__malloc_unlock>
 800c436:	e7e4      	b.n	800c402 <_malloc_r+0x1e>
 800c438:	680b      	ldr	r3, [r1, #0]
 800c43a:	1b5b      	subs	r3, r3, r5
 800c43c:	d418      	bmi.n	800c470 <_malloc_r+0x8c>
 800c43e:	2b0b      	cmp	r3, #11
 800c440:	d90f      	bls.n	800c462 <_malloc_r+0x7e>
 800c442:	600b      	str	r3, [r1, #0]
 800c444:	50cd      	str	r5, [r1, r3]
 800c446:	18cc      	adds	r4, r1, r3
 800c448:	4630      	mov	r0, r6
 800c44a:	f000 f848 	bl	800c4de <__malloc_unlock>
 800c44e:	f104 000b 	add.w	r0, r4, #11
 800c452:	1d23      	adds	r3, r4, #4
 800c454:	f020 0007 	bic.w	r0, r0, #7
 800c458:	1ac3      	subs	r3, r0, r3
 800c45a:	d0d3      	beq.n	800c404 <_malloc_r+0x20>
 800c45c:	425a      	negs	r2, r3
 800c45e:	50e2      	str	r2, [r4, r3]
 800c460:	e7d0      	b.n	800c404 <_malloc_r+0x20>
 800c462:	428c      	cmp	r4, r1
 800c464:	684b      	ldr	r3, [r1, #4]
 800c466:	bf16      	itet	ne
 800c468:	6063      	strne	r3, [r4, #4]
 800c46a:	6013      	streq	r3, [r2, #0]
 800c46c:	460c      	movne	r4, r1
 800c46e:	e7eb      	b.n	800c448 <_malloc_r+0x64>
 800c470:	460c      	mov	r4, r1
 800c472:	6849      	ldr	r1, [r1, #4]
 800c474:	e7cc      	b.n	800c410 <_malloc_r+0x2c>
 800c476:	1cc4      	adds	r4, r0, #3
 800c478:	f024 0403 	bic.w	r4, r4, #3
 800c47c:	42a0      	cmp	r0, r4
 800c47e:	d005      	beq.n	800c48c <_malloc_r+0xa8>
 800c480:	1a21      	subs	r1, r4, r0
 800c482:	4630      	mov	r0, r6
 800c484:	f000 f808 	bl	800c498 <_sbrk_r>
 800c488:	3001      	adds	r0, #1
 800c48a:	d0cf      	beq.n	800c42c <_malloc_r+0x48>
 800c48c:	6025      	str	r5, [r4, #0]
 800c48e:	e7db      	b.n	800c448 <_malloc_r+0x64>
 800c490:	2000023c 	.word	0x2000023c
 800c494:	20000240 	.word	0x20000240

0800c498 <_sbrk_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4c06      	ldr	r4, [pc, #24]	; (800c4b4 <_sbrk_r+0x1c>)
 800c49c:	2300      	movs	r3, #0
 800c49e:	4605      	mov	r5, r0
 800c4a0:	4608      	mov	r0, r1
 800c4a2:	6023      	str	r3, [r4, #0]
 800c4a4:	f7fa fa98 	bl	80069d8 <_sbrk>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_sbrk_r+0x1a>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_sbrk_r+0x1a>
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	2001ac40 	.word	0x2001ac40

0800c4b8 <__ascii_mbtowc>:
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	b901      	cbnz	r1, 800c4be <__ascii_mbtowc+0x6>
 800c4bc:	a901      	add	r1, sp, #4
 800c4be:	b142      	cbz	r2, 800c4d2 <__ascii_mbtowc+0x1a>
 800c4c0:	b14b      	cbz	r3, 800c4d6 <__ascii_mbtowc+0x1e>
 800c4c2:	7813      	ldrb	r3, [r2, #0]
 800c4c4:	600b      	str	r3, [r1, #0]
 800c4c6:	7812      	ldrb	r2, [r2, #0]
 800c4c8:	1c10      	adds	r0, r2, #0
 800c4ca:	bf18      	it	ne
 800c4cc:	2001      	movne	r0, #1
 800c4ce:	b002      	add	sp, #8
 800c4d0:	4770      	bx	lr
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	e7fb      	b.n	800c4ce <__ascii_mbtowc+0x16>
 800c4d6:	f06f 0001 	mvn.w	r0, #1
 800c4da:	e7f8      	b.n	800c4ce <__ascii_mbtowc+0x16>

0800c4dc <__malloc_lock>:
 800c4dc:	4770      	bx	lr

0800c4de <__malloc_unlock>:
 800c4de:	4770      	bx	lr

0800c4e0 <__ascii_wctomb>:
 800c4e0:	b149      	cbz	r1, 800c4f6 <__ascii_wctomb+0x16>
 800c4e2:	2aff      	cmp	r2, #255	; 0xff
 800c4e4:	bf85      	ittet	hi
 800c4e6:	238a      	movhi	r3, #138	; 0x8a
 800c4e8:	6003      	strhi	r3, [r0, #0]
 800c4ea:	700a      	strbls	r2, [r1, #0]
 800c4ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4f0:	bf98      	it	ls
 800c4f2:	2001      	movls	r0, #1
 800c4f4:	4770      	bx	lr
 800c4f6:	4608      	mov	r0, r1
 800c4f8:	4770      	bx	lr
	...

0800c4fc <sqrt>:
 800c4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c500:	ed2d 8b02 	vpush	{d8}
 800c504:	b08b      	sub	sp, #44	; 0x2c
 800c506:	ec55 4b10 	vmov	r4, r5, d0
 800c50a:	f000 f8a1 	bl	800c650 <__ieee754_sqrt>
 800c50e:	4b26      	ldr	r3, [pc, #152]	; (800c5a8 <sqrt+0xac>)
 800c510:	eeb0 8a40 	vmov.f32	s16, s0
 800c514:	eef0 8a60 	vmov.f32	s17, s1
 800c518:	f993 6000 	ldrsb.w	r6, [r3]
 800c51c:	1c73      	adds	r3, r6, #1
 800c51e:	d02a      	beq.n	800c576 <sqrt+0x7a>
 800c520:	4622      	mov	r2, r4
 800c522:	462b      	mov	r3, r5
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 fb20 	bl	8000b6c <__aeabi_dcmpun>
 800c52c:	4607      	mov	r7, r0
 800c52e:	bb10      	cbnz	r0, 800c576 <sqrt+0x7a>
 800c530:	f04f 0800 	mov.w	r8, #0
 800c534:	f04f 0900 	mov.w	r9, #0
 800c538:	4642      	mov	r2, r8
 800c53a:	464b      	mov	r3, r9
 800c53c:	4620      	mov	r0, r4
 800c53e:	4629      	mov	r1, r5
 800c540:	f7f4 faec 	bl	8000b1c <__aeabi_dcmplt>
 800c544:	b1b8      	cbz	r0, 800c576 <sqrt+0x7a>
 800c546:	2301      	movs	r3, #1
 800c548:	9300      	str	r3, [sp, #0]
 800c54a:	4b18      	ldr	r3, [pc, #96]	; (800c5ac <sqrt+0xb0>)
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	9708      	str	r7, [sp, #32]
 800c550:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c554:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c558:	b9b6      	cbnz	r6, 800c588 <sqrt+0x8c>
 800c55a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c55e:	4668      	mov	r0, sp
 800c560:	f000 f929 	bl	800c7b6 <matherr>
 800c564:	b1d0      	cbz	r0, 800c59c <sqrt+0xa0>
 800c566:	9b08      	ldr	r3, [sp, #32]
 800c568:	b11b      	cbz	r3, 800c572 <sqrt+0x76>
 800c56a:	f7fe fa71 	bl	800aa50 <__errno>
 800c56e:	9b08      	ldr	r3, [sp, #32]
 800c570:	6003      	str	r3, [r0, #0]
 800c572:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c576:	eeb0 0a48 	vmov.f32	s0, s16
 800c57a:	eef0 0a68 	vmov.f32	s1, s17
 800c57e:	b00b      	add	sp, #44	; 0x2c
 800c580:	ecbd 8b02 	vpop	{d8}
 800c584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c588:	4642      	mov	r2, r8
 800c58a:	464b      	mov	r3, r9
 800c58c:	4640      	mov	r0, r8
 800c58e:	4649      	mov	r1, r9
 800c590:	f7f4 f97c 	bl	800088c <__aeabi_ddiv>
 800c594:	2e02      	cmp	r6, #2
 800c596:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c59a:	d1e0      	bne.n	800c55e <sqrt+0x62>
 800c59c:	f7fe fa58 	bl	800aa50 <__errno>
 800c5a0:	2321      	movs	r3, #33	; 0x21
 800c5a2:	6003      	str	r3, [r0, #0]
 800c5a4:	e7df      	b.n	800c566 <sqrt+0x6a>
 800c5a6:	bf00      	nop
 800c5a8:	200001e4 	.word	0x200001e4
 800c5ac:	080128ef 	.word	0x080128ef

0800c5b0 <sqrtf>:
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	ed2d 8b02 	vpush	{d8}
 800c5b6:	b08a      	sub	sp, #40	; 0x28
 800c5b8:	eeb0 8a40 	vmov.f32	s16, s0
 800c5bc:	f000 f8f8 	bl	800c7b0 <__ieee754_sqrtf>
 800c5c0:	4b21      	ldr	r3, [pc, #132]	; (800c648 <sqrtf+0x98>)
 800c5c2:	f993 4000 	ldrsb.w	r4, [r3]
 800c5c6:	1c63      	adds	r3, r4, #1
 800c5c8:	d02c      	beq.n	800c624 <sqrtf+0x74>
 800c5ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800c5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d2:	d627      	bvs.n	800c624 <sqrtf+0x74>
 800c5d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5dc:	d522      	bpl.n	800c624 <sqrtf+0x74>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	4b1a      	ldr	r3, [pc, #104]	; (800c64c <sqrtf+0x9c>)
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	ee18 0a10 	vmov	r0, s16
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	9308      	str	r3, [sp, #32]
 800c5ee:	f7f3 ffcb 	bl	8000588 <__aeabi_f2d>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	b9ac      	cbnz	r4, 800c62c <sqrtf+0x7c>
 800c600:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c604:	4668      	mov	r0, sp
 800c606:	f000 f8d6 	bl	800c7b6 <matherr>
 800c60a:	b1b8      	cbz	r0, 800c63c <sqrtf+0x8c>
 800c60c:	9b08      	ldr	r3, [sp, #32]
 800c60e:	b11b      	cbz	r3, 800c618 <sqrtf+0x68>
 800c610:	f7fe fa1e 	bl	800aa50 <__errno>
 800c614:	9b08      	ldr	r3, [sp, #32]
 800c616:	6003      	str	r3, [r0, #0]
 800c618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c61c:	f7f4 fb04 	bl	8000c28 <__aeabi_d2f>
 800c620:	ee00 0a10 	vmov	s0, r0
 800c624:	b00a      	add	sp, #40	; 0x28
 800c626:	ecbd 8b02 	vpop	{d8}
 800c62a:	bd10      	pop	{r4, pc}
 800c62c:	4610      	mov	r0, r2
 800c62e:	4619      	mov	r1, r3
 800c630:	f7f4 f92c 	bl	800088c <__aeabi_ddiv>
 800c634:	2c02      	cmp	r4, #2
 800c636:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c63a:	d1e3      	bne.n	800c604 <sqrtf+0x54>
 800c63c:	f7fe fa08 	bl	800aa50 <__errno>
 800c640:	2321      	movs	r3, #33	; 0x21
 800c642:	6003      	str	r3, [r0, #0]
 800c644:	e7e2      	b.n	800c60c <sqrtf+0x5c>
 800c646:	bf00      	nop
 800c648:	200001e4 	.word	0x200001e4
 800c64c:	080128f4 	.word	0x080128f4

0800c650 <__ieee754_sqrt>:
 800c650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c654:	4955      	ldr	r1, [pc, #340]	; (800c7ac <__ieee754_sqrt+0x15c>)
 800c656:	ec55 4b10 	vmov	r4, r5, d0
 800c65a:	43a9      	bics	r1, r5
 800c65c:	462b      	mov	r3, r5
 800c65e:	462a      	mov	r2, r5
 800c660:	d112      	bne.n	800c688 <__ieee754_sqrt+0x38>
 800c662:	ee10 2a10 	vmov	r2, s0
 800c666:	ee10 0a10 	vmov	r0, s0
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 ffe4 	bl	8000638 <__aeabi_dmul>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	4620      	mov	r0, r4
 800c676:	4629      	mov	r1, r5
 800c678:	f7f3 fe28 	bl	80002cc <__adddf3>
 800c67c:	4604      	mov	r4, r0
 800c67e:	460d      	mov	r5, r1
 800c680:	ec45 4b10 	vmov	d0, r4, r5
 800c684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c688:	2d00      	cmp	r5, #0
 800c68a:	ee10 0a10 	vmov	r0, s0
 800c68e:	4621      	mov	r1, r4
 800c690:	dc0f      	bgt.n	800c6b2 <__ieee754_sqrt+0x62>
 800c692:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c696:	4330      	orrs	r0, r6
 800c698:	d0f2      	beq.n	800c680 <__ieee754_sqrt+0x30>
 800c69a:	b155      	cbz	r5, 800c6b2 <__ieee754_sqrt+0x62>
 800c69c:	ee10 2a10 	vmov	r2, s0
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	f7f3 fe10 	bl	80002c8 <__aeabi_dsub>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	f7f4 f8ee 	bl	800088c <__aeabi_ddiv>
 800c6b0:	e7e4      	b.n	800c67c <__ieee754_sqrt+0x2c>
 800c6b2:	151b      	asrs	r3, r3, #20
 800c6b4:	d073      	beq.n	800c79e <__ieee754_sqrt+0x14e>
 800c6b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6ba:	07dd      	lsls	r5, r3, #31
 800c6bc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c6c0:	bf48      	it	mi
 800c6c2:	0fc8      	lsrmi	r0, r1, #31
 800c6c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c6c8:	bf44      	itt	mi
 800c6ca:	0049      	lslmi	r1, r1, #1
 800c6cc:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c6d0:	2500      	movs	r5, #0
 800c6d2:	1058      	asrs	r0, r3, #1
 800c6d4:	0fcb      	lsrs	r3, r1, #31
 800c6d6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c6da:	0049      	lsls	r1, r1, #1
 800c6dc:	2316      	movs	r3, #22
 800c6de:	462c      	mov	r4, r5
 800c6e0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c6e4:	19a7      	adds	r7, r4, r6
 800c6e6:	4297      	cmp	r7, r2
 800c6e8:	bfde      	ittt	le
 800c6ea:	19bc      	addle	r4, r7, r6
 800c6ec:	1bd2      	suble	r2, r2, r7
 800c6ee:	19ad      	addle	r5, r5, r6
 800c6f0:	0fcf      	lsrs	r7, r1, #31
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c6f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c700:	d1f0      	bne.n	800c6e4 <__ieee754_sqrt+0x94>
 800c702:	f04f 0c20 	mov.w	ip, #32
 800c706:	469e      	mov	lr, r3
 800c708:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c70c:	42a2      	cmp	r2, r4
 800c70e:	eb06 070e 	add.w	r7, r6, lr
 800c712:	dc02      	bgt.n	800c71a <__ieee754_sqrt+0xca>
 800c714:	d112      	bne.n	800c73c <__ieee754_sqrt+0xec>
 800c716:	428f      	cmp	r7, r1
 800c718:	d810      	bhi.n	800c73c <__ieee754_sqrt+0xec>
 800c71a:	2f00      	cmp	r7, #0
 800c71c:	eb07 0e06 	add.w	lr, r7, r6
 800c720:	da42      	bge.n	800c7a8 <__ieee754_sqrt+0x158>
 800c722:	f1be 0f00 	cmp.w	lr, #0
 800c726:	db3f      	blt.n	800c7a8 <__ieee754_sqrt+0x158>
 800c728:	f104 0801 	add.w	r8, r4, #1
 800c72c:	1b12      	subs	r2, r2, r4
 800c72e:	428f      	cmp	r7, r1
 800c730:	bf88      	it	hi
 800c732:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c736:	1bc9      	subs	r1, r1, r7
 800c738:	4433      	add	r3, r6
 800c73a:	4644      	mov	r4, r8
 800c73c:	0052      	lsls	r2, r2, #1
 800c73e:	f1bc 0c01 	subs.w	ip, ip, #1
 800c742:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c746:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c74a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c74e:	d1dd      	bne.n	800c70c <__ieee754_sqrt+0xbc>
 800c750:	430a      	orrs	r2, r1
 800c752:	d006      	beq.n	800c762 <__ieee754_sqrt+0x112>
 800c754:	1c5c      	adds	r4, r3, #1
 800c756:	bf13      	iteet	ne
 800c758:	3301      	addne	r3, #1
 800c75a:	3501      	addeq	r5, #1
 800c75c:	4663      	moveq	r3, ip
 800c75e:	f023 0301 	bicne.w	r3, r3, #1
 800c762:	106a      	asrs	r2, r5, #1
 800c764:	085b      	lsrs	r3, r3, #1
 800c766:	07e9      	lsls	r1, r5, #31
 800c768:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c76c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c770:	bf48      	it	mi
 800c772:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c776:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c77a:	461c      	mov	r4, r3
 800c77c:	e780      	b.n	800c680 <__ieee754_sqrt+0x30>
 800c77e:	0aca      	lsrs	r2, r1, #11
 800c780:	3815      	subs	r0, #21
 800c782:	0549      	lsls	r1, r1, #21
 800c784:	2a00      	cmp	r2, #0
 800c786:	d0fa      	beq.n	800c77e <__ieee754_sqrt+0x12e>
 800c788:	02d6      	lsls	r6, r2, #11
 800c78a:	d50a      	bpl.n	800c7a2 <__ieee754_sqrt+0x152>
 800c78c:	f1c3 0420 	rsb	r4, r3, #32
 800c790:	fa21 f404 	lsr.w	r4, r1, r4
 800c794:	1e5d      	subs	r5, r3, #1
 800c796:	4099      	lsls	r1, r3
 800c798:	4322      	orrs	r2, r4
 800c79a:	1b43      	subs	r3, r0, r5
 800c79c:	e78b      	b.n	800c6b6 <__ieee754_sqrt+0x66>
 800c79e:	4618      	mov	r0, r3
 800c7a0:	e7f0      	b.n	800c784 <__ieee754_sqrt+0x134>
 800c7a2:	0052      	lsls	r2, r2, #1
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	e7ef      	b.n	800c788 <__ieee754_sqrt+0x138>
 800c7a8:	46a0      	mov	r8, r4
 800c7aa:	e7bf      	b.n	800c72c <__ieee754_sqrt+0xdc>
 800c7ac:	7ff00000 	.word	0x7ff00000

0800c7b0 <__ieee754_sqrtf>:
 800c7b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c7b4:	4770      	bx	lr

0800c7b6 <matherr>:
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	4770      	bx	lr
	...

0800c7bc <_init>:
 800c7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7be:	bf00      	nop
 800c7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7c2:	bc08      	pop	{r3}
 800c7c4:	469e      	mov	lr, r3
 800c7c6:	4770      	bx	lr

0800c7c8 <_fini>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	bf00      	nop
 800c7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ce:	bc08      	pop	{r3}
 800c7d0:	469e      	mov	lr, r3
 800c7d2:	4770      	bx	lr
