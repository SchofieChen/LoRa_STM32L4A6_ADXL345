
STM32L4A6TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000062d4  0800bd08  0800bd08  0001bd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fdc  08011fdc  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011fdc  08011fdc  00021fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fe4  08011fe4  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fe4  08011fe4  00021fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011fe8  08011fe8  00021fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08011fec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000147d8  20000200  080121e0  00030200  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  200149d8  080121e0  000349d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000237ee  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040c4  00000000  00000000  00053a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  00057ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002b6c1  00000000  00000000  00058ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001379c  00000000  00000000  000843a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00105873  00000000  00000000  00097b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0019d3b0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000fd0  00000000  00000000  0019d430  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000524c  00000000  00000000  0019e400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bcf0 	.word	0x0800bcf0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	0800bcf0 	.word	0x0800bcf0

080001f0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001f0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001f2:	2b01      	cmp	r3, #1
	IT       LS
 80001f4:	bf98      	it	ls
	BXLS     lr
 80001f6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001fc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000208:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800020e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000210:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000212:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000214:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800021e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000224:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000228:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800022c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000230:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800023a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800024c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800024e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000250:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800025a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800025c:	2b01      	cmp	r3, #1
	IT       LS
 800025e:	bf98      	it	ls
	BXLS     lr
 8000260:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000266:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000272:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000290:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000296:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800029a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800029e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002a2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002a4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ae:	4770      	bx	lr

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001052:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8001054:	edd7 7a01 	vldr	s15, [r7, #4]
 8001058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	db0a      	blt.n	8001078 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001062:	ed97 0a01 	vldr	s0, [r7, #4]
 8001066:	f00a fd3d 	bl	800bae4 <sqrtf>
 800106a:	eef0 7a40 	vmov.f32	s15, s0
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001074:	2300      	movs	r3, #0
 8001076:	e005      	b.n	8001084 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800109e:	e082      	b.n	80011a6 <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1d1a      	adds	r2, r3, #4
 80010a4:	60fa      	str	r2, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1d1a      	adds	r2, r3, #4
 80010ae:	60fa      	str	r2, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80010c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1d1a      	adds	r2, r3, #4
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	4618      	mov	r0, r3
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	f7ff ffb4 	bl	8001048 <arm_sqrt_f32>

    realIn = *pSrc++;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1d1a      	adds	r2, r3, #4
 80010e4:	60fa      	str	r2, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1d1a      	adds	r2, r3, #4
 80010ee:	60fa      	str	r2, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	edd7 6a05 	vldr	s13, [r7, #20]
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	f7ff ff94 	bl	8001048 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	1d1a      	adds	r2, r3, #4
 8001124:	60fa      	str	r2, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1d1a      	adds	r2, r3, #4
 800112e:	60fa      	str	r2, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001134:	ed97 7a06 	vldr	s14, [r7, #24]
 8001138:	edd7 7a06 	vldr	s15, [r7, #24]
 800113c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001140:	edd7 6a05 	vldr	s13, [r7, #20]
 8001144:	edd7 7a05 	vldr	s15, [r7, #20]
 8001148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1d1a      	adds	r2, r3, #4
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	eeb0 0a67 	vmov.f32	s0, s15
 800115c:	f7ff ff74 	bl	8001048 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1d1a      	adds	r2, r3, #4
 8001164:	60fa      	str	r2, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1d1a      	adds	r2, r3, #4
 800116e:	60fa      	str	r2, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001174:	ed97 7a06 	vldr	s14, [r7, #24]
 8001178:	edd7 7a06 	vldr	s15, [r7, #24]
 800117c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001180:	edd7 6a05 	vldr	s13, [r7, #20]
 8001184:	edd7 7a05 	vldr	s15, [r7, #20]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1d1a      	adds	r2, r3, #4
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	4618      	mov	r0, r3
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	f7ff ff54 	bl	8001048 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f47f af79 	bne.w	80010a0 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 80011b6:	e022      	b.n	80011fe <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1d1a      	adds	r2, r3, #4
 80011bc:	60fa      	str	r2, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1d1a      	adds	r2, r3, #4
 80011c6:	60fa      	str	r2, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80011cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80011d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80011dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1d1a      	adds	r2, r3, #4
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	f7ff ff28 	bl	8001048 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1d9      	bne.n	80011b8 <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800120c:	b480      	push	{r7}
 800120e:	b08b      	sub	sp, #44	; 0x2c
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1d1a      	adds	r2, r3, #4
 8001226:	60fa      	str	r2, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3b01      	subs	r3, #1
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8001234:	e051      	b.n	80012da <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1d1a      	adds	r2, r3, #4
 800123a:	60fa      	str	r2, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1d1a      	adds	r2, r3, #4
 8001244:	60fa      	str	r2, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800124a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800124e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	d504      	bpl.n	8001266 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	3301      	adds	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1d1a      	adds	r2, r3, #4
 800126a:	60fa      	str	r2, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8001270:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001274:	edd7 7a04 	vldr	s15, [r7, #16]
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	d504      	bpl.n	800128c <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	3302      	adds	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1d1a      	adds	r2, r3, #4
 8001290:	60fa      	str	r2, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001296:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800129a:	edd7 7a05 	vldr	s15, [r7, #20]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	d504      	bpl.n	80012b2 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	3303      	adds	r3, #3
 80012b0:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 80012b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	d504      	bpl.n	80012ce <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	3304      	adds	r3, #4
 80012cc:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	3304      	adds	r3, #4
 80012d2:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1aa      	bne.n	8001236 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80012ea:	e016      	b.n	800131a <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	60fa      	str	r2, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80012f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d505      	bpl.n	8001314 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3b01      	subs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e5      	bne.n	80012ec <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	372c      	adds	r7, #44	; 0x2c
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8001338:	b480      	push	{r7}
 800133a:	b08b      	sub	sp, #44	; 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1d1a      	adds	r2, r3, #4
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3b01      	subs	r3, #1
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8001360:	e051      	b.n	8001406 <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1d1a      	adds	r2, r3, #4
 8001366:	60fa      	str	r2, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1d1a      	adds	r2, r3, #4
 8001370:	60fa      	str	r2, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8001376:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800137a:	edd7 7a05 	vldr	s15, [r7, #20]
 800137e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	dd04      	ble.n	8001392 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3301      	adds	r3, #1
 8001390:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1d1a      	adds	r2, r3, #4
 8001396:	60fa      	str	r2, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 800139c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd04      	ble.n	80013b8 <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	3302      	adds	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1d1a      	adds	r2, r3, #4
 80013bc:	60fa      	str	r2, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 80013c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	dd04      	ble.n	80013de <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3303      	adds	r3, #3
 80013dc:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 80013de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	dd04      	ble.n	80013fa <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	3304      	adds	r3, #4
 80013f8:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	3304      	adds	r3, #4
 80013fe:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	3b01      	subs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1aa      	bne.n	8001362 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3b01      	subs	r3, #1
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8001416:	e016      	b.n	8001446 <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1d1a      	adds	r2, r3, #4
 800141c:	60fa      	str	r2, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8001422:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001426:	edd7 7a05 	vldr	s15, [r7, #20]
 800142a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	dd05      	ble.n	8001440 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	3b01      	subs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e5      	bne.n	8001418 <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001450:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	372c      	adds	r7, #44	; 0x2c
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <arm_sqrt_f32>:
  {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	ed87 0a01 	vstr	s0, [r7, #4]
 800146e:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8001470:	edd7 7a01 	vldr	s15, [r7, #4]
 8001474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	db0a      	blt.n	8001494 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 800147e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001482:	f00a fb2f 	bl	800bae4 <sqrtf>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001490:	2300      	movs	r3, #0
 8001492:	e005      	b.n	80014a0 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80014c0:	e046      	b.n	8001550 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1d1a      	adds	r2, r3, #4
 80014c6:	60fa      	str	r2, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80014d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	60fa      	str	r2, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80014f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001502:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1d1a      	adds	r2, r3, #4
 800150a:	60fa      	str	r2, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001510:	ed97 7a05 	vldr	s14, [r7, #20]
 8001514:	edd7 7a05 	vldr	s15, [r7, #20]
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1d1a      	adds	r2, r3, #4
 800152c:	60fa      	str	r2, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001532:	ed97 7a05 	vldr	s14, [r7, #20]
 8001536:	edd7 7a05 	vldr	s15, [r7, #20]
 800153a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	3b01      	subs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1b5      	bne.n	80014c2 <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800155e:	e013      	b.n	8001588 <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1d1a      	adds	r2, r3, #4
 8001564:	60fa      	str	r2, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800156a:	ed97 7a05 	vldr	s14, [r7, #20]
 800156e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	ed97 7a07 	vldr	s14, [r7, #28]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	3b01      	subs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e8      	bne.n	8001560 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001598:	ed97 7a07 	vldr	s14, [r7, #28]
 800159c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	eeb0 0a66 	vmov.f32	s0, s13
 80015a6:	f7ff ff5d 	bl	8001464 <arm_sqrt_f32>
}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b0a0      	sub	sp, #128	; 0x80
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 80015c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 80015d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015d8:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 80015da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80015e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 80015ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015f0:	4413      	add	r3, r2
 80015f2:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 80015f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015fa:	e1b6      	b.n	800196a <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8001614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800161a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8001620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8001626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 800162c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8001632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8001638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 800163e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8001644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 800164a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8001650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8001656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 800165c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001660:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	1d1a      	adds	r2, r3, #4
 8001668:	603a      	str	r2, [r7, #0]
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8001672:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001676:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	1d1a      	adds	r2, r3, #4
 800167e:	603a      	str	r2, [r7, #0]
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8001688:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800168c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	1d1a      	adds	r2, r3, #4
 8001694:	603a      	str	r2, [r7, #0]
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800169e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80016a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	1d1a      	adds	r2, r3, #4
 80016aa:	603a      	str	r2, [r7, #0]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 80016b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 80016c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80016c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 80016d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80016d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 80016e4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80016e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80016f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80016f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016fe:	1d1a      	adds	r2, r3, #4
 8001700:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001706:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800170a:	ed97 7a07 	vldr	s14, [r7, #28]
 800170e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001714:	1d1a      	adds	r2, r3, #4
 8001716:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8001720:	ed97 7a08 	vldr	s14, [r7, #32]
 8001724:	edd7 7a04 	vldr	s15, [r7, #16]
 8001728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800172a:	1d1a      	adds	r2, r3, #4
 800172c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8001736:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800173a:	edd7 7a05 	vldr	s15, [r7, #20]
 800173e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001740:	1d1a      	adds	r2, r3, #4
 8001742:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001748:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 800174c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001750:	edd7 7a06 	vldr	s15, [r7, #24]
 8001754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001758:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800175c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001760:	edd7 7a07 	vldr	s15, [r7, #28]
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800176c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001770:	edd7 7a08 	vldr	s15, [r7, #32]
 8001774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001778:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800177c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001780:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800178c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800178e:	1d1a      	adds	r2, r3, #4
 8001790:	673a      	str	r2, [r7, #112]	; 0x70
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001798:	1d1a      	adds	r2, r3, #4
 800179a:	673a      	str	r2, [r7, #112]	; 0x70
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 80017a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 80017b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017bc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 80017c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80017d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80017e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e2:	1d1a      	adds	r2, r3, #4
 80017e4:	677a      	str	r2, [r7, #116]	; 0x74
 80017e6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80017ea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80017f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017f8:	1d1a      	adds	r2, r3, #4
 80017fa:	677a      	str	r2, [r7, #116]	; 0x74
 80017fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001800:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800180c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001810:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800181c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001820:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800182c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001830:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001838:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 800183c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001840:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001848:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800184c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800184e:	1d1a      	adds	r2, r3, #4
 8001850:	67ba      	str	r2, [r7, #120]	; 0x78
 8001852:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001856:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8001862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001864:	1d1a      	adds	r2, r3, #4
 8001866:	67ba      	str	r2, [r7, #120]	; 0x78
 8001868:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800186c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8001878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800187a:	1d1a      	adds	r2, r3, #4
 800187c:	673a      	str	r2, [r7, #112]	; 0x70
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001884:	1d1a      	adds	r2, r3, #4
 8001886:	673a      	str	r2, [r7, #112]	; 0x70
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 800188c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001890:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001898:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800189c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80018a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 80018ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018b0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80018b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 80018bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018c0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 80018cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ce:	1d1a      	adds	r2, r3, #4
 80018d0:	677a      	str	r2, [r7, #116]	; 0x74
 80018d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80018d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80018da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018de:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80018e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018e4:	1d1a      	adds	r2, r3, #4
 80018e6:	677a      	str	r2, [r7, #116]	; 0x74
 80018e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 80018f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8001908:	edd7 7a05 	vldr	s15, [r7, #20]
 800190c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8001918:	edd7 7a05 	vldr	s15, [r7, #20]
 800191c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001924:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8001928:	edd7 7a04 	vldr	s15, [r7, #16]
 800192c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001934:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	67ba      	str	r2, [r7, #120]	; 0x78
 800193e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001942:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194a:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800194e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	67ba      	str	r2, [r7, #120]	; 0x78
 8001954:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001958:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800195c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001960:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 8001964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001966:	3b01      	subs	r3, #1
 8001968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800196a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f ae45 	bne.w	80015fc <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8001972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001974:	b299      	uxth	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	2302      	movs	r3, #2
 800197c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800197e:	f000 fedb 	bl	8002738 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8001982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001984:	b299      	uxth	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2302      	movs	r3, #2
 800198c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800198e:	f000 fed3 	bl	8002738 <arm_radix8_butterfly_f32>
}
 8001992:	bf00      	nop
 8001994:	3780      	adds	r7, #128	; 0x80
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b0ac      	sub	sp, #176	; 0xb0
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80019b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80019be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80019ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80019d8:	4413      	add	r3, r2
 80019da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80019e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019e6:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80019e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019ec:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80019ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019f2:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80019f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019f8:	3b04      	subs	r3, #4
 80019fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80019fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a02:	3b04      	subs	r3, #4
 8001a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a0c:	3b04      	subs	r3, #4
 8001a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8001a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001a4c:	2306      	movs	r3, #6
 8001a4e:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	ed93 7a00 	vldr	s14, [r3]
 8001a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a88:	3304      	adds	r3, #4
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a92:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001b00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b18:	3304      	adds	r3, #4
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b4e:	3304      	adds	r3, #4
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b58:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b60:	ed93 7a00 	vldr	s14, [r3]
 8001b64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	1d1a      	adds	r2, r3, #4
 8001b98:	603a      	str	r2, [r7, #0]
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	ed93 7a00 	vldr	s14, [r3]
 8001bac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bb8:	3304      	adds	r3, #4
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	1d1a      	adds	r2, r3, #4
 8001bc2:	603a      	str	r2, [r7, #0]
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bd0:	1d1a      	adds	r2, r3, #4
 8001bd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd8:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bec:	1d1a      	adds	r2, r3, #4
 8001bee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bfa:	1d1a      	adds	r2, r3, #4
 8001bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c08:	1d1a      	adds	r2, r3, #4
 8001c0a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c28:	4413      	add	r3, r2
 8001c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c36:	4413      	add	r3, r2
 8001c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c44:	4413      	add	r3, r2
 8001c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c4e:	3b02      	subs	r3, #2
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c56:	e31a      	b.n	800228e <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	ed93 7a00 	vldr	s14, [r3]
 8001c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3304      	adds	r3, #4
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c90:	3304      	adds	r3, #4
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	ed93 7a00 	vldr	s14, [r3]
 8001ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001caa:	3304      	adds	r3, #4
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	ed93 7a00 	vldr	s14, [r3]
 8001cc2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d18:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d20:	3304      	adds	r3, #4
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d32:	3304      	adds	r3, #4
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3c:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d44:	3304      	adds	r3, #4
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d56:	3304      	adds	r3, #4
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d68:	ed93 7a00 	vldr	s14, [r3]
 8001d6c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d88:	ed93 7a00 	vldr	s14, [r3]
 8001d8c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	1d1a      	adds	r2, r3, #4
 8001da0:	603a      	str	r2, [r7, #0]
 8001da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da6:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dae:	3304      	adds	r3, #4
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	1d1a      	adds	r2, r3, #4
 8001dca:	603a      	str	r2, [r7, #0]
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dd8:	3b04      	subs	r3, #4
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001de2:	3b04      	subs	r3, #4
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df4:	3b04      	subs	r3, #4
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e20:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8001e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e28:	ed93 7a00 	vldr	s14, [r3]
 8001e2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e38:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e40:	ed93 7a00 	vldr	s14, [r3]
 8001e44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e60:	ed93 7a00 	vldr	s14, [r3]
 8001e64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e74:	3b04      	subs	r3, #4
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e82:	3b04      	subs	r3, #4
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e94:	3b04      	subs	r3, #4
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001ec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001ed4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ed8:	ed93 7a00 	vldr	s14, [r3]
 8001edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001ef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ef8:	3b04      	subs	r3, #4
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f02:	3b04      	subs	r3, #4
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f14:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f1c:	ed93 7a00 	vldr	s14, [r3]
 8001f20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f34:	1f1a      	subs	r2, r3, #4
 8001f36:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f46:	3b04      	subs	r3, #4
 8001f48:	ed93 7a00 	vldr	s14, [r3]
 8001f4c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f58:	3b04      	subs	r3, #4
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f62:	1f1a      	subs	r2, r3, #4
 8001f64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8001f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f74:	1d1a      	adds	r2, r3, #4
 8001f76:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8001f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f82:	1d1a      	adds	r2, r3, #4
 8001f84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8001f8c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8001f9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fa0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8001fac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fb0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8001fbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fc0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8001fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd0:	1d1a      	adds	r2, r3, #4
 8001fd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001fd6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001fda:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fea:	1d1a      	adds	r2, r3, #4
 8001fec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001ff0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ff4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8002000:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002004:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8002010:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002014:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8002020:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002024:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8002030:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002034:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8002040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002044:	1f1a      	subs	r2, r3, #4
 8002046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800204a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800204e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002056:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 800205a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800205e:	1f1a      	subs	r2, r3, #4
 8002060:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002064:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002068:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800206c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002070:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8002074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800207c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800208c:	4413      	add	r3, r2
 800208e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8002092:	edd7 7a07 	vldr	s15, [r7, #28]
 8002096:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 80020a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 80020b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020b6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 80020c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 80020d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020dc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 80020ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020f0:	1d1a      	adds	r2, r3, #4
 80020f2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020f6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80020fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002102:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8002106:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800210a:	eef1 7a67 	vneg.f32	s15, s15
 800210e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800211a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800211e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 800212a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800212e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002136:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 800213a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800213e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 800214a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800214e:	1f1a      	subs	r2, r3, #4
 8002150:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002154:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002158:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800215c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002160:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8002164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002168:	1f1a      	subs	r2, r3, #4
 800216a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800216e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002172:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 800217e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8002186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 800218e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002196:	4413      	add	r3, r2
 8002198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800219c:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 80021ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 80021bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 80021cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 80021dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021e0:	1d1a      	adds	r2, r3, #4
 80021e2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80021e6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80021ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f2:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 80021f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021fa:	1d1a      	adds	r2, r3, #4
 80021fc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002200:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002204:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8002210:	edd7 7a06 	vldr	s15, [r7, #24]
 8002214:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8002220:	edd7 7a05 	vldr	s15, [r7, #20]
 8002224:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8002230:	edd7 7a05 	vldr	s15, [r7, #20]
 8002234:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8002240:	edd7 7a06 	vldr	s15, [r7, #24]
 8002244:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8002250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002254:	1f1a      	subs	r2, r3, #4
 8002256:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800225a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800225e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002266:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 800226a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800226e:	1f1a      	subs	r2, r3, #4
 8002270:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002274:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002278:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800227c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002280:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002288:	3b01      	subs	r3, #1
 800228a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800228e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002292:	2b00      	cmp	r3, #0
 8002294:	f47f ace0 	bne.w	8001c58 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	ed93 7a00 	vldr	s14, [r3]
 800229e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022aa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	ed93 7a00 	vldr	s14, [r3]
 80022b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3304      	adds	r3, #4
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d0:	3304      	adds	r3, #4
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3304      	adds	r3, #4
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ea:	3304      	adds	r3, #4
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80022f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022fc:	3304      	adds	r3, #4
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800230a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800230e:	3304      	adds	r3, #4
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002318:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800231c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800232c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002338:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800233c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800234c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800235c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002360:	3304      	adds	r3, #4
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800236a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800236e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002372:	3304      	adds	r3, #4
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002384:	3304      	adds	r3, #4
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800238e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002396:	3304      	adds	r3, #4
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80023a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a8:	ed93 7a00 	vldr	s14, [r3]
 80023ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80023b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c0:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80023c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023c8:	ed93 7a00 	vldr	s14, [r3]
 80023cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80023d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	1d1a      	adds	r2, r3, #4
 80023e0:	603a      	str	r2, [r7, #0]
 80023e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80023ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ee:	3304      	adds	r3, #4
 80023f0:	ed93 7a00 	vldr	s14, [r3]
 80023f4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002400:	3304      	adds	r3, #4
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	1d1a      	adds	r2, r3, #4
 800240a:	603a      	str	r2, [r7, #0]
 800240c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002410:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8002414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800241c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8002424:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002428:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800242c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002430:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8002434:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002438:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800243c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002440:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8002444:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002448:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8002454:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002458:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800245c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002460:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8002464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002468:	1d1a      	adds	r2, r3, #4
 800246a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800246e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002472:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800247e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002488:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800248c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002494:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8002498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80024a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80024a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80024b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80024c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024cc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80024d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80024e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ec:	1d1a      	adds	r2, r3, #4
 80024ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024f2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80024f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fe:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002506:	1d1a      	adds	r2, r3, #4
 8002508:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800250c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002510:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002518:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800251c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8002524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800252c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002530:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800253c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002540:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002548:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800254c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002550:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800255c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002560:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800256c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002570:	1d1a      	adds	r2, r3, #4
 8002572:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002576:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800257a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800257e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002582:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8002586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800258a:	1d1a      	adds	r2, r3, #4
 800258c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002590:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002594:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259c:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80025a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a4:	b299      	uxth	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	2304      	movs	r3, #4
 80025ac:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80025ae:	f000 f8c3 	bl	8002738 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 80025b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b6:	b299      	uxth	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	2304      	movs	r3, #4
 80025be:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025c0:	f000 f8ba 	bl	8002738 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 80025c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c8:	b299      	uxth	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	2304      	movs	r3, #4
 80025d0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80025d2:	f000 f8b1 	bl	8002738 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 80025d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025da:	b299      	uxth	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2304      	movs	r3, #4
 80025e2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80025e4:	f000 f8a8 	bl	8002738 <arm_radix8_butterfly_f32>
}
 80025e8:	bf00      	nop
 80025ea:	37b0      	adds	r7, #176	; 0xb0
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	460b      	mov	r3, r1
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	4613      	mov	r3, r2
 8002604:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d117      	bne.n	8002642 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	e00d      	b.n	800263a <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eef1 7a67 	vneg.f32	s15, s15
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3308      	adds	r3, #8
 8002632:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3301      	adds	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	429a      	cmp	r2, r3
 8002640:	d3ed      	bcc.n	800261e <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002648:	d024      	beq.n	8002694 <arm_cfft_f32+0xa4>
 800264a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264e:	d80b      	bhi.n	8002668 <arm_cfft_f32+0x78>
 8002650:	2b20      	cmp	r3, #32
 8002652:	d01f      	beq.n	8002694 <arm_cfft_f32+0xa4>
 8002654:	2b20      	cmp	r3, #32
 8002656:	d802      	bhi.n	800265e <arm_cfft_f32+0x6e>
 8002658:	2b10      	cmp	r3, #16
 800265a:	d016      	beq.n	800268a <arm_cfft_f32+0x9a>
 800265c:	e028      	b.n	80026b0 <arm_cfft_f32+0xc0>
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d01d      	beq.n	800269e <arm_cfft_f32+0xae>
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	d011      	beq.n	800268a <arm_cfft_f32+0x9a>
 8002666:	e023      	b.n	80026b0 <arm_cfft_f32+0xc0>
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266c:	d00d      	beq.n	800268a <arm_cfft_f32+0x9a>
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d803      	bhi.n	800267c <arm_cfft_f32+0x8c>
 8002674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002678:	d011      	beq.n	800269e <arm_cfft_f32+0xae>
 800267a:	e019      	b.n	80026b0 <arm_cfft_f32+0xc0>
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	d008      	beq.n	8002694 <arm_cfft_f32+0xa4>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	d00a      	beq.n	800269e <arm_cfft_f32+0xae>
 8002688:	e012      	b.n	80026b0 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7fe ff90 	bl	80015b2 <arm_cfft_radix8by2_f32>
        break;
 8002692:	e00d      	b.n	80026b0 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff f97f 	bl	800199a <arm_cfft_radix8by4_f32>
        break;
 800269c:	e008      	b.n	80026b0 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	b299      	uxth	r1, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	2301      	movs	r3, #1
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	f000 f845 	bl	8002738 <arm_radix8_butterfly_f32>
        break;
 80026ae:	bf00      	nop
    }  

    if( bitReverseFlag )
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8999      	ldrh	r1, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	461a      	mov	r2, r3
 80026c0:	68b8      	ldr	r0, [r7, #8]
 80026c2:	f7fd fd95 	bl	80001f0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d130      	bne.n	800272e <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026de:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e01c      	b.n	8002726 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	61ba      	str	r2, [r7, #24]
 80026f2:	ed93 7a00 	vldr	s14, [r3]
 80026f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	eeb1 7a67 	vneg.f32	s14, s15
 800270c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3304      	adds	r3, #4
 800271e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	429a      	cmp	r2, r3
 800272c:	d3de      	bcc.n	80026ec <arm_cfft_f32+0xfc>
        }
    }
}
 800272e:	bf00      	nop
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8002738:	b480      	push	{r7}
 800273a:	b0bd      	sub	sp, #244	; 0xf4
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	461a      	mov	r2, r3
 8002744:	460b      	mov	r3, r1
 8002746:	817b      	strh	r3, [r7, #10]
 8002748:	4613      	mov	r3, r2
 800274a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <arm_radix8_butterfly_f32+0x3c>)
 800274e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002770:	e002      	b.n	8002778 <arm_radix8_butterfly_f32+0x40>
 8002772:	bf00      	nop
 8002774:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8002778:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800277c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002780:	4413      	add	r3, r2
 8002782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002786:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278e:	4413      	add	r3, r2
 8002790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8002794:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279c:	4413      	add	r3, r2
 800279e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80027a2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80027a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027aa:	4413      	add	r3, r2
 80027ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80027b0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b8:	4413      	add	r3, r2
 80027ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80027be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c6:	4413      	add	r3, r2
 80027c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80027cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d4:	4413      	add	r3, r2
 80027d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80027da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	ed93 7a00 	vldr	s14, [r3]
 80027e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4413      	add	r3, r2
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80027fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	ed93 7a00 	vldr	s14, [r3]
 800280c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	ed93 7a00 	vldr	s14, [r3]
 8002830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4413      	add	r3, r2
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	ed93 7a00 	vldr	s14, [r3]
 8002854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002866:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800286a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	ed93 7a00 	vldr	s14, [r3]
 8002878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800288e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	ed93 7a00 	vldr	s14, [r3]
 800289c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ae:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80028b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	ed93 7a00 	vldr	s14, [r3]
 80028c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80028d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	ed93 7a00 	vldr	s14, [r3]
 80028e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80028fa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028fe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002906:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800290a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800290e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800291a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800291e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002926:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800292a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800292e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002936:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800293a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002948:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002962:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800296e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	3304      	adds	r3, #4
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	3304      	adds	r3, #4
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002992:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	3304      	adds	r3, #4
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	3304      	adds	r3, #4
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4413      	add	r3, r2
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80029be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	3304      	adds	r3, #4
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4413      	add	r3, r2
 80029ca:	ed93 7a00 	vldr	s14, [r3]
 80029ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	3304      	adds	r3, #4
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80029e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	3304      	adds	r3, #4
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	3304      	adds	r3, #4
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	3304      	adds	r3, #4
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	ed93 7a00 	vldr	s14, [r3]
 8002a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	3304      	adds	r3, #4
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4413      	add	r3, r2
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a32:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002a36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	ed93 7a00 	vldr	s14, [r3]
 8002a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4413      	add	r3, r2
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	3304      	adds	r3, #4
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4413      	add	r3, r2
 8002a6a:	ed93 7a00 	vldr	s14, [r3]
 8002a6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	3304      	adds	r3, #4
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a82:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002aae:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ab2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002abe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ac2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002ace:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002ad2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002ade:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002ae2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aea:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002aee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3304      	adds	r3, #4
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002afe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	3304      	adds	r3, #4
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002b1a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b22:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8002b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b34:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b4e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b56:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	3304      	adds	r3, #4
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b6a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b72:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b86:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002b92:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002b96:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002baa:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002bae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbe:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8002bc2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002bc6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bce:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002bda:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002bde:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8002bf2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002bf6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfe:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8002c02:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c06:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002c12:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002c16:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002c22:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002c26:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002c32:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c36:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002c42:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c46:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002c52:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002c56:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8002c62:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002c66:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c80:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c9a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002cb4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002cce:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002cea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002d06:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3304      	adds	r3, #4
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d22:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002d2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	3304      	adds	r3, #4
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d3e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d46:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 8002d4a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d52:	4413      	add	r3, r2
 8002d54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f4ff ad0a 	bcc.w	8002778 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	f240 84e3 	bls.w	8003734 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002d7a:	893b      	ldrh	r3, [r7, #8]
 8002d7c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002d80:	4413      	add	r3, r2
 8002d82:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002d8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d90:	4413      	add	r3, r2
 8002d92:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002d94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d98:	4413      	add	r3, r2
 8002d9a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002d9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da0:	4413      	add	r3, r2
 8002da2:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002da4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da8:	4413      	add	r3, r2
 8002daa:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002db0:	4413      	add	r3, r2
 8002db2:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002db4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002db8:	4413      	add	r3, r2
 8002dba:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8002dbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002e12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3304      	adds	r3, #4
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	3304      	adds	r3, #4
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	3304      	adds	r3, #4
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	3304      	adds	r3, #4
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	3304      	adds	r3, #4
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	3304      	adds	r3, #4
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8002e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8002e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002e7e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	4413      	add	r3, r2
 8002e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002e8c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e94:	4413      	add	r3, r2
 8002e96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002ea8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002eb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002ec4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ecc:	4413      	add	r3, r2
 8002ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002ed2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eda:	4413      	add	r3, r2
 8002edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	ed93 7a00 	vldr	s14, [r3]
 8002eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002f04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	ed93 7a00 	vldr	s14, [r3]
 8002f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	ed93 7a00 	vldr	s14, [r3]
 8002f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f48:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	ed93 7a00 	vldr	s14, [r3]
 8002f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002f70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	ed93 7a00 	vldr	s14, [r3]
 8002f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	edd3 7a00 	vldr	s15, [r3]
 8002f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f90:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002f94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	ed93 7a00 	vldr	s14, [r3]
 8002fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4413      	add	r3, r2
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	edd3 7a00 	vldr	s15, [r3]
 8002fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	ed93 7a00 	vldr	s14, [r3]
 8002fea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8003000:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003004:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8003010:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003014:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8003020:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003024:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8003030:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003034:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8003040:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800304e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003056:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800305a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800305e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003066:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800306a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	3304      	adds	r3, #4
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	ed93 7a00 	vldr	s14, [r3]
 800307a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	3304      	adds	r3, #4
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3304      	adds	r3, #4
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	ed93 7a00 	vldr	s14, [r3]
 80030a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	3304      	adds	r3, #4
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80030ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3304      	adds	r3, #4
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	ed93 7a00 	vldr	s14, [r3]
 80030ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	3304      	adds	r3, #4
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	edd3 7a00 	vldr	s15, [r3]
 80030da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80030e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	3304      	adds	r3, #4
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	ed93 7a00 	vldr	s14, [r3]
 80030f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3304      	adds	r3, #4
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003106:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800310a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	3304      	adds	r3, #4
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	ed93 7a00 	vldr	s14, [r3]
 800311a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	3304      	adds	r3, #4
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003132:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	3304      	adds	r3, #4
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	ed93 7a00 	vldr	s14, [r3]
 8003142:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	3304      	adds	r3, #4
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800315a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	3304      	adds	r3, #4
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	ed93 7a00 	vldr	s14, [r3]
 800316a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3304      	adds	r3, #4
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	3304      	adds	r3, #4
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3304      	adds	r3, #4
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 80031aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031ae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80031b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 80031ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80031c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 80031ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80031ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80031d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 80031da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80031de:	edd7 7a08 	vldr	s15, [r7, #32]
 80031e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80031ea:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80031ee:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80031f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80031fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80031fe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003206:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800320a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	3304      	adds	r3, #4
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4413      	add	r3, r2
 8003216:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800321a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800321e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003222:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8003226:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800322a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800322e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003232:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8003236:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800323a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800323e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003242:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8003246:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800324a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800324e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003252:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8003256:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800325a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8003266:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800326a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003272:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8003276:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800327a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8003286:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800328a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800328e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003292:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8003296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80032a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80032b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	3304      	adds	r3, #4
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80032c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80032cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80032d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80032d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80032dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80032e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80032e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80032ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80032f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80032f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80032fc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003300:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003308:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800330c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	ed97 7a07 	vldr	s14, [r7, #28]
 800331a:	edd7 7a06 	vldr	s15, [r7, #24]
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8003326:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	3304      	adds	r3, #4
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	ed97 7a05 	vldr	s14, [r7, #20]
 8003336:	edd7 7a04 	vldr	s15, [r7, #16]
 800333a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8003342:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003346:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8003352:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003356:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8003362:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003366:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8003372:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003376:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800337a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003390:	edd7 7a06 	vldr	s15, [r7, #24]
 8003394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003398:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800339c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	3304      	adds	r3, #4
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80033ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80033b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b4:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80033b8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80033bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80033c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80033c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033cc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80033d0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80033d4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80033d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033dc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80033e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80033e8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80033ec:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80033f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80033f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003400:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003404:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003414:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003418:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800341c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003424:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8003428:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800342c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003434:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8003438:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800343c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003444:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8003448:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800344c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003454:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8003458:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800345c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003464:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8003468:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800346c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8003478:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800347c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003484:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003488:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800348c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003494:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003498:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800349c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80034a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80034a8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80034ac:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80034b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80034b8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80034bc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80034c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80034c8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80034cc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80034d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80034d8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034dc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80034e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80034e8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80034f8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80034fc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003504:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003508:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800350c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003518:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800351c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003524:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003528:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800352c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003534:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003538:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800353c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003544:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003548:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800354c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003554:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003558:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	ed97 7a07 	vldr	s14, [r7, #28]
 8003566:	edd7 7a06 	vldr	s15, [r7, #24]
 800356a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3304      	adds	r3, #4
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003582:	edd7 7a04 	vldr	s15, [r7, #16]
 8003586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800358a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800358e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003592:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800359e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80035a2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80035ae:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80035b2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80035b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ba:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80035be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80035c2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80035ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80035e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80035e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3304      	adds	r3, #4
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80035f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80035fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003600:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003604:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003608:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003610:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003614:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003618:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8003624:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003628:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800362c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003630:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8003634:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003638:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800363c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003640:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003652:	edd7 7a06 	vldr	s15, [r7, #24]
 8003656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800365e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	3304      	adds	r3, #4
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	ed97 7a05 	vldr	s14, [r7, #20]
 800366e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003676:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800367a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800367e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003686:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800368a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800368e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800369a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800369e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80036a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80036aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80036ae:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80036ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80036c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80036cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80036d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	3304      	adds	r3, #4
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80036e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80036e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ec:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 80036f0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80036f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036f8:	4413      	add	r3, r2
 80036fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003704:	429a      	cmp	r2, r3
 8003706:	f4ff abba 	bcc.w	8002e7e <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370e:	3301      	adds	r3, #1
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 8003714:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371c:	429a      	cmp	r2, r3
 800371e:	f4ff ab2c 	bcc.w	8002d7a <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 8003722:	893b      	ldrh	r3, [r7, #8]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372c:	2b07      	cmp	r3, #7
 800372e:	f63f a813 	bhi.w	8002758 <arm_radix8_butterfly_f32+0x20>
}
 8003732:	e000      	b.n	8003736 <arm_radix8_butterfly_f32+0xffe>
         break;
 8003734:	bf00      	nop
}
 8003736:	bf00      	nop
 8003738:	37f4      	adds	r7, #244	; 0xf4
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
void writeRegister(uint8_t address,uint8_t value)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	460a      	mov	r2, r1
 800374e:	71fb      	strb	r3, [r7, #7]
 8003750:	4613      	mov	r3, r2
 8003752:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	2b3f      	cmp	r3, #63	; 0x3f
 8003758:	d901      	bls.n	800375e <writeRegister+0x1a>
		address = 63;
 800375a:	233f      	movs	r3, #63	; 0x3f
 800375c:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003764:	b2db      	uxtb	r3, r3
 8003766:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8003768:	2200      	movs	r2, #0
 800376a:	2110      	movs	r1, #16
 800376c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003770:	f002 fbfe 	bl	8005f70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 8003774:	1df9      	adds	r1, r7, #7
 8003776:	2364      	movs	r3, #100	; 0x64
 8003778:	2201      	movs	r2, #1
 800377a:	4809      	ldr	r0, [pc, #36]	; (80037a0 <writeRegister+0x5c>)
 800377c:	f004 fa1f 	bl	8007bbe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,100);
 8003780:	1db9      	adds	r1, r7, #6
 8003782:	2364      	movs	r3, #100	; 0x64
 8003784:	2201      	movs	r2, #1
 8003786:	4806      	ldr	r0, [pc, #24]	; (80037a0 <writeRegister+0x5c>)
 8003788:	f004 fa19 	bl	8007bbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800378c:	2201      	movs	r2, #1
 800378e:	2110      	movs	r1, #16
 8003790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003794:	f002 fbec 	bl	8005f70 <HAL_GPIO_WritePin>
	

}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	2000e960 	.word	0x2000e960

080037a4 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	4613      	mov	r3, r2
 80037b2:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	2b3f      	cmp	r3, #63	; 0x3f
 80037b8:	d901      	bls.n	80037be <readRegister+0x1a>
		address = 63;
 80037ba:	233f      	movs	r3, #63	; 0x3f
 80037bc:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 80037be:	79bb      	ldrb	r3, [r7, #6]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d905      	bls.n	80037d0 <readRegister+0x2c>
		address |= 0x40;
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	71fb      	strb	r3, [r7, #7]
 80037ce:	e004      	b.n	80037da <readRegister+0x36>
		else	
		address &= ~(0x40);
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2110      	movs	r1, #16
 80037e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ec:	f002 fbc0 	bl	8005f70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 80037f0:	1df9      	adds	r1, r7, #7
 80037f2:	2364      	movs	r3, #100	; 0x64
 80037f4:	2201      	movs	r2, #1
 80037f6:	480a      	ldr	r0, [pc, #40]	; (8003820 <readRegister+0x7c>)
 80037f8:	f004 f9e1 	bl	8007bbe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,100);
 80037fc:	79bb      	ldrb	r3, [r7, #6]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	2364      	movs	r3, #100	; 0x64
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	4806      	ldr	r0, [pc, #24]	; (8003820 <readRegister+0x7c>)
 8003806:	f004 fb40 	bl	8007e8a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800380a:	2201      	movs	r2, #1
 800380c:	2110      	movs	r1, #16
 800380e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003812:	f002 fbad 	bl	8005f70 <HAL_GPIO_WritePin>
	
	
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	2000e960 	.word	0x2000e960

08003824 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
void adxlBW(ADXL_InitTypeDef * adxl)
		{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 800382c:	2300      	movs	r3, #0
 800382e:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	4619      	mov	r1, r3
 8003834:	202c      	movs	r0, #44	; 0x2c
 8003836:	f7ff ff85 	bl	8003744 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	789b      	ldrb	r3, [r3, #2]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d11a      	bne.n	8003878 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	f043 0310 	orr.w	r3, r3, #16
 8003848:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	78db      	ldrb	r3, [r3, #3]
 800384e:	2b06      	cmp	r3, #6
 8003850:	d807      	bhi.n	8003862 <adxlBW+0x3e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	78db      	ldrb	r3, [r3, #3]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d903      	bls.n	8003862 <adxlBW+0x3e>
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	3307      	adds	r3, #7
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e004      	b.n	800386c <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	78da      	ldrb	r2, [r3, #3]
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	4413      	add	r3, r2
 800386a:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	4619      	mov	r1, r3
 8003870:	202c      	movs	r0, #44	; 0x2c
 8003872:	f7ff ff67 	bl	8003744 <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 8003876:	e015      	b.n	80038a4 <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	78db      	ldrb	r3, [r3, #3]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d807      	bhi.n	8003890 <adxlBW+0x6c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	78db      	ldrb	r3, [r3, #3]
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d903      	bls.n	8003890 <adxlBW+0x6c>
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3306      	adds	r3, #6
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e004      	b.n	800389a <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	78da      	ldrb	r2, [r3, #3]
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	4413      	add	r3, r2
 8003898:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	4619      	mov	r1, r3
 800389e:	202c      	movs	r0, #44	; 0x2c
 80038a0:	f7ff ff50 	bl	8003744 <writeRegister>
		}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	4619      	mov	r1, r3
 80038bc:	2031      	movs	r0, #49	; 0x31
 80038be:	f7ff ff41 	bl	8003744 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	019b      	lsls	r3, r3, #6
 80038c8:	b25a      	sxtb	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	015b      	lsls	r3, r3, #5
 80038d0:	b25b      	sxtb	r3, r3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b25a      	sxtb	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	799b      	ldrb	r3, [r3, #6]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	b25a      	sxtb	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	795b      	ldrb	r3, [r3, #5]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	b25b      	sxtb	r3, r3
 80038ea:	4313      	orrs	r3, r2
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	791a      	ldrb	r2, [r3, #4]
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	4413      	add	r3, r2
 80038f8:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	4619      	mov	r1, r3
 80038fe:	2031      	movs	r0, #49	; 0x31
 8003900:	f7ff ff20 	bl	8003744 <writeRegister>
			}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl, uint8_t * id)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	//delay_init();
	//TM_Delay_Init();
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8003916:	2201      	movs	r2, #1
 8003918:	2110      	movs	r1, #16
 800391a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800391e:	f002 fb27 	bl	8005f70 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	//TM_DelayMicros(10);
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID, id,1);
 8003922:	2201      	movs	r2, #1
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	2000      	movs	r0, #0
 8003928:	f7ff ff3c 	bl	80037a4 <readRegister>
	//TM_DelayMicros(10);

	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff79 	bl	8003824 <adxlBW>
	adxlFormat(adxl);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffba 	bl	80038ac <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	795b      	ldrb	r3, [r3, #5]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d140      	bne.n	80039c2 <ADXL_Init+0xb6>
			{
			switch (adxl->Range) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	791b      	ldrb	r3, [r3, #4]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d847      	bhi.n	80039d8 <ADXL_Init+0xcc>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <ADXL_Init+0x44>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003961 	.word	0x08003961
 8003954:	08003979 	.word	0x08003979
 8003958:	08003991 	.word	0x08003991
 800395c:	080039a9 	.word	0x080039a9
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 8003960:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <ADXL_Init+0x12c>)
 8003962:	4a36      	ldr	r2, [pc, #216]	; (8003a3c <ADXL_Init+0x130>)
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <ADXL_Init+0x12c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a35      	ldr	r2, [pc, #212]	; (8003a40 <ADXL_Init+0x134>)
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <ADXL_Init+0x134>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a34      	ldr	r2, [pc, #208]	; (8003a44 <ADXL_Init+0x138>)
 8003974:	6013      	str	r3, [r2, #0]
								break;
 8003976:	e02f      	b.n	80039d8 <ADXL_Init+0xcc>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8003978:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <ADXL_Init+0x12c>)
 800397a:	4a33      	ldr	r2, [pc, #204]	; (8003a48 <ADXL_Init+0x13c>)
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <ADXL_Init+0x12c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2f      	ldr	r2, [pc, #188]	; (8003a40 <ADXL_Init+0x134>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <ADXL_Init+0x134>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <ADXL_Init+0x138>)
 800398c:	6013      	str	r3, [r2, #0]
								break;
 800398e:	e023      	b.n	80039d8 <ADXL_Init+0xcc>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <ADXL_Init+0x12c>)
 8003992:	4a2e      	ldr	r2, [pc, #184]	; (8003a4c <ADXL_Init+0x140>)
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <ADXL_Init+0x12c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <ADXL_Init+0x134>)
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <ADXL_Init+0x134>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <ADXL_Init+0x138>)
 80039a4:	6013      	str	r3, [r2, #0]
								break;
 80039a6:	e017      	b.n	80039d8 <ADXL_Init+0xcc>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <ADXL_Init+0x12c>)
 80039aa:	4a29      	ldr	r2, [pc, #164]	; (8003a50 <ADXL_Init+0x144>)
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <ADXL_Init+0x12c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <ADXL_Init+0x134>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <ADXL_Init+0x134>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <ADXL_Init+0x138>)
 80039bc:	6013      	str	r3, [r2, #0]
								break;
 80039be:	bf00      	nop
 80039c0:	e00a      	b.n	80039d8 <ADXL_Init+0xcc>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <ADXL_Init+0x12c>)
 80039c4:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <ADXL_Init+0x130>)
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <ADXL_Init+0x12c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <ADXL_Init+0x134>)
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <ADXL_Init+0x134>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <ADXL_Init+0x138>)
 80039d6:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80039d8:	f107 030f 	add.w	r3, r7, #15
 80039dc:	2201      	movs	r2, #1
 80039de:	4619      	mov	r1, r3
 80039e0:	202d      	movs	r0, #45	; 0x2d
 80039e2:	f7ff fedf 	bl	80037a4 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	79db      	ldrb	r3, [r3, #7]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <ADXL_Init+0xee>
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e004      	b.n	8003a04 <ADXL_Init+0xf8>
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	73fb      	strb	r3, [r7, #15]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7a1b      	ldrb	r3, [r3, #8]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <ADXL_Init+0x10c>
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e004      	b.n	8003a22 <ADXL_Init+0x116>
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	f023 0320 	bic.w	r3, r3, #32
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	73fb      	strb	r3, [r7, #15]
			writeRegister(POWER_CTL,reg);
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4619      	mov	r1, r3
 8003a26:	202d      	movs	r0, #45	; 0x2d
 8003a28:	f7ff fe8c 	bl	8003744 <writeRegister>
			

			//writeRegister(INT_ENABLE, 0x80);

	return ADXL_OK;
 8003a2c:	2300      	movs	r3, #0
	
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000224 	.word	0x20000224
 8003a3c:	3b808081 	.word	0x3b808081
 8003a40:	20000220 	.word	0x20000220
 8003a44:	2000021c 	.word	0x2000021c
 8003a48:	3c010204 	.word	0x3c010204
 8003a4c:	3c820821 	.word	0x3c820821
 8003a50:	3d042108 	.word	0x3d042108

08003a54 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8003a5e:	f107 030f 	add.w	r3, r7, #15
 8003a62:	2201      	movs	r2, #1
 8003a64:	4619      	mov	r1, r3
 8003a66:	202d      	movs	r0, #45	; 0x2d
 8003a68:	f7ff fe9c 	bl	80037a4 <readRegister>
			switch (s) {
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <ADXL_Measure+0x24>
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d010      	beq.n	8003a98 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 8003a76:	e01a      	b.n	8003aae <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	f023 0304 	bic.w	r3, r3, #4
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	202d      	movs	r0, #45	; 0x2d
 8003a92:	f7ff fe57 	bl	8003744 <writeRegister>
				break;
 8003a96:	e00a      	b.n	8003aae <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	f023 0308 	bic.w	r3, r3, #8
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	202d      	movs	r0, #45	; 0x2d
 8003aa8:	f7ff fe4c 	bl	8003744 <writeRegister>
				break;				
 8003aac:	bf00      	nop
		}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <ADXL_Standby>:
* @param: s = ON or OFF		
		OFF: Takes the module into sleep mode.

*/
void ADXL_Standby(Switch s)
		{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8003ac0:	f107 030f 	add.w	r3, r7, #15
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	202d      	movs	r0, #45	; 0x2d
 8003aca:	f7ff fe6b 	bl	80037a4 <readRegister>
			switch (s) {
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <ADXL_Standby+0x24>
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d010      	beq.n	8003afa <ADXL_Standby+0x44>
				reg |= (1<<2);
				writeRegister(POWER_CTL,reg);
				break;				
				}
			
		}
 8003ad8:	e01a      	b.n	8003b10 <ADXL_Standby+0x5a>
				reg &= ~(1<<2);
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	73fb      	strb	r3, [r7, #15]
				reg &= ~(1<<3);
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	f023 0308 	bic.w	r3, r3, #8
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	4619      	mov	r1, r3
 8003af2:	202d      	movs	r0, #45	; 0x2d
 8003af4:	f7ff fe26 	bl	8003744 <writeRegister>
				break;
 8003af8:	e00a      	b.n	8003b10 <ADXL_Standby+0x5a>
				reg |= (1<<2);
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	4619      	mov	r1, r3
 8003b08:	202d      	movs	r0, #45	; 0x2d
 8003b0a:	f7ff fe1b 	bl	8003744 <writeRegister>
				break;				
 8003b0e:	bf00      	nop
		}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <ADXL_IntProto>:
* Put this function wherever you want to implement interrupt routines, e.g. EXTI_Callback
*/

void ADXL_IntProto(void)
	
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
			uint8_t reg=0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	71fb      	strb	r3, [r7, #7]
			readRegister(INT_SOURCE,&reg,1);
 8003b22:	1dfb      	adds	r3, r7, #7
 8003b24:	2201      	movs	r2, #1
 8003b26:	4619      	mov	r1, r3
 8003b28:	2030      	movs	r0, #48	; 0x30
 8003b2a:	f7ff fe3b 	bl	80037a4 <readRegister>
	
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <ADXL345_Init>:
/*
 * TODO: Init ADXL345 parameter and Start measurement
 * */

void ADXL345_Init()
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0

	  ADXL_InitTypeDef adxl_config;
	  adxl_config.Range = RANGE_16G;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	723b      	strb	r3, [r7, #8]
	  adxl_config.Resolution = RESOLUTION_FULL;
 8003b42:	2301      	movs	r3, #1
 8003b44:	727b      	strb	r3, [r7, #9]
	  adxl_config.AutoSleep = AUTOSLEEPOFF;
 8003b46:	2300      	movs	r3, #0
 8003b48:	72fb      	strb	r3, [r7, #11]
	  adxl_config.LPMode = LPMODE_LOWPOWER;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	71bb      	strb	r3, [r7, #6]
	  adxl_config.Rate = BWRATE_3200;
 8003b4e:	230f      	movs	r3, #15
 8003b50:	71fb      	strb	r3, [r7, #7]
	  adxl_config.SPIMode = SPIMODE_4WIRE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	713b      	strb	r3, [r7, #4]
	  adxl_config.IntMode = INT_ACTIVEHIGH;
 8003b56:	2300      	movs	r3, #0
 8003b58:	717b      	strb	r3, [r7, #5]

	  adxlStatus InitStatus = ADXL_Init(&adxl_config, &ADXLid);
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	490f      	ldr	r1, [pc, #60]	; (8003b9c <ADXL345_Init+0x64>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fed4 	bl	800390c <ADXL_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	73fb      	strb	r3, [r7, #15]
	  if(ADXLid == 0xE5)InitStatus = ADXL_OK;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <ADXL345_Init+0x64>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2be5      	cmp	r3, #229	; 0xe5
 8003b6e:	d101      	bne.n	8003b74 <ADXL345_Init+0x3c>
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]
	  if(InitStatus == ADXL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d100      	bne.n	8003b7c <ADXL345_Init+0x44>
	  {
		  __NOP();
 8003b7a:	bf00      	nop

	  }

	  ADXL_Measure(ON);
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7ff ff69 	bl	8003a54 <ADXL_Measure>
	  writeRegister(INT_MAP, 0x10);
 8003b82:	2110      	movs	r1, #16
 8003b84:	202f      	movs	r0, #47	; 0x2f
 8003b86:	f7ff fddd 	bl	8003744 <writeRegister>
	  writeRegister(INT_ENABLE, 0x80);
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	202e      	movs	r0, #46	; 0x2e
 8003b8e:	f7ff fdd9 	bl	8003744 <writeRegister>
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000228 	.word	0x20000228

08003ba0 <AcquireData>:
/*
 *TODO: AcquireData from SPI
 * */
void AcquireData(uint8_t *data)
//void AcquireData()
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

	readRegister(DATA0,data,6);
 8003ba8:	2206      	movs	r2, #6
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	2032      	movs	r0, #50	; 0x32
 8003bae:	f7ff fdf9 	bl	80037a4 <readRegister>
	XfftInstance.data0 = data[0];
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	4bb1      	ldr	r3, [pc, #708]	; (8003e80 <AcquireData+0x2e0>)
 8003bba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bbe:	801a      	strh	r2, [r3, #0]
	XfftInstance.data1 = data[1];
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	4bad      	ldr	r3, [pc, #692]	; (8003e80 <AcquireData+0x2e0>)
 8003bca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bce:	3302      	adds	r3, #2
 8003bd0:	801a      	strh	r2, [r3, #0]
	YfftInstance.data0 = data[2];
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	4baa      	ldr	r3, [pc, #680]	; (8003e84 <AcquireData+0x2e4>)
 8003bdc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003be0:	801a      	strh	r2, [r3, #0]
	YfftInstance.data1 = data[3];
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3303      	adds	r3, #3
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	4ba6      	ldr	r3, [pc, #664]	; (8003e84 <AcquireData+0x2e4>)
 8003bec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	801a      	strh	r2, [r3, #0]
	ZfftInstance.data0 = data[4];
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	4ba2      	ldr	r3, [pc, #648]	; (8003e88 <AcquireData+0x2e8>)
 8003bfe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c02:	801a      	strh	r2, [r3, #0]
	ZfftInstance.data1 = data[5];
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3305      	adds	r3, #5
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	4b9e      	ldr	r3, [pc, #632]	; (8003e88 <AcquireData+0x2e8>)
 8003c0e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c12:	3302      	adds	r3, #2
 8003c14:	801a      	strh	r2, [r3, #0]
	XfftInstance.acceleration = ((uint8_t)XfftInstance.data1<<8)|(uint8_t)XfftInstance.data0;
 8003c16:	4b9a      	ldr	r3, [pc, #616]	; (8003e80 <AcquireData+0x2e0>)
 8003c18:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	b21a      	sxth	r2, r3
 8003c26:	4b96      	ldr	r3, [pc, #600]	; (8003e80 <AcquireData+0x2e0>)
 8003c28:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	4313      	orrs	r3, r2
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	4b92      	ldr	r3, [pc, #584]	; (8003e80 <AcquireData+0x2e0>)
 8003c38:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	801a      	strh	r2, [r3, #0]
	YfftInstance.acceleration = ((uint8_t)YfftInstance.data1<<8)|(uint8_t)YfftInstance.data0;
 8003c40:	4b90      	ldr	r3, [pc, #576]	; (8003e84 <AcquireData+0x2e4>)
 8003c42:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c46:	3302      	adds	r3, #2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	b21a      	sxth	r2, r3
 8003c50:	4b8c      	ldr	r3, [pc, #560]	; (8003e84 <AcquireData+0x2e4>)
 8003c52:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	4b88      	ldr	r3, [pc, #544]	; (8003e84 <AcquireData+0x2e4>)
 8003c62:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c66:	3304      	adds	r3, #4
 8003c68:	801a      	strh	r2, [r3, #0]
	ZfftInstance.acceleration = ((uint8_t)ZfftInstance.data1<<8)|(uint8_t)ZfftInstance.data0;
 8003c6a:	4b87      	ldr	r3, [pc, #540]	; (8003e88 <AcquireData+0x2e8>)
 8003c6c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c70:	3302      	adds	r3, #2
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	b21a      	sxth	r2, r3
 8003c7a:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <AcquireData+0x2e8>)
 8003c7c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	b21b      	sxth	r3, r3
 8003c86:	4313      	orrs	r3, r2
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	4b7f      	ldr	r3, [pc, #508]	; (8003e88 <AcquireData+0x2e8>)
 8003c8c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c90:	3304      	adds	r3, #4
 8003c92:	801a      	strh	r2, [r3, #0]

	//3.9 is scale of LSB(one bit) mg, 1000 is scale to g
	XfftInstance.accelerationfloat = (float)XfftInstance.acceleration * 3.9 / 1000;
 8003c94:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <AcquireData+0x2e0>)
 8003c96:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca0:	ee07 3a90 	vmov	s15, r3
 8003ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca8:	ee17 0a90 	vmov	r0, s15
 8003cac:	f7fc fccc 	bl	8000648 <__aeabi_f2d>
 8003cb0:	a371      	add	r3, pc, #452	; (adr r3, 8003e78 <AcquireData+0x2d8>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fd1f 	bl	80006f8 <__aeabi_dmul>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b71      	ldr	r3, [pc, #452]	; (8003e8c <AcquireData+0x2ec>)
 8003cc8:	f7fc fe40 	bl	800094c <__aeabi_ddiv>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	f7fc ffe8 	bl	8000ca8 <__aeabi_d2f>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b69      	ldr	r3, [pc, #420]	; (8003e80 <AcquireData+0x2e0>)
 8003cdc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	601a      	str	r2, [r3, #0]
	YfftInstance.accelerationfloat = (float)YfftInstance.acceleration  * 3.9 / 1000;
 8003ce4:	4b67      	ldr	r3, [pc, #412]	; (8003e84 <AcquireData+0x2e4>)
 8003ce6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003cea:	3304      	adds	r3, #4
 8003cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf8:	ee17 0a90 	vmov	r0, s15
 8003cfc:	f7fc fca4 	bl	8000648 <__aeabi_f2d>
 8003d00:	a35d      	add	r3, pc, #372	; (adr r3, 8003e78 <AcquireData+0x2d8>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fcf7 	bl	80006f8 <__aeabi_dmul>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	4621      	mov	r1, r4
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	4b5d      	ldr	r3, [pc, #372]	; (8003e8c <AcquireData+0x2ec>)
 8003d18:	f7fc fe18 	bl	800094c <__aeabi_ddiv>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	4618      	mov	r0, r3
 8003d22:	4621      	mov	r1, r4
 8003d24:	f7fc ffc0 	bl	8000ca8 <__aeabi_d2f>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b56      	ldr	r3, [pc, #344]	; (8003e84 <AcquireData+0x2e4>)
 8003d2c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d30:	3308      	adds	r3, #8
 8003d32:	601a      	str	r2, [r3, #0]
	ZfftInstance.accelerationfloat = (float)ZfftInstance.acceleration  * 3.9 / 1000;
 8003d34:	4b54      	ldr	r3, [pc, #336]	; (8003e88 <AcquireData+0x2e8>)
 8003d36:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d48:	ee17 0a90 	vmov	r0, s15
 8003d4c:	f7fc fc7c 	bl	8000648 <__aeabi_f2d>
 8003d50:	a349      	add	r3, pc, #292	; (adr r3, 8003e78 <AcquireData+0x2d8>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc fccf 	bl	80006f8 <__aeabi_dmul>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	4621      	mov	r1, r4
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <AcquireData+0x2ec>)
 8003d68:	f7fc fdf0 	bl	800094c <__aeabi_ddiv>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4618      	mov	r0, r3
 8003d72:	4621      	mov	r1, r4
 8003d74:	f7fc ff98 	bl	8000ca8 <__aeabi_d2f>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <AcquireData+0x2e8>)
 8003d7c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d80:	3308      	adds	r3, #8
 8003d82:	601a      	str	r2, [r3, #0]

	// move X axis data to buffer
	XfftInstance.bufferforFFT[sampleIndex * 2] = XfftInstance.accelerationfloat;
 8003d84:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <AcquireData+0x2f0>)
 8003d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d8a:	0059      	lsls	r1, r3, #1
 8003d8c:	4b3c      	ldr	r3, [pc, #240]	; (8003e80 <AcquireData+0x2e0>)
 8003d8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d92:	3308      	adds	r3, #8
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	483a      	ldr	r0, [pc, #232]	; (8003e80 <AcquireData+0x2e0>)
 8003d98:	008b      	lsls	r3, r1, #2
 8003d9a:	4403      	add	r3, r0
 8003d9c:	601a      	str	r2, [r3, #0]
	XfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	; (8003e90 <AcquireData+0x2f0>)
 8003da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	3301      	adds	r3, #1
 8003da8:	4a35      	ldr	r2, [pc, #212]	; (8003e80 <AcquireData+0x2e0>)
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
	XfftInstance.bufferforTimeSV[sampleIndex] = XfftInstance.accelerationfloat;
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <AcquireData+0x2f0>)
 8003db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <AcquireData+0x2e0>)
 8003dbe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	492e      	ldr	r1, [pc, #184]	; (8003e80 <AcquireData+0x2e0>)
 8003dc8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	601a      	str	r2, [r3, #0]

	// move Y axis data to buffer
	YfftInstance.bufferforFFT[sampleIndex * 2] = YfftInstance.accelerationfloat;
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <AcquireData+0x2f0>)
 8003dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd8:	0059      	lsls	r1, r3, #1
 8003dda:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <AcquireData+0x2e4>)
 8003ddc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003de0:	3308      	adds	r3, #8
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4827      	ldr	r0, [pc, #156]	; (8003e84 <AcquireData+0x2e4>)
 8003de6:	008b      	lsls	r3, r1, #2
 8003de8:	4403      	add	r3, r0
 8003dea:	601a      	str	r2, [r3, #0]
	YfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <AcquireData+0x2f0>)
 8003dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <AcquireData+0x2e4>)
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
	YfftInstance.bufferforTimeSV[sampleIndex] = YfftInstance.accelerationfloat;
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <AcquireData+0x2f0>)
 8003e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <AcquireData+0x2e4>)
 8003e0c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003e10:	3308      	adds	r3, #8
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	491b      	ldr	r1, [pc, #108]	; (8003e84 <AcquireData+0x2e4>)
 8003e16:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	601a      	str	r2, [r3, #0]

	// move Z axis data to buffer
	ZfftInstance.bufferforFFT[sampleIndex * 2] = ZfftInstance.accelerationfloat;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <AcquireData+0x2f0>)
 8003e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e26:	0059      	lsls	r1, r3, #1
 8003e28:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <AcquireData+0x2e8>)
 8003e2a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003e2e:	3308      	adds	r3, #8
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4815      	ldr	r0, [pc, #84]	; (8003e88 <AcquireData+0x2e8>)
 8003e34:	008b      	lsls	r3, r1, #2
 8003e36:	4403      	add	r3, r0
 8003e38:	601a      	str	r2, [r3, #0]
	ZfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <AcquireData+0x2f0>)
 8003e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <AcquireData+0x2e8>)
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
	ZfftInstance.bufferforTimeSV[sampleIndex] = ZfftInstance.accelerationfloat;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <AcquireData+0x2f0>)
 8003e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e56:	4618      	mov	r0, r3
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <AcquireData+0x2e8>)
 8003e5a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003e5e:	3308      	adds	r3, #8
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4909      	ldr	r1, [pc, #36]	; (8003e88 <AcquireData+0x2e8>)
 8003e64:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	601a      	str	r2, [r3, #0]


}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd90      	pop	{r4, r7, pc}
 8003e76:	bf00      	nop
 8003e78:	33333333 	.word	0x33333333
 8003e7c:	400f3333 	.word	0x400f3333
 8003e80:	20008954 	.word	0x20008954
 8003e84:	2000e9c4 	.word	0x2000e9c4
 8003e88:	20002924 	.word	0x20002924
 8003e8c:	408f4000 	.word	0x408f4000
 8003e90:	20000236 	.word	0x20000236

08003e94 <FeatureExtraction>:
 *TODO : Calculate Time domain and Frequency Domain
 * */


void FeatureExtraction()
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
	//Calculate Z axis statistic
	Calculate_FFT_RMS(ZfftInstance.bufferforFFT, testOutput, fftSize, &Zstatistic_value);
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <FeatureExtraction+0x64>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b17      	ldr	r3, [pc, #92]	; (8003efc <FeatureExtraction+0x68>)
 8003e9e:	4918      	ldr	r1, [pc, #96]	; (8003f00 <FeatureExtraction+0x6c>)
 8003ea0:	4818      	ldr	r0, [pc, #96]	; (8003f04 <FeatureExtraction+0x70>)
 8003ea2:	f000 f8d5 	bl	8004050 <Calculate_FFT_RMS>
	Calculate_All_statisitc(ZstatisticDataSet, dataLength/2, &Zstatistic_value);
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <FeatureExtraction+0x74>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <FeatureExtraction+0x68>)
 8003eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f889 	bl	8003fc8 <Calculate_All_statisitc>

	//Calculate X axis statistic
	Calculate_FFT_RMS(XfftInstance.bufferforFFT, testOutput, fftSize, &Xstatistic_value);
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <FeatureExtraction+0x64>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <FeatureExtraction+0x78>)
 8003ebc:	4910      	ldr	r1, [pc, #64]	; (8003f00 <FeatureExtraction+0x6c>)
 8003ebe:	4814      	ldr	r0, [pc, #80]	; (8003f10 <FeatureExtraction+0x7c>)
 8003ec0:	f000 f8c6 	bl	8004050 <Calculate_FFT_RMS>
	Calculate_All_statisitc(XstatisticDataSet, dataLength/2, &Xstatistic_value);
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <FeatureExtraction+0x80>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <FeatureExtraction+0x78>)
 8003eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f87a 	bl	8003fc8 <Calculate_All_statisitc>

	//Calculate Y axis statistic
	Calculate_FFT_RMS(YfftInstance.bufferforFFT , testOutput, fftSize, &Ystatistic_value);
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <FeatureExtraction+0x64>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <FeatureExtraction+0x84>)
 8003eda:	4909      	ldr	r1, [pc, #36]	; (8003f00 <FeatureExtraction+0x6c>)
 8003edc:	480f      	ldr	r0, [pc, #60]	; (8003f1c <FeatureExtraction+0x88>)
 8003ede:	f000 f8b7 	bl	8004050 <Calculate_FFT_RMS>
	Calculate_All_statisitc(YstatisticDataSet, dataLength/2, &Ystatistic_value);
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <FeatureExtraction+0x8c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <FeatureExtraction+0x84>)
 8003ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f86b 	bl	8003fc8 <Calculate_All_statisitc>


}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	2000243c 	.word	0x2000243c
 8003f00:	2000043c 	.word	0x2000043c
 8003f04:	20002924 	.word	0x20002924
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	20000244 	.word	0x20000244
 8003f10:	20008954 	.word	0x20008954
 8003f14:	20000008 	.word	0x20000008
 8003f18:	200002ec 	.word	0x200002ec
 8003f1c:	2000e9c4 	.word	0x2000e9c4
 8003f20:	2000000c 	.word	0x2000000c

08003f24 <Calculate_FreqOverAll>:
	float Kurtosis = m4 / (m2 * m2) - 3.0;
    return Kurtosis;
}

float Calculate_FreqOverAll(float *x, int n)
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
	float ParsevalFftPower = 0;
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
	float ans = 0;
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<n; i++)
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	e016      	b.n	8003f6e <Calculate_FreqOverAll+0x4a>
	{
		//FFTRMSArray[i] = (testOutput[i]*2)/4096;
		ParsevalFftPower += x[i] * x[i];
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	ed93 7a00 	vldr	s14, [r3]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f64:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i<n; i++)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	dbe4      	blt.n	8003f40 <Calculate_FreqOverAll+0x1c>
	}

	ans = sqrt(ParsevalFftPower)/n;
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7fc fb66 	bl	8000648 <__aeabi_f2d>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	ec44 3b10 	vmov	d0, r3, r4
 8003f84:	f007 fd54 	bl	800ba30 <sqrt>
 8003f88:	ec56 5b10 	vmov	r5, r6, d0
 8003f8c:	6838      	ldr	r0, [r7, #0]
 8003f8e:	f7fc fb49 	bl	8000624 <__aeabi_i2d>
 8003f92:	4603      	mov	r3, r0
 8003f94:	460c      	mov	r4, r1
 8003f96:	461a      	mov	r2, r3
 8003f98:	4623      	mov	r3, r4
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	f7fc fcd5 	bl	800094c <__aeabi_ddiv>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	4621      	mov	r1, r4
 8003faa:	f7fc fe7d 	bl	8000ca8 <__aeabi_d2f>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	60fb      	str	r3, [r7, #12]


	return ans;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	ee07 3a90 	vmov	s15, r3
}
 8003fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc2:	0000      	movs	r0, r0
 8003fc4:	0000      	movs	r0, r0
	...

08003fc8 <Calculate_All_statisitc>:

void Calculate_All_statisitc(float32_t *statisticDataSet, uint16_t dataLength, Sv *staticInstance)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	817b      	strh	r3, [r7, #10]
	uint32_t maxtestIndex = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
	uint32_t mintestIndex = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]

	arm_max_f32(statisticDataSet, dataLength, &staticInstance->Statistic_max, &maxtestIndex);
 8003fde:	8979      	ldrh	r1, [r7, #10]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7fd f910 	bl	800120c <arm_max_f32>
	arm_min_f32(statisticDataSet, dataLength, &staticInstance->Statistic_min, &mintestIndex);
 8003fec:	8979      	ldrh	r1, [r7, #10]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	f107 0310 	add.w	r3, r7, #16
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7fd f99e 	bl	8001338 <arm_min_f32>
	arm_rms_f32(statisticDataSet, dataLength, &staticInstance->Statistic_rms);
 8003ffc:	8979      	ldrh	r1, [r7, #10]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	330c      	adds	r3, #12
 8004002:	461a      	mov	r2, r3
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7fd fa4f 	bl	80014a8 <arm_rms_f32>
	staticInstance->Statistic_p2p = 0.80 * (staticInstance->Statistic_max - staticInstance->Statistic_min);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	ed93 7a00 	vldr	s14, [r3]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	edd3 7a01 	vldr	s15, [r3, #4]
 8004016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800401a:	ee17 0a90 	vmov	r0, s15
 800401e:	f7fc fb13 	bl	8000648 <__aeabi_f2d>
 8004022:	a309      	add	r3, pc, #36	; (adr r3, 8004048 <Calculate_All_statisitc+0x80>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc fb66 	bl	80006f8 <__aeabi_dmul>
 800402c:	4603      	mov	r3, r0
 800402e:	460c      	mov	r4, r1
 8004030:	4618      	mov	r0, r3
 8004032:	4621      	mov	r1, r4
 8004034:	f7fc fe38 	bl	8000ca8 <__aeabi_d2f>
 8004038:	4602      	mov	r2, r0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	67da      	str	r2, [r3, #124]	; 0x7c

}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd90      	pop	{r4, r7, pc}
 8004046:	bf00      	nop
 8004048:	9999999a 	.word	0x9999999a
 800404c:	3fe99999 	.word	0x3fe99999

08004050 <Calculate_FFT_RMS>:

void Calculate_FFT_RMS(float32_t * bufferforFFT, float32_t * OutputFFTbuffer, int32_t fftSize, Sv *staticInstance)
{
 8004050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004054:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8004058:	b08c      	sub	sp, #48	; 0x30
 800405a:	af00      	add	r7, sp, #0
 800405c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004060:	3c24      	subs	r4, #36	; 0x24
 8004062:	6020      	str	r0, [r4, #0]
 8004064:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004068:	3828      	subs	r0, #40	; 0x28
 800406a:	6001      	str	r1, [r0, #0]
 800406c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004070:	392c      	subs	r1, #44	; 0x2c
 8004072:	600a      	str	r2, [r1, #0]
 8004074:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004078:	3a30      	subs	r2, #48	; 0x30
 800407a:	6013      	str	r3, [r2, #0]
	float32_t maxValue = 0;
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8004084:	f102 0214 	add.w	r2, r2, #20
 8004088:	6013      	str	r3, [r2, #0]
	float32_t Speeddatabuffer[2048];
	uint32_t testIndex = 0;
 800408a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800408e:	3b20      	subs	r3, #32
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
	uint32_t ifftFlag = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800409a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800409e:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80040a6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80040aa:	6013      	str	r3, [r2, #0]

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, bufferforFFT, ifftFlag, doBitReverse);
 80040ac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80040b0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80040bc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80040c8:	3924      	subs	r1, #36	; 0x24
 80040ca:	6809      	ldr	r1, [r1, #0]
 80040cc:	4892      	ldr	r0, [pc, #584]	; (8004318 <Calculate_FFT_RMS+0x2c8>)
 80040ce:	f7fe fa8f 	bl	80025f0 <arm_cfft_f32>

	/* Process the data through the Complex Magnitude Module for
	calculating the magnitude at each bin */
	arm_cmplx_mag_f32(bufferforFFT, OutputFFTbuffer, fftSize);
 80040d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040d6:	3b2c      	subs	r3, #44	; 0x2c
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80040de:	3928      	subs	r1, #40	; 0x28
 80040e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040e4:	3b24      	subs	r3, #36	; 0x24
 80040e6:	6809      	ldr	r1, [r1, #0]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	f7fc ffcf 	bl	800108c <arm_cmplx_mag_f32>

	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(OutputFFTbuffer, fftSize, &maxValue, &testIndex);
 80040ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040f2:	3b2c      	subs	r3, #44	; 0x2c
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040fa:	3b20      	subs	r3, #32
 80040fc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8004100:	f102 0214 	add.w	r2, r2, #20
 8004104:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004108:	3828      	subs	r0, #40	; 0x28
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	f7fd f87e 	bl	800120c <arm_max_f32>


	for(uint16_t i = 0; i < fftSize; i++)
 8004110:	2300      	movs	r3, #0
 8004112:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8004116:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 800411a:	8013      	strh	r3, [r2, #0]
 800411c:	e021      	b.n	8004162 <Calculate_FFT_RMS+0x112>
	{
		Speeddatabuffer[i] = OutputFFTbuffer[i];
 800411e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004122:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800412e:	3b28      	subs	r3, #40	; 0x28
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4413      	add	r3, r2
 8004134:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8004138:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 800413c:	8811      	ldrh	r1, [r2, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004144:	3b1c      	subs	r3, #28
 8004146:	0089      	lsls	r1, r1, #2
 8004148:	440b      	add	r3, r1
 800414a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < fftSize; i++)
 800414c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004150:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800415c:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8004160:	8013      	strh	r3, [r2, #0]
 8004162:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004166:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004170:	3b2c      	subs	r3, #44	; 0x2c
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4293      	cmp	r3, r2
 8004176:	dcd2      	bgt.n	800411e <Calculate_FFT_RMS+0xce>
	}

	//TODO: remove low frequency noise (DC component)
	OutputFFTbuffer[0] = 0;
 8004178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800417c:	3b28      	subs	r3, #40	; 0x28
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[1] = 0;
 8004186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800418a:	3b28      	subs	r3, #40	; 0x28
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3304      	adds	r3, #4
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[2] = 0;
 8004196:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800419a:	3b28      	subs	r3, #40	; 0x28
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

	staticInstance->Statistic_FreqOvall = Calculate_FreqOverAll(OutputFFTbuffer,2048);
 80041a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041aa:	3b28      	subs	r3, #40	; 0x28
 80041ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f7ff feb7 	bl	8003f24 <Calculate_FreqOverAll>
 80041b6:	eef0 7a40 	vmov.f32	s15, s0
 80041ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041be:	3b30      	subs	r3, #48	; 0x30
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/*
	 * Compute Speed Ovall
	 *
	 * */
	float32_t sampleCount = 2048;
 80041c6:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80041ca:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80041ce:	f102 0220 	add.w	r2, r2, #32
 80041d2:	6013      	str	r3, [r2, #0]
	float32_t samplingRate = 3200;
 80041d4:	4b51      	ldr	r3, [pc, #324]	; (800431c <Calculate_FFT_RMS+0x2cc>)
 80041d6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80041da:	f102 021c 	add.w	r2, r2, #28
 80041de:	6013      	str	r3, [r2, #0]
	float32_t frequencyScale = samplingRate/sampleCount;
 80041e0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80041e4:	f103 031c 	add.w	r3, r3, #28
 80041e8:	edd3 6a00 	vldr	s13, [r3]
 80041ec:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80041f0:	f103 0320 	add.w	r3, r3, #32
 80041f4:	ed93 7a00 	vldr	s14, [r3]
 80041f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041fc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004200:	f103 0318 	add.w	r3, r3, #24
 8004204:	edc3 7a00 	vstr	s15, [r3]

	for(uint16_t i = 1; i < fftSize; i++)
 8004208:	2301      	movs	r3, #1
 800420a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800420e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8004212:	8013      	strh	r3, [r2, #0]
 8004214:	e0f5      	b.n	8004402 <Calculate_FFT_RMS+0x3b2>
	{
		if(i < fftSize/2)
 8004216:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800421a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004224:	3b2c      	subs	r3, #44	; 0x2c
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0fd9      	lsrs	r1, r3, #31
 800422a:	440b      	add	r3, r1
 800422c:	105b      	asrs	r3, r3, #1
 800422e:	429a      	cmp	r2, r3
 8004230:	da78      	bge.n	8004324 <Calculate_FFT_RMS+0x2d4>
		{
			if(i ==0)
 8004232:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004236:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d116      	bne.n	800426e <Calculate_FFT_RMS+0x21e>
			{
				Speeddatabuffer[i] = Speeddatabuffer[i];
 8004240:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004244:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800424e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004252:	8819      	ldrh	r1, [r3, #0]
 8004254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004258:	3b1c      	subs	r3, #28
 800425a:	0092      	lsls	r2, r2, #2
 800425c:	4413      	add	r3, r2
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004264:	3b1c      	subs	r3, #28
 8004266:	0089      	lsls	r1, r1, #2
 8004268:	440b      	add	r3, r1
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e0be      	b.n	80043ec <Calculate_FFT_RMS+0x39c>
			}
			else
			{
				Speeddatabuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 800426e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004272:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004276:	881a      	ldrh	r2, [r3, #0]
 8004278:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800427c:	3b1c      	subs	r3, #28
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4413      	add	r3, r2
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004320 <Calculate_FFT_RMS+0x2d0>
 800428a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800428e:	ee17 0a90 	vmov	r0, s15
 8004292:	f7fc f9d9 	bl	8000648 <__aeabi_f2d>
 8004296:	4604      	mov	r4, r0
 8004298:	460d      	mov	r5, r1
 800429a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800429e:	f103 0318 	add.w	r3, r3, #24
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	f7fc f9d0 	bl	8000648 <__aeabi_f2d>
 80042a8:	a319      	add	r3, pc, #100	; (adr r3, 8004310 <Calculate_FFT_RMS+0x2c0>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f7fc fa23 	bl	80006f8 <__aeabi_dmul>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4690      	mov	r8, r2
 80042b8:	4699      	mov	r9, r3
 80042ba:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80042be:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc f9ad 	bl	8000624 <__aeabi_i2d>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4640      	mov	r0, r8
 80042d0:	4649      	mov	r1, r9
 80042d2:	f7fc fa11 	bl	80006f8 <__aeabi_dmul>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f7fc fb35 	bl	800094c <__aeabi_ddiv>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	461a      	mov	r2, r3
 80042e8:	4623      	mov	r3, r4
 80042ea:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80042ee:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 80042f2:	880c      	ldrh	r4, [r1, #0]
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	f7fc fcd6 	bl	8000ca8 <__aeabi_d2f>
 80042fc:	4601      	mov	r1, r0
 80042fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004302:	3b1c      	subs	r3, #28
 8004304:	00a2      	lsls	r2, r4, #2
 8004306:	4413      	add	r3, r2
 8004308:	6019      	str	r1, [r3, #0]
 800430a:	e06f      	b.n	80043ec <Calculate_FFT_RMS+0x39c>
 800430c:	f3af 8000 	nop.w
 8004310:	4d12d84a 	.word	0x4d12d84a
 8004314:	401921fb 	.word	0x401921fb
 8004318:	08011cbc 	.word	0x08011cbc
 800431c:	45480000 	.word	0x45480000
 8004320:	46193c00 	.word	0x46193c00
			}

		}
		else if(i > fftSize/2)
 8004324:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004328:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800432c:	881a      	ldrh	r2, [r3, #0]
 800432e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004332:	3b2c      	subs	r3, #44	; 0x2c
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	0fd9      	lsrs	r1, r3, #31
 8004338:	440b      	add	r3, r1
 800433a:	105b      	asrs	r3, r3, #1
 800433c:	429a      	cmp	r2, r3
 800433e:	dd55      	ble.n	80043ec <Calculate_FFT_RMS+0x39c>
		{
			Speeddatabuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * abs(fftSize-i));
 8004340:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004344:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800434e:	3b1c      	subs	r3, #28
 8004350:	0092      	lsls	r2, r2, #2
 8004352:	4413      	add	r3, r2
 8004354:	edd3 7a00 	vldr	s15, [r3]
 8004358:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 8004320 <Calculate_FFT_RMS+0x2d0>
 800435c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004360:	ee17 0a90 	vmov	r0, s15
 8004364:	f7fc f970 	bl	8000648 <__aeabi_f2d>
 8004368:	4604      	mov	r4, r0
 800436a:	460d      	mov	r5, r1
 800436c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004370:	f103 0318 	add.w	r3, r3, #24
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	f7fc f967 	bl	8000648 <__aeabi_f2d>
 800437a:	a369      	add	r3, pc, #420	; (adr r3, 8004520 <Calculate_FFT_RMS+0x4d0>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc f9ba 	bl	80006f8 <__aeabi_dmul>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4690      	mov	r8, r2
 800438a:	4699      	mov	r9, r3
 800438c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004390:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004394:	881a      	ldrh	r2, [r3, #0]
 8004396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800439a:	3b2c      	subs	r3, #44	; 0x2c
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bfb8      	it	lt
 80043a4:	425b      	neglt	r3, r3
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc f93c 	bl	8000624 <__aeabi_i2d>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4640      	mov	r0, r8
 80043b2:	4649      	mov	r1, r9
 80043b4:	f7fc f9a0 	bl	80006f8 <__aeabi_dmul>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4620      	mov	r0, r4
 80043be:	4629      	mov	r1, r5
 80043c0:	f7fc fac4 	bl	800094c <__aeabi_ddiv>
 80043c4:	4603      	mov	r3, r0
 80043c6:	460c      	mov	r4, r1
 80043c8:	461a      	mov	r2, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80043d0:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 80043d4:	880c      	ldrh	r4, [r1, #0]
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	f7fc fc65 	bl	8000ca8 <__aeabi_d2f>
 80043de:	4601      	mov	r1, r0
 80043e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043e4:	3b1c      	subs	r3, #28
 80043e6:	00a2      	lsls	r2, r4, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 1; i < fftSize; i++)
 80043ec:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80043f0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80043fc:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8004400:	8013      	strh	r3, [r2, #0]
 8004402:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004406:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004410:	3b2c      	subs	r3, #44	; 0x2c
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4293      	cmp	r3, r2
 8004416:	f73f aefe 	bgt.w	8004216 <Calculate_FFT_RMS+0x1c6>
		}

	}

	Speeddatabuffer[0] = 0;
 800441a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800441e:	3b1c      	subs	r3, #28
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[1] = 0;
 8004426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800442a:	3b1c      	subs	r3, #28
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	605a      	str	r2, [r3, #4]
	Speeddatabuffer[2] = 0;
 8004432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004436:	3b1c      	subs	r3, #28
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
	Speeddatabuffer[3] = 0;
 800443e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004442:	3b1c      	subs	r3, #28
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	60da      	str	r2, [r3, #12]
	Speeddatabuffer[4] = 0;
 800444a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800444e:	3b1c      	subs	r3, #28
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	611a      	str	r2, [r3, #16]
	Speeddatabuffer[5] = 0;
 8004456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800445a:	3b1c      	subs	r3, #28
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	615a      	str	r2, [r3, #20]
	Speeddatabuffer[6] = 0;
 8004462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004466:	3b1c      	subs	r3, #28
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	619a      	str	r2, [r3, #24]

	Speeddatabuffer[2041] = 0;
 800446e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004472:	3b1c      	subs	r3, #28
 8004474:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8004478:	3304      	adds	r3, #4
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2042] = 0;
 8004480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004484:	3b1c      	subs	r3, #28
 8004486:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800448a:	3308      	adds	r3, #8
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2043] = 0;
 8004492:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004496:	3b1c      	subs	r3, #28
 8004498:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800449c:	330c      	adds	r3, #12
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2044] = 0;
 80044a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044a8:	3b1c      	subs	r3, #28
 80044aa:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80044ae:	3310      	adds	r3, #16
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2045] = 0;
 80044b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044ba:	3b1c      	subs	r3, #28
 80044bc:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80044c0:	3314      	adds	r3, #20
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2046] = 0;
 80044c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044cc:	3b1c      	subs	r3, #28
 80044ce:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80044d2:	3318      	adds	r3, #24
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[2047] = 0;
 80044da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044de:	3b1c      	subs	r3, #28
 80044e0:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80044e4:	331c      	adds	r3, #28
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]


	staticInstance->Statistic_SpeedOvall = Calculate_FreqOverAll(Speeddatabuffer,2048);
 80044ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044f0:	3b1c      	subs	r3, #28
 80044f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fd14 	bl	8003f24 <Calculate_FreqOverAll>
 80044fc:	eef0 7a40 	vmov.f32	s15, s0
 8004500:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004504:	3b30      	subs	r3, #48	; 0x30
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

}
 800450c:	bf00      	nop
 800450e:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8004512:	3730      	adds	r7, #48	; 0x30
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800451a:	bf00      	nop
 800451c:	f3af 8000 	nop.w
 8004520:	4d12d84a 	.word	0x4d12d84a
 8004524:	401921fb 	.word	0x401921fb

08004528 <delay_init>:

//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8004532:	4b0e      	ldr	r3, [pc, #56]	; (800456c <delay_init+0x44>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a0d      	ldr	r2, [pc, #52]	; (800456c <delay_init+0x44>)
 8004538:	f023 0304 	bic.w	r3, r3, #4
 800453c:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	08db      	lsrs	r3, r3, #3
 8004542:	b2da      	uxtb	r2, r3
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <delay_init+0x48>)
 8004546:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <delay_init+0x48>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	0152      	lsls	r2, r2, #5
 8004552:	1ad2      	subs	r2, r2, r3
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	b29a      	uxth	r2, r3
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <delay_init+0x4c>)
 800455e:	801a      	strh	r2, [r3, #0]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	e000e010 	.word	0xe000e010
 8004570:	20000229 	.word	0x20000229
 8004574:	2000022a 	.word	0x2000022a

08004578 <delay_ms>:
	SysTick->CTRL=0x00;       //關閉計數器
	SysTick->VAL =0X00;       //清空計數器
}

void delay_ms(uint16_t nms)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <delay_ms+0x60>)
 8004586:	8812      	ldrh	r2, [r2, #0]
 8004588:	4611      	mov	r1, r2
 800458a:	4a14      	ldr	r2, [pc, #80]	; (80045dc <delay_ms+0x64>)
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	6053      	str	r3, [r2, #4]
	//SysTick->LOAD=32;
	SysTick->VAL =0x00;           //清空計數器
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <delay_ms+0x64>)
 8004594:	2200      	movs	r2, #0
 8004596:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8004598:	4b10      	ldr	r3, [pc, #64]	; (80045dc <delay_ms+0x64>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0f      	ldr	r2, [pc, #60]	; (80045dc <delay_ms+0x64>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <delay_ms+0x64>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <delay_ms+0x46>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f2      	beq.n	80045a4 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <delay_ms+0x64>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <delay_ms+0x64>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2000022a 	.word	0x2000022a
 80045dc:	e000e010 	.word	0xe000e010

080045e0 <LoRa_USART>:
USART_LoRa USARTLoRa;

/* Private variables ---------------------------------------------------------*/

void LoRa_USART(UART_HandleTypeDef *huart)
{
 80045e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af04      	add	r7, sp, #16
 80045e8:	6078      	str	r0, [r7, #4]
    while(USARTLoRa.ResStatus!=LoRa_Sleep)
 80045ea:	e125      	b.n	8004838 <LoRa_USART+0x258>
    {
		switch(USARTLoRa.Status)
 80045ec:	4b98      	ldr	r3, [pc, #608]	; (8004850 <LoRa_USART+0x270>)
 80045ee:	f893 3394 	ldrb.w	r3, [r3, #916]	; 0x394
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	f200 8120 	bhi.w	8004838 <LoRa_USART+0x258>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <LoRa_USART+0x20>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	0800461d 	.word	0x0800461d
 8004604:	0800462d 	.word	0x0800462d
 8004608:	0800465b 	.word	0x0800465b
 800460c:	0800468b 	.word	0x0800468b
 8004610:	080046bf 	.word	0x080046bf
 8004614:	080047eb 	.word	0x080047eb
 8004618:	08004815 	.word	0x08004815
	    {
			case WakeUp:
				WakeUpTrigger(huart);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fbe5 	bl	8004dec <WakeUpTrigger>
				USARTLoRa.Status=CheckJoinST;
 8004622:	4b8b      	ldr	r3, [pc, #556]	; (8004850 <LoRa_USART+0x270>)
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
				break;
 800462a:	e105      	b.n	8004838 <LoRa_USART+0x258>

			case CheckJoinST:
				USARTLoRa.ResStatus=CheckJoinStatus(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fc09 	bl	8004e44 <CheckJoinStatus>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	4b86      	ldr	r3, [pc, #536]	; (8004850 <LoRa_USART+0x270>)
 8004638:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
				if(USARTLoRa.ResStatus==LoRa_joined)
 800463c:	4b84      	ldr	r3, [pc, #528]	; (8004850 <LoRa_USART+0x270>)
 800463e:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004642:	2b12      	cmp	r3, #18
 8004644:	d104      	bne.n	8004650 <LoRa_USART+0x70>
					USARTLoRa.Status=SendData;
 8004646:	4b82      	ldr	r3, [pc, #520]	; (8004850 <LoRa_USART+0x270>)
 8004648:	2204      	movs	r2, #4
 800464a:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
 800464e:	e0f3      	b.n	8004838 <LoRa_USART+0x258>
				else
					USARTLoRa.Status=Init;
 8004650:	4b7f      	ldr	r3, [pc, #508]	; (8004850 <LoRa_USART+0x270>)
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
				break;
 8004658:	e0ee      	b.n	8004838 <LoRa_USART+0x258>

	    	case Init:
	    		//-------Reset chip--------
	    		LoRaChipReset(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fb94 	bl	8004d88 <LoRaChipReset>
	    		USARTLoRa.ResStatus=LoRaInit(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f909 	bl	8004878 <LoRaInit>
 8004666:	4603      	mov	r3, r0
 8004668:	461a      	mov	r2, r3
 800466a:	4b79      	ldr	r3, [pc, #484]	; (8004850 <LoRa_USART+0x270>)
 800466c:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	    		if(USARTLoRa.ResStatus==LoRa_OK)
 8004670:	4b77      	ldr	r3, [pc, #476]	; (8004850 <LoRa_USART+0x270>)
 8004672:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 80de 	bne.w	8004838 <LoRa_USART+0x258>
	    		{
	    			LoRaChipReset(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb83 	bl	8004d88 <LoRaChipReset>
	    			USARTLoRa.Status=JoinABP;
 8004682:	4b73      	ldr	r3, [pc, #460]	; (8004850 <LoRa_USART+0x270>)
 8004684:	2203      	movs	r2, #3
 8004686:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
	    			//-------if initial fail, Reset chip-------------
	    			//LoRaChipReset(huart);
	    		break;

	    	case JoinABP:
	    		USARTLoRa.ResStatus=ActiveABPMode(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa5c 	bl	8004b48 <ActiveABPMode>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	4b6e      	ldr	r3, [pc, #440]	; (8004850 <LoRa_USART+0x270>)
 8004696:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	    		if(USARTLoRa.ResStatus==LoRa_OK)
 800469a:	4b6d      	ldr	r3, [pc, #436]	; (8004850 <LoRa_USART+0x270>)
 800469c:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <LoRa_USART+0xce>
	    			USARTLoRa.Status=SendData;
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <LoRa_USART+0x270>)
 80046a6:	2204      	movs	r2, #4
 80046a8:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
 80046ac:	e0c4      	b.n	8004838 <LoRa_USART+0x258>
	    		else
	    		{
	    			//-------if ActiveABPMode fail, Reset chip--------
	    			LoRaChipReset(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fb6a 	bl	8004d88 <LoRaChipReset>
	    			USARTLoRa.Status=Init;
 80046b4:	4b66      	ldr	r3, [pc, #408]	; (8004850 <LoRa_USART+0x270>)
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
	    		}
	    		break;
 80046bc:	e0bc      	b.n	8004838 <LoRa_USART+0x258>

	    	case SendData:
	    		USARTLoRa.sendflag = 1;
 80046be:	4b64      	ldr	r3, [pc, #400]	; (8004850 <LoRa_USART+0x270>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
            	if(USARTLoRa.sendflag ==1)
 80046c4:	4b62      	ldr	r3, [pc, #392]	; (8004850 <LoRa_USART+0x270>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80b5 	beq.w	8004838 <LoRa_USART+0x258>
            		//------Data Format transfer int & float to hex------------------------------------------------------------------
					//transfer data to string array:DataStrBuffer

            		//***********Put the Sensor Data Here to Transmit by LoRa*****************
            		//TODO:--Wayne20200723
            		sprintf(USARTLoRa.DataStrBuffer,"%.3f,%.3f,%.3f", Zstatistic_value.Statistic_FreqOvall,
 80046ce:	4b61      	ldr	r3, [pc, #388]	; (8004854 <LoRa_USART+0x274>)
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb ffb8 	bl	8000648 <__aeabi_f2d>
 80046d8:	4680      	mov	r8, r0
 80046da:	4689      	mov	r9, r1
            		            				Zstatistic_value.Statistic_p2p, Zstatistic_value.Statistic_SpeedOvall);
 80046dc:	4b5d      	ldr	r3, [pc, #372]	; (8004854 <LoRa_USART+0x274>)
 80046de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
            		sprintf(USARTLoRa.DataStrBuffer,"%.3f,%.3f,%.3f", Zstatistic_value.Statistic_FreqOvall,
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fb ffb1 	bl	8000648 <__aeabi_f2d>
 80046e6:	4604      	mov	r4, r0
 80046e8:	460d      	mov	r5, r1
            		            				Zstatistic_value.Statistic_p2p, Zstatistic_value.Statistic_SpeedOvall);
 80046ea:	4b5a      	ldr	r3, [pc, #360]	; (8004854 <LoRa_USART+0x274>)
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            		sprintf(USARTLoRa.DataStrBuffer,"%.3f,%.3f,%.3f", Zstatistic_value.Statistic_FreqOvall,
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fb ffaa 	bl	8000648 <__aeabi_f2d>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046fc:	e9cd 4500 	strd	r4, r5, [sp]
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	4954      	ldr	r1, [pc, #336]	; (8004858 <LoRa_USART+0x278>)
 8004706:	4855      	ldr	r0, [pc, #340]	; (800485c <LoRa_USART+0x27c>)
 8004708:	f005 fdb2 	bl	800a270 <siprintf>
            		//sprintf(USARTLoRa.DataStrBuffer,"1234567890");
            		//************************************************************************

            		//transfer data to hex array:DataHexBuffer
            		USARTLoRa.DataStrSize = min(Uart_Buffer_Size, strlen(USARTLoRa.DataStrBuffer));
 800470c:	4853      	ldr	r0, [pc, #332]	; (800485c <LoRa_USART+0x27c>)
 800470e:	f7fb fdd9 	bl	80002c4 <strlen>
 8004712:	4603      	mov	r3, r0
 8004714:	2bf6      	cmp	r3, #246	; 0xf6
 8004716:	d804      	bhi.n	8004722 <LoRa_USART+0x142>
 8004718:	4850      	ldr	r0, [pc, #320]	; (800485c <LoRa_USART+0x27c>)
 800471a:	f7fb fdd3 	bl	80002c4 <strlen>
 800471e:	4603      	mov	r3, r0
 8004720:	e000      	b.n	8004724 <LoRa_USART+0x144>
 8004722:	23f6      	movs	r3, #246	; 0xf6
 8004724:	4a4a      	ldr	r2, [pc, #296]	; (8004850 <LoRa_USART+0x270>)
 8004726:	f8c2 3390 	str.w	r3, [r2, #912]	; 0x390
            		static char toHexn, n;
            		memset( USARTLoRa.DataHexBuffer, 0, strlen(USARTLoRa.DataHexBuffer) ); //clear DataHexBuffer
 800472a:	484d      	ldr	r0, [pc, #308]	; (8004860 <LoRa_USART+0x280>)
 800472c:	f7fb fdca 	bl	80002c4 <strlen>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	2100      	movs	r1, #0
 8004736:	484a      	ldr	r0, [pc, #296]	; (8004860 <LoRa_USART+0x280>)
 8004738:	f005 f936 	bl	80099a8 <memset>
					for(toHexn=0; toHexn < USARTLoRa.DataStrSize; toHexn++)
 800473c:	4b49      	ldr	r3, [pc, #292]	; (8004864 <LoRa_USART+0x284>)
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e035      	b.n	80047b0 <LoRa_USART+0x1d0>
					{
						memset( USARTLoRa.DataHextemp, 0, strlen(USARTLoRa.DataHextemp) ); //clear DataHextemp
 8004744:	4848      	ldr	r0, [pc, #288]	; (8004868 <LoRa_USART+0x288>)
 8004746:	f7fb fdbd 	bl	80002c4 <strlen>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	2100      	movs	r1, #0
 8004750:	4845      	ldr	r0, [pc, #276]	; (8004868 <LoRa_USART+0x288>)
 8004752:	f005 f929 	bl	80099a8 <memset>
						sprintf(USARTLoRa.DataHextemp,"%x",USARTLoRa.DataStrBuffer[toHexn]);
 8004756:	4b43      	ldr	r3, [pc, #268]	; (8004864 <LoRa_USART+0x284>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	4b3c      	ldr	r3, [pc, #240]	; (8004850 <LoRa_USART+0x270>)
 800475e:	4413      	add	r3, r2
 8004760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004764:	461a      	mov	r2, r3
 8004766:	4941      	ldr	r1, [pc, #260]	; (800486c <LoRa_USART+0x28c>)
 8004768:	483f      	ldr	r0, [pc, #252]	; (8004868 <LoRa_USART+0x288>)
 800476a:	f005 fd81 	bl	800a270 <siprintf>
						USARTLoRa.DataHexBuffer[n]=USARTLoRa.DataHextemp[0];
 800476e:	4b40      	ldr	r3, [pc, #256]	; (8004870 <LoRa_USART+0x290>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <LoRa_USART+0x270>)
 8004776:	f893 2216 	ldrb.w	r2, [r3, #534]	; 0x216
 800477a:	4b35      	ldr	r3, [pc, #212]	; (8004850 <LoRa_USART+0x270>)
 800477c:	440b      	add	r3, r1
 800477e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
						USARTLoRa.DataHexBuffer[n+1]=USARTLoRa.DataHextemp[1];
 8004782:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <LoRa_USART+0x290>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	4a31      	ldr	r2, [pc, #196]	; (8004850 <LoRa_USART+0x270>)
 800478a:	f892 1217 	ldrb.w	r1, [r2, #535]	; 0x217
 800478e:	4a30      	ldr	r2, [pc, #192]	; (8004850 <LoRa_USART+0x270>)
 8004790:	4413      	add	r3, r2
 8004792:	460a      	mov	r2, r1
 8004794:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
						n+=2;
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <LoRa_USART+0x290>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	3302      	adds	r3, #2
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	4b33      	ldr	r3, [pc, #204]	; (8004870 <LoRa_USART+0x290>)
 80047a2:	701a      	strb	r2, [r3, #0]
					for(toHexn=0; toHexn < USARTLoRa.DataStrSize; toHexn++)
 80047a4:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <LoRa_USART+0x284>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <LoRa_USART+0x284>)
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <LoRa_USART+0x284>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b26      	ldr	r3, [pc, #152]	; (8004850 <LoRa_USART+0x270>)
 80047b8:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80047bc:	429a      	cmp	r2, r3
 80047be:	d3c1      	bcc.n	8004744 <LoRa_USART+0x164>
					}
					n = 0;
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <LoRa_USART+0x290>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
					//--------------------------------------------------------------------------------------------------------------------
					//transmit LED status
					//HAL_GPIO_WritePin(RLED_Port, RLED , GPIO_PIN_SET);
					USARTLoRa.ResStatus=LoRaTransmitData(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9f0 	bl	8004bac <LoRaTransmitData>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b1f      	ldr	r3, [pc, #124]	; (8004850 <LoRa_USART+0x270>)
 80047d2:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	    			if(USARTLoRa.ResStatus==LoRa_OK)
 80047d6:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <LoRa_USART+0x270>)
 80047d8:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d12b      	bne.n	8004838 <LoRa_USART+0x258>
	    				USARTLoRa.Status = waitTxRes;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <LoRa_USART+0x270>)
 80047e2:	2205      	movs	r2, #5
 80047e4:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394

            	}
	    		break;
 80047e8:	e026      	b.n	8004838 <LoRa_USART+0x258>

	    	case waitTxRes:
	    		USARTLoRa.ResStatus=LoRaTxResCheck("\n\r>> tx_ok\n");
 80047ea:	4822      	ldr	r0, [pc, #136]	; (8004874 <LoRa_USART+0x294>)
 80047ec:	f000 fa8c 	bl	8004d08 <LoRaTxResCheck>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	4b16      	ldr	r3, [pc, #88]	; (8004850 <LoRa_USART+0x270>)
 80047f6:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	    		if(USARTLoRa.ResStatus == LoRa_OK)
 80047fa:	4b15      	ldr	r3, [pc, #84]	; (8004850 <LoRa_USART+0x270>)
 80047fc:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004800:	2b00      	cmp	r3, #0
 8004802:	d119      	bne.n	8004838 <LoRa_USART+0x258>
	    		{
	    			//transmit LED status
	    			//HAL_GPIO_WritePin(RLED_Port, RLED , GPIO_PIN_RESET);
	    			USARTLoRa.sendflag = 0;
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <LoRa_USART+0x270>)
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
	    			USARTLoRa.Status = EnterSleepMode;
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <LoRa_USART+0x270>)
 800480c:	2206      	movs	r2, #6
 800480e:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
	    		}
	    		break;
 8004812:	e011      	b.n	8004838 <LoRa_USART+0x258>

	    	case EnterSleepMode:
				USARTLoRa.ResStatus=EnterSleep(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb37 	bl	8004e88 <EnterSleep>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <LoRa_USART+0x270>)
 8004820:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
				if(USARTLoRa.ResStatus==LoRa_Sleep)
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <LoRa_USART+0x270>)
 8004826:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 800482a:	2b14      	cmp	r3, #20
 800482c:	d103      	bne.n	8004836 <LoRa_USART+0x256>
					USARTLoRa.Status=WakeUp;
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <LoRa_USART+0x270>)
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
				break;
 8004836:	bf00      	nop
    while(USARTLoRa.ResStatus!=LoRa_Sleep)
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <LoRa_USART+0x270>)
 800483a:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 800483e:	2b14      	cmp	r3, #20
 8004840:	f47f aed4 	bne.w	80045ec <LoRa_USART+0xc>
	    }
	}
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800484e:	bf00      	nop
 8004850:	20002500 	.word	0x20002500
 8004854:	2000243c 	.word	0x2000243c
 8004858:	0800bd08 	.word	0x0800bd08
 800485c:	20002520 	.word	0x20002520
 8004860:	20002620 	.word	0x20002620
 8004864:	2000022c 	.word	0x2000022c
 8004868:	20002716 	.word	0x20002716
 800486c:	0800bd18 	.word	0x0800bd18
 8004870:	2000022d 	.word	0x2000022d
 8004874:	0800bd1c 	.word	0x0800bd1c

08004878 <LoRaInit>:



LoRa_StatusTypeDef LoRaInit(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	; 0x30
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	//---------------Set 0~15 channel radio frequency-------------------------
	char c;
	for(c=0;c<=15;c++)
 8004880:	2300      	movs	r3, #0
 8004882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004886:	e034      	b.n	80048f2 <LoRaInit+0x7a>
	{
		char frequcmd[32];
		sprintf(frequcmd,"mac set_ch_freq %d %d",c, RadioFreq);
 8004888:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800488c:	f107 000c 	add.w	r0, r7, #12
 8004890:	4ba1      	ldr	r3, [pc, #644]	; (8004b18 <LoRaInit+0x2a0>)
 8004892:	49a2      	ldr	r1, [pc, #648]	; (8004b1c <LoRaInit+0x2a4>)
 8004894:	f005 fcec 	bl	800a270 <siprintf>
		LoRaCommand(huart, frequcmd);
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f9b4 	bl	8004c0c <LoRaCommand>
		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 80048a4:	489e      	ldr	r0, [pc, #632]	; (8004b20 <LoRaInit+0x2a8>)
 80048a6:	f000 f9ed 	bl	8004c84 <LoRaResCheck>
 80048aa:	4603      	mov	r3, r0
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b9d      	ldr	r3, [pc, #628]	; (8004b24 <LoRaInit+0x2ac>)
 80048b0:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
		if(USARTLoRa.ResStatus != LoRa_OK)
 80048b4:	4b9b      	ldr	r3, [pc, #620]	; (8004b24 <LoRaInit+0x2ac>)
 80048b6:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <LoRaInit+0x4a>
			return LoRa_CF_FEQ_FAIL;
 80048be:	2302      	movs	r3, #2
 80048c0:	e125      	b.n	8004b0e <LoRaInit+0x296>
		//Save configure
		LoRaCommand(huart, LoRaSave);
 80048c2:	4999      	ldr	r1, [pc, #612]	; (8004b28 <LoRaInit+0x2b0>)
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f9a1 	bl	8004c0c <LoRaCommand>
		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 80048ca:	4895      	ldr	r0, [pc, #596]	; (8004b20 <LoRaInit+0x2a8>)
 80048cc:	f000 f9da 	bl	8004c84 <LoRaResCheck>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	4b93      	ldr	r3, [pc, #588]	; (8004b24 <LoRaInit+0x2ac>)
 80048d6:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
		if(USARTLoRa.ResStatus != LoRa_OK)
 80048da:	4b92      	ldr	r3, [pc, #584]	; (8004b24 <LoRaInit+0x2ac>)
 80048dc:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <LoRaInit+0x70>
			return LoRa_SAVE_FAIL;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e112      	b.n	8004b0e <LoRaInit+0x296>
	for(c=0;c<=15;c++)
 80048e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048ec:	3301      	adds	r3, #1
 80048ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80048f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048f6:	2b0f      	cmp	r3, #15
 80048f8:	d9c6      	bls.n	8004888 <LoRaInit+0x10>
	}

	//----------------Set Data rate(SF)--------------------------------------
	LoRaCommand(huart, CF_SFDataRate);
 80048fa:	498c      	ldr	r1, [pc, #560]	; (8004b2c <LoRaInit+0x2b4>)
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f985 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004902:	4887      	ldr	r0, [pc, #540]	; (8004b20 <LoRaInit+0x2a8>)
 8004904:	f000 f9be 	bl	8004c84 <LoRaResCheck>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	4b85      	ldr	r3, [pc, #532]	; (8004b24 <LoRaInit+0x2ac>)
 800490e:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004912:	4b84      	ldr	r3, [pc, #528]	; (8004b24 <LoRaInit+0x2ac>)
 8004914:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <LoRaInit+0xa8>
		return LoRa_CF_SF_FAIL;
 800491c:	2304      	movs	r3, #4
 800491e:	e0f6      	b.n	8004b0e <LoRaInit+0x296>
	//Save configure
	LoRaCommand(huart, LoRaSave);
 8004920:	4981      	ldr	r1, [pc, #516]	; (8004b28 <LoRaInit+0x2b0>)
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f972 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004928:	487d      	ldr	r0, [pc, #500]	; (8004b20 <LoRaInit+0x2a8>)
 800492a:	f000 f9ab 	bl	8004c84 <LoRaResCheck>
 800492e:	4603      	mov	r3, r0
 8004930:	461a      	mov	r2, r3
 8004932:	4b7c      	ldr	r3, [pc, #496]	; (8004b24 <LoRaInit+0x2ac>)
 8004934:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004938:	4b7a      	ldr	r3, [pc, #488]	; (8004b24 <LoRaInit+0x2ac>)
 800493a:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <LoRaInit+0xce>
		return LoRa_SAVE_FAIL;
 8004942:	2303      	movs	r3, #3
 8004944:	e0e3      	b.n	8004b0e <LoRaInit+0x296>

	//----------------Turn off auto Data rate--------------------------------------
		LoRaCommand(huart, ADRoff);
 8004946:	497a      	ldr	r1, [pc, #488]	; (8004b30 <LoRaInit+0x2b8>)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f95f 	bl	8004c0c <LoRaCommand>
		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 800494e:	4874      	ldr	r0, [pc, #464]	; (8004b20 <LoRaInit+0x2a8>)
 8004950:	f000 f998 	bl	8004c84 <LoRaResCheck>
 8004954:	4603      	mov	r3, r0
 8004956:	461a      	mov	r2, r3
 8004958:	4b72      	ldr	r3, [pc, #456]	; (8004b24 <LoRaInit+0x2ac>)
 800495a:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
		if(USARTLoRa.ResStatus != LoRa_OK)
 800495e:	4b71      	ldr	r3, [pc, #452]	; (8004b24 <LoRaInit+0x2ac>)
 8004960:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <LoRaInit+0xf4>
			return LoRa_CF_ADR_FAIL;
 8004968:	2305      	movs	r3, #5
 800496a:	e0d0      	b.n	8004b0e <LoRaInit+0x296>
		//Save configure
		LoRaCommand(huart, LoRaSave);
 800496c:	496e      	ldr	r1, [pc, #440]	; (8004b28 <LoRaInit+0x2b0>)
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f94c 	bl	8004c0c <LoRaCommand>
		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004974:	486a      	ldr	r0, [pc, #424]	; (8004b20 <LoRaInit+0x2a8>)
 8004976:	f000 f985 	bl	8004c84 <LoRaResCheck>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	4b69      	ldr	r3, [pc, #420]	; (8004b24 <LoRaInit+0x2ac>)
 8004980:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
		if(USARTLoRa.ResStatus != LoRa_OK)
 8004984:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <LoRaInit+0x2ac>)
 8004986:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <LoRaInit+0x11a>
			return LoRa_SAVE_FAIL;
 800498e:	2303      	movs	r3, #3
 8004990:	e0bd      	b.n	8004b0e <LoRaInit+0x296>

	//----------------Set Device EUI--------------------------------------
	LoRaCommand(huart, CF_DevEUI);
 8004992:	4968      	ldr	r1, [pc, #416]	; (8004b34 <LoRaInit+0x2bc>)
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f939 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 800499a:	4861      	ldr	r0, [pc, #388]	; (8004b20 <LoRaInit+0x2a8>)
 800499c:	f000 f972 	bl	8004c84 <LoRaResCheck>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b5f      	ldr	r3, [pc, #380]	; (8004b24 <LoRaInit+0x2ac>)
 80049a6:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 80049aa:	4b5e      	ldr	r3, [pc, #376]	; (8004b24 <LoRaInit+0x2ac>)
 80049ac:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <LoRaInit+0x140>
		return LoRa_CF_DevEUI_FAIL;
 80049b4:	2306      	movs	r3, #6
 80049b6:	e0aa      	b.n	8004b0e <LoRaInit+0x296>
	//Save configure
	LoRaCommand(huart, LoRaSave);
 80049b8:	495b      	ldr	r1, [pc, #364]	; (8004b28 <LoRaInit+0x2b0>)
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f926 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 80049c0:	4857      	ldr	r0, [pc, #348]	; (8004b20 <LoRaInit+0x2a8>)
 80049c2:	f000 f95f 	bl	8004c84 <LoRaResCheck>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b56      	ldr	r3, [pc, #344]	; (8004b24 <LoRaInit+0x2ac>)
 80049cc:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 80049d0:	4b54      	ldr	r3, [pc, #336]	; (8004b24 <LoRaInit+0x2ac>)
 80049d2:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <LoRaInit+0x166>
		return LoRa_SAVE_FAIL;
 80049da:	2303      	movs	r3, #3
 80049dc:	e097      	b.n	8004b0e <LoRaInit+0x296>

	//----------------Set Application EUI--------------------------------------
	LoRaCommand(huart, CF_AppEUI);
 80049de:	4956      	ldr	r1, [pc, #344]	; (8004b38 <LoRaInit+0x2c0>)
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f913 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 80049e6:	484e      	ldr	r0, [pc, #312]	; (8004b20 <LoRaInit+0x2a8>)
 80049e8:	f000 f94c 	bl	8004c84 <LoRaResCheck>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b4c      	ldr	r3, [pc, #304]	; (8004b24 <LoRaInit+0x2ac>)
 80049f2:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 80049f6:	4b4b      	ldr	r3, [pc, #300]	; (8004b24 <LoRaInit+0x2ac>)
 80049f8:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <LoRaInit+0x18c>
		return LoRa_CF_AppEUI_FAIL;
 8004a00:	2307      	movs	r3, #7
 8004a02:	e084      	b.n	8004b0e <LoRaInit+0x296>
	//Save configure
	LoRaCommand(huart, LoRaSave);
 8004a04:	4948      	ldr	r1, [pc, #288]	; (8004b28 <LoRaInit+0x2b0>)
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f900 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004a0c:	4844      	ldr	r0, [pc, #272]	; (8004b20 <LoRaInit+0x2a8>)
 8004a0e:	f000 f939 	bl	8004c84 <LoRaResCheck>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b43      	ldr	r3, [pc, #268]	; (8004b24 <LoRaInit+0x2ac>)
 8004a18:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004a1c:	4b41      	ldr	r3, [pc, #260]	; (8004b24 <LoRaInit+0x2ac>)
 8004a1e:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <LoRaInit+0x1b2>
		return LoRa_SAVE_FAIL;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e071      	b.n	8004b0e <LoRaInit+0x296>

	//----------------Set Device Address--------------------------------------
	LoRaCommand(huart, CF_DevAddr);
 8004a2a:	4944      	ldr	r1, [pc, #272]	; (8004b3c <LoRaInit+0x2c4>)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8ed 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004a32:	483b      	ldr	r0, [pc, #236]	; (8004b20 <LoRaInit+0x2a8>)
 8004a34:	f000 f926 	bl	8004c84 <LoRaResCheck>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4b39      	ldr	r3, [pc, #228]	; (8004b24 <LoRaInit+0x2ac>)
 8004a3e:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004a42:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <LoRaInit+0x2ac>)
 8004a44:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <LoRaInit+0x1d8>
		return LoRa_CF_DevAddr_FAIL;
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	e05e      	b.n	8004b0e <LoRaInit+0x296>
	//Save configure
	LoRaCommand(huart, LoRaSave);
 8004a50:	4935      	ldr	r1, [pc, #212]	; (8004b28 <LoRaInit+0x2b0>)
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8da 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004a58:	4831      	ldr	r0, [pc, #196]	; (8004b20 <LoRaInit+0x2a8>)
 8004a5a:	f000 f913 	bl	8004c84 <LoRaResCheck>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	461a      	mov	r2, r3
 8004a62:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <LoRaInit+0x2ac>)
 8004a64:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004a68:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <LoRaInit+0x2ac>)
 8004a6a:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <LoRaInit+0x1fe>
		return LoRa_SAVE_FAIL;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e04b      	b.n	8004b0e <LoRaInit+0x296>

	//----------------Set Network Session Key--------------------------------------
	LoRaCommand(huart, CF_NwksKey);
 8004a76:	4932      	ldr	r1, [pc, #200]	; (8004b40 <LoRaInit+0x2c8>)
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8c7 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004a7e:	4828      	ldr	r0, [pc, #160]	; (8004b20 <LoRaInit+0x2a8>)
 8004a80:	f000 f900 	bl	8004c84 <LoRaResCheck>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <LoRaInit+0x2ac>)
 8004a8a:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004a8e:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <LoRaInit+0x2ac>)
 8004a90:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <LoRaInit+0x224>
		return LoRa_CF_NwksKey_FAIL;
 8004a98:	2309      	movs	r3, #9
 8004a9a:	e038      	b.n	8004b0e <LoRaInit+0x296>
	//Save configure
	LoRaCommand(huart, LoRaSave);
 8004a9c:	4922      	ldr	r1, [pc, #136]	; (8004b28 <LoRaInit+0x2b0>)
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8b4 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004aa4:	481e      	ldr	r0, [pc, #120]	; (8004b20 <LoRaInit+0x2a8>)
 8004aa6:	f000 f8ed 	bl	8004c84 <LoRaResCheck>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <LoRaInit+0x2ac>)
 8004ab0:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <LoRaInit+0x2ac>)
 8004ab6:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <LoRaInit+0x24a>
		return LoRa_SAVE_FAIL;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e025      	b.n	8004b0e <LoRaInit+0x296>

	//----------------Set Application Session Key--------------------------------------
	LoRaCommand(huart, CF_AppsKey);
 8004ac2:	4920      	ldr	r1, [pc, #128]	; (8004b44 <LoRaInit+0x2cc>)
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f8a1 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004aca:	4815      	ldr	r0, [pc, #84]	; (8004b20 <LoRaInit+0x2a8>)
 8004acc:	f000 f8da 	bl	8004c84 <LoRaResCheck>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <LoRaInit+0x2ac>)
 8004ad6:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <LoRaInit+0x2ac>)
 8004adc:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <LoRaInit+0x270>
		return LoRa_CF_AppsKey_FAIL;
 8004ae4:	230a      	movs	r3, #10
 8004ae6:	e012      	b.n	8004b0e <LoRaInit+0x296>
	//Save configure
	LoRaCommand(huart, LoRaSave);
 8004ae8:	490f      	ldr	r1, [pc, #60]	; (8004b28 <LoRaInit+0x2b0>)
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f88e 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004af0:	480b      	ldr	r0, [pc, #44]	; (8004b20 <LoRaInit+0x2a8>)
 8004af2:	f000 f8c7 	bl	8004c84 <LoRaResCheck>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <LoRaInit+0x2ac>)
 8004afc:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <LoRaInit+0x2ac>)
 8004b02:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <LoRaInit+0x296>
		return LoRa_SAVE_FAIL;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e7ff      	b.n	8004b0e <LoRaInit+0x296>

}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3730      	adds	r7, #48	; 0x30
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	3689cac0 	.word	0x3689cac0
 8004b1c:	0800bd28 	.word	0x0800bd28
 8004b20:	0800bd40 	.word	0x0800bd40
 8004b24:	20002500 	.word	0x20002500
 8004b28:	0800bd4c 	.word	0x0800bd4c
 8004b2c:	0800bd58 	.word	0x0800bd58
 8004b30:	0800bd68 	.word	0x0800bd68
 8004b34:	0800bd78 	.word	0x0800bd78
 8004b38:	0800bd98 	.word	0x0800bd98
 8004b3c:	0800bdb8 	.word	0x0800bdb8
 8004b40:	0800bdd4 	.word	0x0800bdd4
 8004b44:	0800be08 	.word	0x0800be08

08004b48 <ActiveABPMode>:

LoRa_StatusTypeDef ActiveABPMode(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, ActiveABP);
 8004b50:	4912      	ldr	r1, [pc, #72]	; (8004b9c <ActiveABPMode+0x54>)
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f85a 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004b58:	4811      	ldr	r0, [pc, #68]	; (8004ba0 <ActiveABPMode+0x58>)
 8004b5a:	f000 f893 	bl	8004c84 <LoRaResCheck>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <ActiveABPMode+0x5c>)
 8004b64:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus == LoRa_OK)
 8004b68:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <ActiveABPMode+0x5c>)
 8004b6a:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10e      	bne.n	8004b90 <ActiveABPMode+0x48>
	{
		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> accepted\n");
 8004b72:	480d      	ldr	r0, [pc, #52]	; (8004ba8 <ActiveABPMode+0x60>)
 8004b74:	f000 f886 	bl	8004c84 <LoRaResCheck>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <ActiveABPMode+0x5c>)
 8004b7e:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
		if(USARTLoRa.ResStatus != LoRa_OK)
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <ActiveABPMode+0x5c>)
 8004b84:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <ActiveABPMode+0x4c>
			return LoRa_JoinABP_FAIL;
 8004b8c:	230c      	movs	r3, #12
 8004b8e:	e001      	b.n	8004b94 <ActiveABPMode+0x4c>
	}
	else
		return LoRa_ABPCMD_FAIL;
 8004b90:	230b      	movs	r3, #11
 8004b92:	e7ff      	b.n	8004b94 <ActiveABPMode+0x4c>
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	0800be3c 	.word	0x0800be3c
 8004ba0:	0800bd40 	.word	0x0800bd40
 8004ba4:	20002500 	.word	0x20002500
 8004ba8:	0800be4c 	.word	0x0800be4c

08004bac <LoRaTransmitData>:

LoRa_StatusTypeDef LoRaTransmitData(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b0c0      	sub	sp, #256	; 0x100
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	char RoLaTxCMD[Uart_Buffer_Size];
    sprintf(RoLaTxCMD,"%s%s",SendUcfP1, USARTLoRa.DataHexBuffer);
 8004bb4:	f107 0008 	add.w	r0, r7, #8
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <LoRaTransmitData+0x4c>)
 8004bba:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <LoRaTransmitData+0x50>)
 8004bbc:	4910      	ldr	r1, [pc, #64]	; (8004c00 <LoRaTransmitData+0x54>)
 8004bbe:	f005 fb57 	bl	800a270 <siprintf>
	LoRaCommand(huart, RoLaTxCMD);
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f81f 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 8004bce:	480d      	ldr	r0, [pc, #52]	; (8004c04 <LoRaTransmitData+0x58>)
 8004bd0:	f000 f858 	bl	8004c84 <LoRaResCheck>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <LoRaTransmitData+0x5c>)
 8004bda:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus == LoRa_OK)
 8004bde:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <LoRaTransmitData+0x5c>)
 8004be0:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <LoRaTransmitData+0x40>
		return LoRa_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <LoRaTransmitData+0x42>
	else
		return LoRa_TxCMD_FAIL;
 8004bec:	230d      	movs	r3, #13
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20002620 	.word	0x20002620
 8004bfc:	0800be5c 	.word	0x0800be5c
 8004c00:	0800be6c 	.word	0x0800be6c
 8004c04:	0800bd40 	.word	0x0800bd40
 8004c08:	20002500 	.word	0x20002500

08004c0c <LoRaCommand>:



void LoRaCommand(UART_HandleTypeDef *huart,  uint32_t *cmd)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
	memset(USARTLoRa.buffer, 0, strlen(USARTLoRa.buffer) ); //clear usart buffer
 8004c16:	4819      	ldr	r0, [pc, #100]	; (8004c7c <LoRaCommand+0x70>)
 8004c18:	f7fb fb54 	bl	80002c4 <strlen>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2100      	movs	r1, #0
 8004c22:	4816      	ldr	r0, [pc, #88]	; (8004c7c <LoRaCommand+0x70>)
 8004c24:	f004 fec0 	bl	80099a8 <memset>
	sprintf(USARTLoRa.buffer,cmd);
 8004c28:	6839      	ldr	r1, [r7, #0]
 8004c2a:	4814      	ldr	r0, [pc, #80]	; (8004c7c <LoRaCommand+0x70>)
 8004c2c:	f005 fb20 	bl	800a270 <siprintf>
	USARTLoRa.bufferSize = min(Uart_Buffer_Size, strlen(USARTLoRa.buffer));
 8004c30:	4812      	ldr	r0, [pc, #72]	; (8004c7c <LoRaCommand+0x70>)
 8004c32:	f7fb fb47 	bl	80002c4 <strlen>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2bf6      	cmp	r3, #246	; 0xf6
 8004c3a:	d804      	bhi.n	8004c46 <LoRaCommand+0x3a>
 8004c3c:	480f      	ldr	r0, [pc, #60]	; (8004c7c <LoRaCommand+0x70>)
 8004c3e:	f7fb fb41 	bl	80002c4 <strlen>
 8004c42:	4603      	mov	r3, r0
 8004c44:	e000      	b.n	8004c48 <LoRaCommand+0x3c>
 8004c46:	23f6      	movs	r3, #246	; 0xf6
 8004c48:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <LoRaCommand+0x74>)
 8004c4a:	f8c2 338c 	str.w	r3, [r2, #908]	; 0x38c
	USARTLoRa.sendTimeout = 50 ;
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <LoRaCommand+0x74>)
 8004c50:	2232      	movs	r2, #50	; 0x32
 8004c52:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	* @param huart   UART handle.
	* @param pData   Pointer to data buffer.
	* @param Size    Amount of data to be received.
	* @param Timeout Timeout duration.(ms)
	*/
	while(HAL_UART_Transmit(huart, &USARTLoRa.buffer, USARTLoRa.bufferSize, USARTLoRa.sendTimeout )!=HAL_OK);
 8004c56:	bf00      	nop
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <LoRaCommand+0x74>)
 8004c5a:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <LoRaCommand+0x74>)
 8004c62:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004c66:	4905      	ldr	r1, [pc, #20]	; (8004c7c <LoRaCommand+0x70>)
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f003 fe0c 	bl	8008886 <HAL_UART_Transmit>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f1      	bne.n	8004c58 <LoRaCommand+0x4c>
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20002720 	.word	0x20002720
 8004c80:	20002500 	.word	0x20002500

08004c84 <LoRaResCheck>:
LoRa_StatusTypeDef LoRaResCheck(uint32_t *Res)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	//memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
	while(!USARTLoRa.Revflag);
 8004c8c:	bf00      	nop
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <LoRaResCheck+0x78>)
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	f083 0301 	eor.w	r3, r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f8      	bne.n	8004c8e <LoRaResCheck+0xa>
	memset(USARTLoRa.Res_Check, 0, strlen(USARTLoRa.Res_Check) ); //clear LoRa response check string
 8004c9c:	4818      	ldr	r0, [pc, #96]	; (8004d00 <LoRaResCheck+0x7c>)
 8004c9e:	f7fb fb11 	bl	80002c4 <strlen>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4815      	ldr	r0, [pc, #84]	; (8004d00 <LoRaResCheck+0x7c>)
 8004caa:	f004 fe7d 	bl	80099a8 <memset>
	sprintf(USARTLoRa.Res_Check,Res);
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4813      	ldr	r0, [pc, #76]	; (8004d00 <LoRaResCheck+0x7c>)
 8004cb2:	f005 fadd 	bl	800a270 <siprintf>
	USARTLoRa.Revflag=0;
 8004cb6:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <LoRaResCheck+0x78>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	705a      	strb	r2, [r3, #1]

	if(strcmp( USARTLoRa.RevData, USARTLoRa.Res_Check ) == 0)
 8004cbc:	4910      	ldr	r1, [pc, #64]	; (8004d00 <LoRaResCheck+0x7c>)
 8004cbe:	4811      	ldr	r0, [pc, #68]	; (8004d04 <LoRaResCheck+0x80>)
 8004cc0:	f7fb faf6 	bl	80002b0 <strcmp>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <LoRaResCheck+0x5c>
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8004cca:	480e      	ldr	r0, [pc, #56]	; (8004d04 <LoRaResCheck+0x80>)
 8004ccc:	f7fb fafa 	bl	80002c4 <strlen>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	480b      	ldr	r0, [pc, #44]	; (8004d04 <LoRaResCheck+0x80>)
 8004cd8:	f004 fe66 	bl	80099a8 <memset>
		return LoRa_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e009      	b.n	8004cf4 <LoRaResCheck+0x70>

	}
	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8004ce0:	4808      	ldr	r0, [pc, #32]	; (8004d04 <LoRaResCheck+0x80>)
 8004ce2:	f7fb faef 	bl	80002c4 <strlen>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2100      	movs	r1, #0
 8004cec:	4805      	ldr	r0, [pc, #20]	; (8004d04 <LoRaResCheck+0x80>)
 8004cee:	f004 fe5b 	bl	80099a8 <memset>
		return LoRa_Res_Err;
 8004cf2:	2301      	movs	r3, #1
	}
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20002500 	.word	0x20002500
 8004d00:	20002860 	.word	0x20002860
 8004d04:	20002820 	.word	0x20002820

08004d08 <LoRaTxResCheck>:

LoRa_StatusTypeDef LoRaTxResCheck(uint32_t *Res)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	if(USARTLoRa.Revflag)
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <LoRaTxResCheck+0x74>)
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02c      	beq.n	8004d72 <LoRaTxResCheck+0x6a>
	{
		memset(USARTLoRa.Res_Check, 0, strlen(USARTLoRa.Res_Check) ); //clear LoRa response check string
 8004d18:	4819      	ldr	r0, [pc, #100]	; (8004d80 <LoRaTxResCheck+0x78>)
 8004d1a:	f7fb fad3 	bl	80002c4 <strlen>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	461a      	mov	r2, r3
 8004d22:	2100      	movs	r1, #0
 8004d24:	4816      	ldr	r0, [pc, #88]	; (8004d80 <LoRaTxResCheck+0x78>)
 8004d26:	f004 fe3f 	bl	80099a8 <memset>
		sprintf(USARTLoRa.Res_Check,Res);
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4814      	ldr	r0, [pc, #80]	; (8004d80 <LoRaTxResCheck+0x78>)
 8004d2e:	f005 fa9f 	bl	800a270 <siprintf>
		USARTLoRa.Revflag=0;
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <LoRaTxResCheck+0x74>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	705a      	strb	r2, [r3, #1]

		if(strcmp( USARTLoRa.RevData, USARTLoRa.Res_Check ) == 0)
 8004d38:	4911      	ldr	r1, [pc, #68]	; (8004d80 <LoRaTxResCheck+0x78>)
 8004d3a:	4812      	ldr	r0, [pc, #72]	; (8004d84 <LoRaTxResCheck+0x7c>)
 8004d3c:	f7fb fab8 	bl	80002b0 <strcmp>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <LoRaTxResCheck+0x54>
		{
			memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8004d46:	480f      	ldr	r0, [pc, #60]	; (8004d84 <LoRaTxResCheck+0x7c>)
 8004d48:	f7fb fabc 	bl	80002c4 <strlen>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2100      	movs	r1, #0
 8004d52:	480c      	ldr	r0, [pc, #48]	; (8004d84 <LoRaTxResCheck+0x7c>)
 8004d54:	f004 fe28 	bl	80099a8 <memset>
			return LoRa_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e00b      	b.n	8004d74 <LoRaTxResCheck+0x6c>
		}
		else
		{
			memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8004d5c:	4809      	ldr	r0, [pc, #36]	; (8004d84 <LoRaTxResCheck+0x7c>)
 8004d5e:	f7fb fab1 	bl	80002c4 <strlen>
 8004d62:	4603      	mov	r3, r0
 8004d64:	461a      	mov	r2, r3
 8004d66:	2100      	movs	r1, #0
 8004d68:	4806      	ldr	r0, [pc, #24]	; (8004d84 <LoRaTxResCheck+0x7c>)
 8004d6a:	f004 fe1d 	bl	80099a8 <memset>
			return LoRa_TxData_FAIL;
 8004d6e:	230e      	movs	r3, #14
 8004d70:	e000      	b.n	8004d74 <LoRaTxResCheck+0x6c>
		}
	}
	else
		return LoRa_TxData_WaitRes;
 8004d72:	230f      	movs	r3, #15
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20002500 	.word	0x20002500
 8004d80:	20002860 	.word	0x20002860
 8004d84:	20002820 	.word	0x20002820

08004d88 <LoRaChipReset>:

void LoRaChipReset(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	//USARTLoRa.ResetRevflag=1;
	LoRaCommand(huart, LoRaReset);
 8004d90:	4913      	ldr	r1, [pc, #76]	; (8004de0 <LoRaChipReset+0x58>)
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff ff3a 	bl	8004c0c <LoRaCommand>
	//receive reset response
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8004d98:	4812      	ldr	r0, [pc, #72]	; (8004de4 <LoRaChipReset+0x5c>)
 8004d9a:	f7fb fa93 	bl	80002c4 <strlen>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	2100      	movs	r1, #0
 8004da4:	480f      	ldr	r0, [pc, #60]	; (8004de4 <LoRaChipReset+0x5c>)
 8004da6:	f004 fdff 	bl	80099a8 <memset>
	while(!USARTLoRa.Revflag);
 8004daa:	bf00      	nop
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <LoRaChipReset+0x60>)
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	f083 0301 	eor.w	r3, r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f8      	bne.n	8004dac <LoRaChipReset+0x24>
	USARTLoRa.Revflag=0;
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <LoRaChipReset+0x60>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResetRevflag=0;
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <LoRaChipReset+0x60>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	709a      	strb	r2, [r3, #2]
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8004dc6:	4807      	ldr	r0, [pc, #28]	; (8004de4 <LoRaChipReset+0x5c>)
 8004dc8:	f7fb fa7c 	bl	80002c4 <strlen>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4804      	ldr	r0, [pc, #16]	; (8004de4 <LoRaChipReset+0x5c>)
 8004dd4:	f004 fde8 	bl	80099a8 <memset>
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	0800be74 	.word	0x0800be74
 8004de4:	20002820 	.word	0x20002820
 8004de8:	20002500 	.word	0x20002500

08004dec <WakeUpTrigger>:

LoRa_StatusTypeDef WakeUpTrigger(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, WKUPtigger);
 8004df4:	4910      	ldr	r1, [pc, #64]	; (8004e38 <WakeUpTrigger+0x4c>)
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ff08 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Unknown command!\n");
 8004dfc:	480f      	ldr	r0, [pc, #60]	; (8004e3c <WakeUpTrigger+0x50>)
 8004dfe:	f7ff ff41 	bl	8004c84 <LoRaResCheck>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <WakeUpTrigger+0x54>)
 8004e08:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <WakeUpTrigger+0x54>)
 8004e0e:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <WakeUpTrigger+0x40>
	{
		if(USARTLoRa.ResetRevflag)
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <WakeUpTrigger+0x54>)
 8004e18:	789b      	ldrb	r3, [r3, #2]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <WakeUpTrigger+0x3c>
		{
			USARTLoRa.ResetRevflag = 0;
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <WakeUpTrigger+0x54>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	709a      	strb	r2, [r3, #2]
			return LoRa_PowerUp;
 8004e24:	2311      	movs	r3, #17
 8004e26:	e002      	b.n	8004e2e <WakeUpTrigger+0x42>
		}
		else
			return LoRa_WaKeUp;
 8004e28:	2310      	movs	r3, #16
 8004e2a:	e000      	b.n	8004e2e <WakeUpTrigger+0x42>
	}
	else
		return LoRa_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	0800be80 	.word	0x0800be80
 8004e3c:	0800be88 	.word	0x0800be88
 8004e40:	20002500 	.word	0x20002500

08004e44 <CheckJoinStatus>:

LoRa_StatusTypeDef CheckJoinStatus(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, CkJoinSt);
 8004e4c:	490b      	ldr	r1, [pc, #44]	; (8004e7c <CheckJoinStatus+0x38>)
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fedc 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> joined\n");
 8004e54:	480a      	ldr	r0, [pc, #40]	; (8004e80 <CheckJoinStatus+0x3c>)
 8004e56:	f7ff ff15 	bl	8004c84 <LoRaResCheck>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <CheckJoinStatus+0x40>)
 8004e60:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus == LoRa_OK)
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <CheckJoinStatus+0x40>)
 8004e66:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <CheckJoinStatus+0x2e>
		return LoRa_joined;
 8004e6e:	2312      	movs	r3, #18
 8004e70:	e000      	b.n	8004e74 <CheckJoinStatus+0x30>
	else
		return LoRa_unjoined;
 8004e72:	2313      	movs	r3, #19
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	0800bea0 	.word	0x0800bea0
 8004e80:	0800beb4 	.word	0x0800beb4
 8004e84:	20002500 	.word	0x20002500

08004e88 <EnterSleep>:

LoRa_StatusTypeDef EnterSleep(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, Sleep4200s);
 8004e90:	490b      	ldr	r1, [pc, #44]	; (8004ec0 <EnterSleep+0x38>)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff feba 	bl	8004c0c <LoRaCommand>
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> sleep 4200 sec uart_on\n");
 8004e98:	480a      	ldr	r0, [pc, #40]	; (8004ec4 <EnterSleep+0x3c>)
 8004e9a:	f7ff fef3 	bl	8004c84 <LoRaResCheck>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <EnterSleep+0x40>)
 8004ea4:	f883 2395 	strb.w	r2, [r3, #917]	; 0x395
	if(USARTLoRa.ResStatus == LoRa_OK)
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <EnterSleep+0x40>)
 8004eaa:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <EnterSleep+0x2e>
		return LoRa_Sleep;
 8004eb2:	2314      	movs	r3, #20
 8004eb4:	e000      	b.n	8004eb8 <EnterSleep+0x30>
	else
		return LoRa_Sleep_FAIL;
 8004eb6:	2315      	movs	r3, #21
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	0800bec4 	.word	0x0800bec4
 8004ec4:	0800bedc 	.word	0x0800bedc
 8004ec8:	20002500 	.word	0x20002500

08004ecc <EnterStandbyPWR_Mode>:
/* Private variables ---------------------------------------------------------*/
PWRST_t PWRST;


void EnterStandbyPWR_Mode(RTC_HandleTypeDef *hrtc)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
	*/

	//-------RTC Wake up setting---------------------
	//Set StnadbyTime
	PWRST.StandbyTime_Sec = 10 ;
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <EnterStandbyPWR_Mode+0x34>)
 8004ed6:	220a      	movs	r2, #10
 8004ed8:	805a      	strh	r2, [r3, #2]
	//set RTC WakeUpTimer
	if (HAL_RTCEx_SetWakeUpTimer_IT(hrtc, PWRST.StandbyTime_Sec, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8004eda:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <EnterStandbyPWR_Mode+0x34>)
 8004edc:	885b      	ldrh	r3, [r3, #2]
 8004ede:	2204      	movs	r2, #4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f002 fcf0 	bl	80078c8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <EnterStandbyPWR_Mode+0x26>
	{
		Error_Handler();
 8004eee:	f000 fb29 	bl	8005544 <Error_Handler>
	}
	/* Request to enter STANDBY mode  */
	HAL_PWR_EnterSTANDBYMode();
 8004ef2:	f001 f86d 	bl	8005fd0 <HAL_PWR_EnterSTANDBYMode>
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200028a0 	.word	0x200028a0

08004f04 <RUN_PWR_Mode_Init>:

void RUN_PWR_Mode_Init(RTC_HandleTypeDef *hrtc)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
	}
	*/
	//-------RTC Wake up setting---------------------
	//Disable RTC WakeUpTimer
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f002 fd6f 	bl	80079f0 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f20:	f000 fcb9 	bl	8005896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f24:	f000 f85c 	bl	8004fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f28:	f000 f970 	bl	800520c <MX_GPIO_Init>
  MX_RTC_Init();
 8004f2c:	f000 f8d8 	bl	80050e0 <MX_RTC_Init>
  MX_SPI1_Init();
 8004f30:	f000 f8fe 	bl	8005130 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8004f34:	f000 f93a 	bl	80051ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //TODO--Wayne20200925
  RUN_PWR_Mode_Init(&hrtc);
 8004f38:	4822      	ldr	r0, [pc, #136]	; (8004fc4 <main+0xa8>)
 8004f3a:	f7ff ffe3 	bl	8004f04 <RUN_PWR_Mode_Init>
  USARTLoRa.Status=WakeUp;
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <main+0xac>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2394 	strb.w	r2, [r3, #916]	; 0x394
  while(HAL_UART_Receive_IT(&huart3,&USARTLoRa.Rbuffer,1)!=HAL_OK);
 8004f46:	bf00      	nop
 8004f48:	2201      	movs	r2, #1
 8004f4a:	4920      	ldr	r1, [pc, #128]	; (8004fcc <main+0xb0>)
 8004f4c:	4820      	ldr	r0, [pc, #128]	; (8004fd0 <main+0xb4>)
 8004f4e:	f003 fd2d 	bl	80089ac <HAL_UART_Receive_IT>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f7      	bne.n	8004f48 <main+0x2c>
  //delay_init(168);
  delay_init(80);//STM32L4A6 HCLK=80MHz
 8004f58:	2050      	movs	r0, #80	; 0x50
 8004f5a:	f7ff fae5 	bl	8004528 <delay_init>
  ADXL345_Init();
 8004f5e:	f7fe fdeb 	bl	8003b38 <ADXL345_Init>

	//TODO:ADXL345 Wake-up
	//ADXL_Measure(ON);
	//delay_s(5);
	//TODO:ADXL345 Measure
    while(sampleIndex < dataLength/2)
 8004f62:	e019      	b.n	8004f98 <main+0x7c>
    {
    	ADXL_IntProto();
 8004f64:	f7fe fdd8 	bl	8003b18 <ADXL_IntProto>
    	readRegister(DATA0,data,6);
 8004f68:	2206      	movs	r2, #6
 8004f6a:	491a      	ldr	r1, [pc, #104]	; (8004fd4 <main+0xb8>)
 8004f6c:	2032      	movs	r0, #50	; 0x32
 8004f6e:	f7fe fc19 	bl	80037a4 <readRegister>
    	if(dataReady == true)
 8004f72:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <main+0xbc>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10e      	bne.n	8004f98 <main+0x7c>
    	    {
    	    	 AcquireData(&data);
 8004f7a:	4816      	ldr	r0, [pc, #88]	; (8004fd4 <main+0xb8>)
 8004f7c:	f7fe fe10 	bl	8003ba0 <AcquireData>

    			sampleIndex++;
 8004f80:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <main+0xc0>)
 8004f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3301      	adds	r3, #1
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	b21a      	sxth	r2, r3
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <main+0xc0>)
 8004f90:	801a      	strh	r2, [r3, #0]
    			dataReady = false;
 8004f92:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <main+0xbc>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
    while(sampleIndex < dataLength/2)
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <main+0xc0>)
 8004f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa2:	dbdf      	blt.n	8004f64 <main+0x48>
    	    }
    }
    FeatureExtraction();
 8004fa4:	f7fe ff76 	bl	8003e94 <FeatureExtraction>
    sampleIndex = 0;
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <main+0xc0>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	801a      	strh	r2, [r3, #0]

    //TODO:ADXL345 Standby Entry
    ADXL_Standby(ON);
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7fe fd81 	bl	8003ab6 <ADXL_Standby>

    //TODO:Lora send data
    LoRa_USART(&huart3);
 8004fb4:	4806      	ldr	r0, [pc, #24]	; (8004fd0 <main+0xb4>)
 8004fb6:	f7ff fb13 	bl	80045e0 <LoRa_USART>
    //delay_s(5);
    //TODO:MCU Standby Entry
    EnterStandbyPWR_Mode(&hrtc);
 8004fba:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <main+0xa8>)
 8004fbc:	f7ff ff86 	bl	8004ecc <EnterStandbyPWR_Mode>
    while(sampleIndex < dataLength/2)
 8004fc0:	e7ea      	b.n	8004f98 <main+0x7c>
 8004fc2:	bf00      	nop
 8004fc4:	20008930 	.word	0x20008930
 8004fc8:	20002500 	.word	0x20002500
 8004fcc:	20002816 	.word	0x20002816
 8004fd0:	200028a4 	.word	0x200028a4
 8004fd4:	20000230 	.word	0x20000230
 8004fd8:	20000010 	.word	0x20000010
 8004fdc:	20000236 	.word	0x20000236

08004fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b0ba      	sub	sp, #232	; 0xe8
 8004fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fe6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004fea:	2244      	movs	r2, #68	; 0x44
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f004 fcda 	bl	80099a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ff4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	228c      	movs	r2, #140	; 0x8c
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f004 fccc 	bl	80099a8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8005010:	2318      	movs	r3, #24
 8005012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005016:	2301      	movs	r3, #1
 8005018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800501c:	2301      	movs	r3, #1
 800501e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005028:	2360      	movs	r3, #96	; 0x60
 800502a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800502e:	2302      	movs	r3, #2
 8005030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005034:	2301      	movs	r3, #1
 8005036:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800503a:	2301      	movs	r3, #1
 800503c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005040:	2328      	movs	r3, #40	; 0x28
 8005042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005046:	2302      	movs	r3, #2
 8005048:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800504c:	2302      	movs	r3, #2
 800504e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005052:	2302      	movs	r3, #2
 8005054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005058:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800505c:	4618      	mov	r0, r3
 800505e:	f001 f835 	bl	80060cc <HAL_RCC_OscConfig>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8005068:	f000 fa6c 	bl	8005544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800506c:	230f      	movs	r3, #15
 800506e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005072:	2303      	movs	r3, #3
 8005074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005078:	2300      	movs	r3, #0
 800507a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800507e:	2300      	movs	r3, #0
 8005080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005084:	2300      	movs	r3, #0
 8005086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800508a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800508e:	2104      	movs	r1, #4
 8005090:	4618      	mov	r0, r3
 8005092:	f001 fc41 	bl	8006918 <HAL_RCC_ClockConfig>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800509c:	f000 fa52 	bl	8005544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3;
 80050a0:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <SystemClock_Config+0xfc>)
 80050a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80050a4:	2300      	movs	r3, #0
 80050a6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80050a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050b0:	1d3b      	adds	r3, r7, #4
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 fe34 	bl	8006d20 <HAL_RCCEx_PeriphCLKConfig>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80050be:	f000 fa41 	bl	8005544 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80050c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80050c6:	f000 ffab 	bl	8006020 <HAL_PWREx_ControlVoltageScaling>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80050d0:	f000 fa38 	bl	8005544 <Error_Handler>
  }
}
 80050d4:	bf00      	nop
 80050d6:	37e8      	adds	r7, #232	; 0xe8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	00020004 	.word	0x00020004

080050e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80050e4:	4b10      	ldr	r3, [pc, #64]	; (8005128 <MX_RTC_Init+0x48>)
 80050e6:	4a11      	ldr	r2, [pc, #68]	; (800512c <MX_RTC_Init+0x4c>)
 80050e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <MX_RTC_Init+0x48>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80050f0:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <MX_RTC_Init+0x48>)
 80050f2:	227f      	movs	r2, #127	; 0x7f
 80050f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <MX_RTC_Init+0x48>)
 80050f8:	22ff      	movs	r2, #255	; 0xff
 80050fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <MX_RTC_Init+0x48>)
 80050fe:	2200      	movs	r2, #0
 8005100:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <MX_RTC_Init+0x48>)
 8005104:	2200      	movs	r2, #0
 8005106:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005108:	4b07      	ldr	r3, [pc, #28]	; (8005128 <MX_RTC_Init+0x48>)
 800510a:	2200      	movs	r2, #0
 800510c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <MX_RTC_Init+0x48>)
 8005110:	2200      	movs	r2, #0
 8005112:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005114:	4804      	ldr	r0, [pc, #16]	; (8005128 <MX_RTC_Init+0x48>)
 8005116:	f002 fac5 	bl	80076a4 <HAL_RTC_Init>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8005120:	f000 fa10 	bl	8005544 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005124:	bf00      	nop
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20008930 	.word	0x20008930
 800512c:	40002800 	.word	0x40002800

08005130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005136:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <MX_SPI1_Init+0x78>)
 8005138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <MX_SPI1_Init+0x74>)
 800513c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005148:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <MX_SPI1_Init+0x74>)
 800514a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800514e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005152:	2202      	movs	r2, #2
 8005154:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005156:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005158:	2201      	movs	r2, #1
 800515a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800515c:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <MX_SPI1_Init+0x74>)
 800515e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005162:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005166:	2220      	movs	r2, #32
 8005168:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <MX_SPI1_Init+0x74>)
 800516c:	2200      	movs	r2, #0
 800516e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005172:	2200      	movs	r2, #0
 8005174:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005178:	2200      	movs	r2, #0
 800517a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800517c:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <MX_SPI1_Init+0x74>)
 800517e:	2207      	movs	r2, #7
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <MX_SPI1_Init+0x74>)
 800518a:	2200      	movs	r2, #0
 800518c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800518e:	4805      	ldr	r0, [pc, #20]	; (80051a4 <MX_SPI1_Init+0x74>)
 8005190:	f002 fc8b 	bl	8007aaa <HAL_SPI_Init>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800519a:	f000 f9d3 	bl	8005544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2000e960 	.word	0x2000e960
 80051a8:	40013000 	.word	0x40013000

080051ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80051b0:	4b14      	ldr	r3, [pc, #80]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <MX_USART3_UART_Init+0x5c>)
 80051b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80051b6:	4b13      	ldr	r3, [pc, #76]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051d2:	220c      	movs	r2, #12
 80051d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051d8:	2200      	movs	r2, #0
 80051da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051de:	2200      	movs	r2, #0
 80051e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80051ee:	4805      	ldr	r0, [pc, #20]	; (8005204 <MX_USART3_UART_Init+0x58>)
 80051f0:	f003 fafb 	bl	80087ea <HAL_UART_Init>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80051fa:	f000 f9a3 	bl	8005544 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200028a4 	.word	0x200028a4
 8005208:	40004800 	.word	0x40004800

0800520c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005212:	f107 0314 	add.w	r3, r7, #20
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	605a      	str	r2, [r3, #4]
 800521c:	609a      	str	r2, [r3, #8]
 800521e:	60da      	str	r2, [r3, #12]
 8005220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005222:	4b4d      	ldr	r3, [pc, #308]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005226:	4a4c      	ldr	r2, [pc, #304]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005228:	f043 0304 	orr.w	r3, r3, #4
 800522c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800522e:	4b4a      	ldr	r3, [pc, #296]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800523a:	4b47      	ldr	r3, [pc, #284]	; (8005358 <MX_GPIO_Init+0x14c>)
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523e:	4a46      	ldr	r2, [pc, #280]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005246:	4b44      	ldr	r3, [pc, #272]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005252:	4b41      	ldr	r3, [pc, #260]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	4a40      	ldr	r2, [pc, #256]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005258:	f043 0308 	orr.w	r3, r3, #8
 800525c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800525e:	4b3e      	ldr	r3, [pc, #248]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800526a:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <MX_GPIO_Init+0x14c>)
 800526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526e:	4a3a      	ldr	r2, [pc, #232]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005276:	4b38      	ldr	r3, [pc, #224]	; (8005358 <MX_GPIO_Init+0x14c>)
 8005278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	607b      	str	r3, [r7, #4]
 8005280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005282:	2200      	movs	r2, #0
 8005284:	2110      	movs	r1, #16
 8005286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800528a:	f000 fe71 	bl	8005f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800528e:	2201      	movs	r2, #1
 8005290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005294:	4831      	ldr	r0, [pc, #196]	; (800535c <MX_GPIO_Init+0x150>)
 8005296:	f000 fe6b 	bl	8005f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800529a:	2200      	movs	r2, #0
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	4830      	ldr	r0, [pc, #192]	; (8005360 <MX_GPIO_Init+0x154>)
 80052a0:	f000 fe66 	bl	8005f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80052a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052aa:	4b2e      	ldr	r3, [pc, #184]	; (8005364 <MX_GPIO_Init+0x158>)
 80052ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052b2:	f107 0314 	add.w	r3, r7, #20
 80052b6:	4619      	mov	r1, r3
 80052b8:	482b      	ldr	r0, [pc, #172]	; (8005368 <MX_GPIO_Init+0x15c>)
 80052ba:	f000 fcaf 	bl	8005c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052be:	2304      	movs	r3, #4
 80052c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052c2:	4b28      	ldr	r3, [pc, #160]	; (8005364 <MX_GPIO_Init+0x158>)
 80052c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ca:	f107 0314 	add.w	r3, r7, #20
 80052ce:	4619      	mov	r1, r3
 80052d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052d4:	f000 fca2 	bl	8005c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80052d8:	2310      	movs	r3, #16
 80052da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052dc:	2301      	movs	r3, #1
 80052de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e4:	2300      	movs	r3, #0
 80052e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4619      	mov	r1, r3
 80052ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052f2:	f000 fc93 	bl	8005c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052fc:	2301      	movs	r3, #1
 80052fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005300:	2301      	movs	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005304:	2300      	movs	r3, #0
 8005306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005308:	f107 0314 	add.w	r3, r7, #20
 800530c:	4619      	mov	r1, r3
 800530e:	4813      	ldr	r0, [pc, #76]	; (800535c <MX_GPIO_Init+0x150>)
 8005310:	f000 fc84 	bl	8005c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005318:	2301      	movs	r3, #1
 800531a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005320:	2300      	movs	r3, #0
 8005322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	4619      	mov	r1, r3
 800532a:	480d      	ldr	r0, [pc, #52]	; (8005360 <MX_GPIO_Init+0x154>)
 800532c:	f000 fc76 	bl	8005c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005330:	2200      	movs	r2, #0
 8005332:	2100      	movs	r1, #0
 8005334:	2008      	movs	r0, #8
 8005336:	f000 fbfa 	bl	8005b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800533a:	2008      	movs	r0, #8
 800533c:	f000 fc13 	bl	8005b66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8005340:	2200      	movs	r2, #0
 8005342:	2101      	movs	r1, #1
 8005344:	2028      	movs	r0, #40	; 0x28
 8005346:	f000 fbf2 	bl	8005b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800534a:	2028      	movs	r0, #40	; 0x28
 800534c:	f000 fc0b 	bl	8005b66 <HAL_NVIC_EnableIRQ>

}
 8005350:	bf00      	nop
 8005352:	3728      	adds	r7, #40	; 0x28
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	48000c00 	.word	0x48000c00
 8005360:	48000400 	.word	0x48000400
 8005364:	10110000 	.word	0x10110000
 8005368:	48000800 	.word	0x48000800

0800536c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//TODO-Wayne0200924
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)//trigger start pin PC13
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537c:	d114      	bne.n	80053a8 <HAL_GPIO_EXTI_Callback+0x3c>
  {
	  delay_ms(10);
 800537e:	200a      	movs	r0, #10
 8005380:	f7ff f8fa 	bl	8004578 <delay_ms>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_SET)
 8005384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005388:	4819      	ldr	r0, [pc, #100]	; (80053f0 <HAL_GPIO_EXTI_Callback+0x84>)
 800538a:	f000 fdd9 	bl	8005f40 <HAL_GPIO_ReadPin>
 800538e:	4603      	mov	r3, r0
 8005390:	2b01      	cmp	r3, #1
 8005392:	d109      	bne.n	80053a8 <HAL_GPIO_EXTI_Callback+0x3c>
	  {
		  if(!PWRST.WLUP_BTstatus )
 8005394:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <HAL_GPIO_EXTI_Callback+0x88>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f083 0301 	eor.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_GPIO_EXTI_Callback+0x3c>
			  PWRST.WLUP_BTstatus = 1;
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <HAL_GPIO_EXTI_Callback+0x88>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]
	  }
  }
  if(GPIO_Pin == GPIO_PIN_2)//SPI CS
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d11c      	bne.n	80053e8 <HAL_GPIO_EXTI_Callback+0x7c>
	{
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)==GPIO_PIN_SET)
 80053ae:	2104      	movs	r1, #4
 80053b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053b4:	f000 fdc4 	bl	8005f40 <HAL_GPIO_ReadPin>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d102      	bne.n	80053c4 <HAL_GPIO_EXTI_Callback+0x58>
		  dataReady = true;
 80053be:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
	  sampleCount++;
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <HAL_GPIO_EXTI_Callback+0x90>)
 80053c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	b21a      	sxth	r2, r3
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <HAL_GPIO_EXTI_Callback+0x90>)
 80053d4:	801a      	strh	r2, [r3, #0]
	  if(sampleCount > 2048)
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_GPIO_EXTI_Callback+0x90>)
 80053d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e0:	dd02      	ble.n	80053e8 <HAL_GPIO_EXTI_Callback+0x7c>
	  {
		  sampleCount = 0;
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <HAL_GPIO_EXTI_Callback+0x90>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	801a      	strh	r2, [r3, #0]
	  }


	}
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	48000800 	.word	0x48000800
 80053f4:	200028a0 	.word	0x200028a0
 80053f8:	20000010 	.word	0x20000010
 80053fc:	2000022e 	.word	0x2000022e

08005400 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */

  USARTLoRa.RevStrCount++; //all string receive count
 8005408:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800540a:	f893 3385 	ldrb.w	r3, [r3, #901]	; 0x385
 800540e:	3301      	adds	r3, #1
 8005410:	b2da      	uxtb	r2, r3
 8005412:	4b48      	ldr	r3, [pc, #288]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005414:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
  if(USARTLoRa.Rbuffer==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command
 8005418:	4b46      	ldr	r3, [pc, #280]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800541a:	f893 3316 	ldrb.w	r3, [r3, #790]	; 0x316
 800541e:	2b0a      	cmp	r3, #10
 8005420:	d114      	bne.n	800544c <HAL_UART_RxCpltCallback+0x4c>
  {
	  USARTLoRa.RevStrEndCount++;//0x0a("\n" Line feeds string) count
 8005422:	4b44      	ldr	r3, [pc, #272]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005424:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8005428:	3301      	adds	r3, #1
 800542a:	b2da      	uxtb	r2, r3
 800542c:	4b41      	ldr	r3, [pc, #260]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800542e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
	  if( USARTLoRa.RevStrEndCount==1	&&	USARTLoRa.RevStrCount > 1)
 8005432:	4b40      	ldr	r3, [pc, #256]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005434:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8005438:	2b01      	cmp	r3, #1
 800543a:	d107      	bne.n	800544c <HAL_UART_RxCpltCallback+0x4c>
 800543c:	4b3d      	ldr	r3, [pc, #244]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800543e:	f893 3385 	ldrb.w	r3, [r3, #901]	; 0x385
 8005442:	2b01      	cmp	r3, #1
 8005444:	d902      	bls.n	800544c <HAL_UART_RxCpltCallback+0x4c>
		  USARTLoRa.ResetRevflag = 1;
 8005446:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005448:	2201      	movs	r2, #1
 800544a:	709a      	strb	r2, [r3, #2]
  }

  if(!USARTLoRa.ResetRevflag)//if LoRa not reset
 800544c:	4b39      	ldr	r3, [pc, #228]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800544e:	789b      	ldrb	r3, [r3, #2]
 8005450:	f083 0301 	eor.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d024      	beq.n	80054a4 <HAL_UART_RxCpltCallback+0xa4>
  {
  	  USARTLoRa.RevData[USARTLoRa.RxCount++]= USARTLoRa.Rbuffer;
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800545c:	f893 3386 	ldrb.w	r3, [r3, #902]	; 0x386
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	b2d1      	uxtb	r1, r2
 8005464:	4a33      	ldr	r2, [pc, #204]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005466:	f882 1386 	strb.w	r1, [r2, #902]	; 0x386
 800546a:	4619      	mov	r1, r3
 800546c:	4b31      	ldr	r3, [pc, #196]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800546e:	f893 2316 	ldrb.w	r2, [r3, #790]	; 0x316
 8005472:	4b30      	ldr	r3, [pc, #192]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005474:	440b      	add	r3, r1
 8005476:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  	  if(USARTLoRa.RevStrEndCount == 2)
 800547a:	4b2e      	ldr	r3, [pc, #184]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800547c:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8005480:	2b02      	cmp	r3, #2
 8005482:	d138      	bne.n	80054f6 <HAL_UART_RxCpltCallback+0xf6>
  	  {
  		  USARTLoRa.Revflag = 1;
 8005484:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005486:	2201      	movs	r2, #1
 8005488:	705a      	strb	r2, [r3, #1]
  		  USARTLoRa.RxCount= 0;
 800548a:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
  		  USARTLoRa.RevStrEndCount = 0;
 8005492:	4b28      	ldr	r3, [pc, #160]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  		  USARTLoRa.RevStrCount = 0;
 800549a:	4b26      	ldr	r3, [pc, #152]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
 80054a2:	e028      	b.n	80054f6 <HAL_UART_RxCpltCallback+0xf6>
  	  }
    }
    else
    {
    	if(USARTLoRa.RevStrEndCount > 6)
 80054a4:	4b23      	ldr	r3, [pc, #140]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054a6:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d923      	bls.n	80054f6 <HAL_UART_RxCpltCallback+0xf6>
    	{
    		USARTLoRa.RevData[USARTLoRa.RxCount++]= USARTLoRa.Rbuffer;
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054b0:	f893 3386 	ldrb.w	r3, [r3, #902]	; 0x386
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	b2d1      	uxtb	r1, r2
 80054b8:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054ba:	f882 1386 	strb.w	r1, [r2, #902]	; 0x386
 80054be:	4619      	mov	r1, r3
 80054c0:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054c2:	f893 2316 	ldrb.w	r2, [r3, #790]	; 0x316
 80054c6:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054c8:	440b      	add	r3, r1
 80054ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    		if(USARTLoRa.RevStrEndCount == 9)
 80054ce:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054d0:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 80054d4:	2b09      	cmp	r3, #9
 80054d6:	d10e      	bne.n	80054f6 <HAL_UART_RxCpltCallback+0xf6>
    		{
    			USARTLoRa.Revflag = 1;
 80054d8:	4b16      	ldr	r3, [pc, #88]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054da:	2201      	movs	r2, #1
 80054dc:	705a      	strb	r2, [r3, #1]
    			USARTLoRa.RxCount= 0;
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
    			USARTLoRa.RevStrEndCount = 0;
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
    			USARTLoRa.RevStrCount = 0;
 80054ee:	4b11      	ldr	r3, [pc, #68]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
    		}
    	}

    }

  if(USARTLoRa.RxCount>=64)//if don't receive "\n" Line feeds string full over to 64 byte, clear data
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 80054f8:	f893 3386 	ldrb.w	r3, [r3, #902]	; 0x386
 80054fc:	2b3f      	cmp	r3, #63	; 0x3f
 80054fe:	d90c      	bls.n	800551a <HAL_UART_RxCpltCallback+0x11a>
  {
	  USARTLoRa.RxCount=0;
 8005500:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <HAL_UART_RxCpltCallback+0x134>)
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
  	  memset( USARTLoRa.RevData, 0, strlen((const char*)USARTLoRa.RevData) ); //clear Receive data
 8005508:	480b      	ldr	r0, [pc, #44]	; (8005538 <HAL_UART_RxCpltCallback+0x138>)
 800550a:	f7fa fedb 	bl	80002c4 <strlen>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	2100      	movs	r1, #0
 8005514:	4808      	ldr	r0, [pc, #32]	; (8005538 <HAL_UART_RxCpltCallback+0x138>)
 8005516:	f004 fa47 	bl	80099a8 <memset>
  }
  while(HAL_UART_Receive_IT(&huart3,&USARTLoRa.Rbuffer,1)!=HAL_OK);
 800551a:	bf00      	nop
 800551c:	2201      	movs	r2, #1
 800551e:	4907      	ldr	r1, [pc, #28]	; (800553c <HAL_UART_RxCpltCallback+0x13c>)
 8005520:	4807      	ldr	r0, [pc, #28]	; (8005540 <HAL_UART_RxCpltCallback+0x140>)
 8005522:	f003 fa43 	bl	80089ac <HAL_UART_Receive_IT>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f7      	bne.n	800551c <HAL_UART_RxCpltCallback+0x11c>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20002500 	.word	0x20002500
 8005538:	20002820 	.word	0x20002820
 800553c:	20002816 	.word	0x20002816
 8005540:	200028a4 	.word	0x200028a4

08005544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <HAL_MspInit+0x44>)
 800555c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555e:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <HAL_MspInit+0x44>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6613      	str	r3, [r2, #96]	; 0x60
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <HAL_MspInit+0x44>)
 8005568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	607b      	str	r3, [r7, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_MspInit+0x44>)
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <HAL_MspInit+0x44>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	6593      	str	r3, [r2, #88]	; 0x58
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_MspInit+0x44>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000

0800559c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <HAL_RTC_MspInit+0x30>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d107      	bne.n	80055be <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80055ae:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <HAL_RTC_MspInit+0x34>)
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b4:	4a06      	ldr	r2, [pc, #24]	; (80055d0 <HAL_RTC_MspInit+0x34>)
 80055b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40002800 	.word	0x40002800
 80055d0:	40021000 	.word	0x40021000

080055d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055dc:	f107 0314 	add.w	r3, r7, #20
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a17      	ldr	r2, [pc, #92]	; (8005650 <HAL_SPI_MspInit+0x7c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d128      	bne.n	8005648 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80055f6:	4b17      	ldr	r3, [pc, #92]	; (8005654 <HAL_SPI_MspInit+0x80>)
 80055f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fa:	4a16      	ldr	r2, [pc, #88]	; (8005654 <HAL_SPI_MspInit+0x80>)
 80055fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005600:	6613      	str	r3, [r2, #96]	; 0x60
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <HAL_SPI_MspInit+0x80>)
 8005604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800560e:	4b11      	ldr	r3, [pc, #68]	; (8005654 <HAL_SPI_MspInit+0x80>)
 8005610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <HAL_SPI_MspInit+0x80>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800561a:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <HAL_SPI_MspInit+0x80>)
 800561c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005626:	23e0      	movs	r3, #224	; 0xe0
 8005628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562a:	2302      	movs	r3, #2
 800562c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800562e:	2301      	movs	r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005632:	2303      	movs	r3, #3
 8005634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005636:	2305      	movs	r3, #5
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800563a:	f107 0314 	add.w	r3, r7, #20
 800563e:	4619      	mov	r1, r3
 8005640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005644:	f000 faea 	bl	8005c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005648:	bf00      	nop
 800564a:	3728      	adds	r7, #40	; 0x28
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40013000 	.word	0x40013000
 8005654:	40021000 	.word	0x40021000

08005658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	; 0x28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005660:	f107 0314 	add.w	r3, r7, #20
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	609a      	str	r2, [r3, #8]
 800566c:	60da      	str	r2, [r3, #12]
 800566e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <HAL_UART_MspInit+0x8c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d130      	bne.n	80056dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800567a:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <HAL_UART_MspInit+0x90>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <HAL_UART_MspInit+0x90>)
 8005680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005684:	6593      	str	r3, [r2, #88]	; 0x58
 8005686:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <HAL_UART_MspInit+0x90>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_UART_MspInit+0x90>)
 8005694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005696:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <HAL_UART_MspInit+0x90>)
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <HAL_UART_MspInit+0x90>)
 80056a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80056aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b0:	2302      	movs	r3, #2
 80056b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056b4:	2301      	movs	r3, #1
 80056b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b8:	2303      	movs	r3, #3
 80056ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80056bc:	2307      	movs	r3, #7
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056c0:	f107 0314 	add.w	r3, r7, #20
 80056c4:	4619      	mov	r1, r3
 80056c6:	4809      	ldr	r0, [pc, #36]	; (80056ec <HAL_UART_MspInit+0x94>)
 80056c8:	f000 faa8 	bl	8005c1c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80056cc:	2200      	movs	r2, #0
 80056ce:	2100      	movs	r1, #0
 80056d0:	2027      	movs	r0, #39	; 0x27
 80056d2:	f000 fa2c 	bl	8005b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80056d6:	2027      	movs	r0, #39	; 0x27
 80056d8:	f000 fa45 	bl	8005b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80056dc:	bf00      	nop
 80056de:	3728      	adds	r7, #40	; 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40004800 	.word	0x40004800
 80056e8:	40021000 	.word	0x40021000
 80056ec:	48000c00 	.word	0x48000c00

080056f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056f4:	bf00      	nop
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056fe:	b480      	push	{r7}
 8005700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005702:	e7fe      	b.n	8005702 <HardFault_Handler+0x4>

08005704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005708:	e7fe      	b.n	8005708 <MemManage_Handler+0x4>

0800570a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800570a:	b480      	push	{r7}
 800570c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800570e:	e7fe      	b.n	800570e <BusFault_Handler+0x4>

08005710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005714:	e7fe      	b.n	8005714 <UsageFault_Handler+0x4>

08005716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005716:	b480      	push	{r7}
 8005718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005744:	f000 f8fa 	bl	800593c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005748:	bf00      	nop
 800574a:	bd80      	pop	{r7, pc}

0800574c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005750:	2004      	movs	r0, #4
 8005752:	f000 fc25 	bl	8005fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005760:	4802      	ldr	r0, [pc, #8]	; (800576c <USART3_IRQHandler+0x10>)
 8005762:	f003 f9c5 	bl	8008af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005766:	bf00      	nop
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	200028a4 	.word	0x200028a4

08005770 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005774:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005778:	f000 fc12 	bl	8005fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800577c:	bf00      	nop
 800577e:	bd80      	pop	{r7, pc}

08005780 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <_sbrk+0x50>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <_sbrk+0x16>
		heap_end = &end;
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <_sbrk+0x50>)
 8005792:	4a10      	ldr	r2, [pc, #64]	; (80057d4 <_sbrk+0x54>)
 8005794:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <_sbrk+0x50>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <_sbrk+0x50>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4413      	add	r3, r2
 80057a4:	466a      	mov	r2, sp
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d907      	bls.n	80057ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80057aa:	f004 f8d3 	bl	8009954 <__errno>
 80057ae:	4602      	mov	r2, r0
 80057b0:	230c      	movs	r3, #12
 80057b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295
 80057b8:	e006      	b.n	80057c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <_sbrk+0x50>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	4a03      	ldr	r2, [pc, #12]	; (80057d0 <_sbrk+0x50>)
 80057c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000238 	.word	0x20000238
 80057d4:	200149d8 	.word	0x200149d8

080057d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057dc:	4b17      	ldr	r3, [pc, #92]	; (800583c <SystemInit+0x64>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	4a16      	ldr	r2, [pc, #88]	; (800583c <SystemInit+0x64>)
 80057e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80057ec:	4b14      	ldr	r3, [pc, #80]	; (8005840 <SystemInit+0x68>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a13      	ldr	r2, [pc, #76]	; (8005840 <SystemInit+0x68>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80057f8:	4b11      	ldr	r3, [pc, #68]	; (8005840 <SystemInit+0x68>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80057fe:	4b10      	ldr	r3, [pc, #64]	; (8005840 <SystemInit+0x68>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a0f      	ldr	r2, [pc, #60]	; (8005840 <SystemInit+0x68>)
 8005804:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005808:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800580c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <SystemInit+0x68>)
 8005810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005814:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <SystemInit+0x68>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <SystemInit+0x68>)
 800581c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005820:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <SystemInit+0x68>)
 8005824:	2200      	movs	r2, #0
 8005826:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <SystemInit+0x64>)
 800582a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800582e:	609a      	str	r2, [r3, #8]
#endif
}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	e000ed00 	.word	0xe000ed00
 8005840:	40021000 	.word	0x40021000

08005844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800587c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005848:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800584a:	e003      	b.n	8005854 <LoopCopyDataInit>

0800584c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800584e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005850:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005852:	3104      	adds	r1, #4

08005854 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005854:	480b      	ldr	r0, [pc, #44]	; (8005884 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005858:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800585a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800585c:	d3f6      	bcc.n	800584c <CopyDataInit>
	ldr	r2, =_sbss
 800585e:	4a0b      	ldr	r2, [pc, #44]	; (800588c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005860:	e002      	b.n	8005868 <LoopFillZerobss>

08005862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005862:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005864:	f842 3b04 	str.w	r3, [r2], #4

08005868 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005868:	4b09      	ldr	r3, [pc, #36]	; (8005890 <LoopForever+0x16>)
	cmp	r2, r3
 800586a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800586c:	d3f9      	bcc.n	8005862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800586e:	f7ff ffb3 	bl	80057d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005872:	f004 f875 	bl	8009960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005876:	f7ff fb51 	bl	8004f1c <main>

0800587a <LoopForever>:

LoopForever:
    b LoopForever
 800587a:	e7fe      	b.n	800587a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800587c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8005880:	08011fec 	.word	0x08011fec
	ldr	r0, =_sdata
 8005884:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005888:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 800588c:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 8005890:	200149d8 	.word	0x200149d8

08005894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005894:	e7fe      	b.n	8005894 <ADC1_2_IRQHandler>

08005896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058a0:	2003      	movs	r0, #3
 80058a2:	f000 f939 	bl	8005b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058a6:	2000      	movs	r0, #0
 80058a8:	f000 f80e 	bl	80058c8 <HAL_InitTick>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	71fb      	strb	r3, [r7, #7]
 80058b6:	e001      	b.n	80058bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058b8:	f7ff fe4c 	bl	8005554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058bc:	79fb      	ldrb	r3, [r7, #7]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80058d4:	4b16      	ldr	r3, [pc, #88]	; (8005930 <HAL_InitTick+0x68>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d022      	beq.n	8005922 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80058dc:	4b15      	ldr	r3, [pc, #84]	; (8005934 <HAL_InitTick+0x6c>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_InitTick+0x68>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f946 	bl	8005b82 <HAL_SYSTICK_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10f      	bne.n	800591c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	d809      	bhi.n	8005916 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005902:	2200      	movs	r2, #0
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	f04f 30ff 	mov.w	r0, #4294967295
 800590a:	f000 f910 	bl	8005b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800590e:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <HAL_InitTick+0x70>)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	e007      	b.n	8005926 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	73fb      	strb	r3, [r7, #15]
 800591a:	e004      	b.n	8005926 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
 8005920:	e001      	b.n	8005926 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	2000001c 	.word	0x2000001c
 8005934:	20000014 	.word	0x20000014
 8005938:	20000018 	.word	0x20000018

0800593c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <HAL_IncTick+0x1c>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <HAL_IncTick+0x20>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4413      	add	r3, r2
 800594a:	4a03      	ldr	r2, [pc, #12]	; (8005958 <HAL_IncTick+0x1c>)
 800594c:	6013      	str	r3, [r2, #0]
}
 800594e:	bf00      	nop
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	200149d0 	.word	0x200149d0
 800595c:	2000001c 	.word	0x2000001c

08005960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return uwTick;
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <HAL_GetTick+0x14>)
 8005966:	681b      	ldr	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	200149d0 	.word	0x200149d0

08005978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <__NVIC_SetPriorityGrouping+0x44>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005994:	4013      	ands	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059aa:	4a04      	ldr	r2, [pc, #16]	; (80059bc <__NVIC_SetPriorityGrouping+0x44>)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	60d3      	str	r3, [r2, #12]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	e000ed00 	.word	0xe000ed00

080059c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <__NVIC_GetPriorityGrouping+0x18>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	0a1b      	lsrs	r3, r3, #8
 80059ca:	f003 0307 	and.w	r3, r3, #7
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	db0b      	blt.n	8005a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	f003 021f 	and.w	r2, r3, #31
 80059f4:	4907      	ldr	r1, [pc, #28]	; (8005a14 <__NVIC_EnableIRQ+0x38>)
 80059f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	2001      	movs	r0, #1
 80059fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	e000e100 	.word	0xe000e100

08005a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	db0a      	blt.n	8005a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	490c      	ldr	r1, [pc, #48]	; (8005a64 <__NVIC_SetPriority+0x4c>)
 8005a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a36:	0112      	lsls	r2, r2, #4
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a40:	e00a      	b.n	8005a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	4908      	ldr	r1, [pc, #32]	; (8005a68 <__NVIC_SetPriority+0x50>)
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	3b04      	subs	r3, #4
 8005a50:	0112      	lsls	r2, r2, #4
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	440b      	add	r3, r1
 8005a56:	761a      	strb	r2, [r3, #24]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	e000e100 	.word	0xe000e100
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b089      	sub	sp, #36	; 0x24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f1c3 0307 	rsb	r3, r3, #7
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	bf28      	it	cs
 8005a8a:	2304      	movcs	r3, #4
 8005a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	3304      	adds	r3, #4
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d902      	bls.n	8005a9c <NVIC_EncodePriority+0x30>
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3b03      	subs	r3, #3
 8005a9a:	e000      	b.n	8005a9e <NVIC_EncodePriority+0x32>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	43da      	mvns	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	401a      	ands	r2, r3
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	43d9      	mvns	r1, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac4:	4313      	orrs	r3, r2
         );
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3724      	adds	r7, #36	; 0x24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ae4:	d301      	bcc.n	8005aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e00f      	b.n	8005b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aea:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <SysTick_Config+0x40>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005af2:	210f      	movs	r1, #15
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	f7ff ff8e 	bl	8005a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <SysTick_Config+0x40>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b02:	4b04      	ldr	r3, [pc, #16]	; (8005b14 <SysTick_Config+0x40>)
 8005b04:	2207      	movs	r2, #7
 8005b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	e000e010 	.word	0xe000e010

08005b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff ff29 	bl	8005978 <__NVIC_SetPriorityGrouping>
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b086      	sub	sp, #24
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	4603      	mov	r3, r0
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	607a      	str	r2, [r7, #4]
 8005b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b40:	f7ff ff3e 	bl	80059c0 <__NVIC_GetPriorityGrouping>
 8005b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	6978      	ldr	r0, [r7, #20]
 8005b4c:	f7ff ff8e 	bl	8005a6c <NVIC_EncodePriority>
 8005b50:	4602      	mov	r2, r0
 8005b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff ff5d 	bl	8005a18 <__NVIC_SetPriority>
}
 8005b5e:	bf00      	nop
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff ff31 	bl	80059dc <__NVIC_EnableIRQ>
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ffa2 	bl	8005ad4 <SysTick_Config>
 8005b90:	4603      	mov	r3, r0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d005      	beq.n	8005bbe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	73fb      	strb	r3, [r7, #15]
 8005bbc:	e029      	b.n	8005c12 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 020e 	bic.w	r2, r2, #14
 8005bcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	f003 021c 	and.w	r2, r3, #28
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	2101      	movs	r1, #1
 8005bec:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
    }
  }
  return status;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c2a:	e166      	b.n	8005efa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	2101      	movs	r1, #1
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8158 	beq.w	8005ef4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d00b      	beq.n	8005c64 <HAL_GPIO_Init+0x48>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d007      	beq.n	8005c64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c58:	2b11      	cmp	r3, #17
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b12      	cmp	r3, #18
 8005c62:	d130      	bne.n	8005cc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	2203      	movs	r2, #3
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	43db      	mvns	r3, r3
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	f003 0201 	and.w	r2, r3, #1
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0xea>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b12      	cmp	r3, #18
 8005d04:	d123      	bne.n	8005d4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	08da      	lsrs	r2, r3, #3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3208      	adds	r2, #8
 8005d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	220f      	movs	r2, #15
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43db      	mvns	r3, r3
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4013      	ands	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	08da      	lsrs	r2, r3, #3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3208      	adds	r2, #8
 8005d48:	6939      	ldr	r1, [r7, #16]
 8005d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	2203      	movs	r2, #3
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4013      	ands	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 0203 	and.w	r2, r3, #3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80b2 	beq.w	8005ef4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d90:	4b61      	ldr	r3, [pc, #388]	; (8005f18 <HAL_GPIO_Init+0x2fc>)
 8005d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d94:	4a60      	ldr	r2, [pc, #384]	; (8005f18 <HAL_GPIO_Init+0x2fc>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	6613      	str	r3, [r2, #96]	; 0x60
 8005d9c:	4b5e      	ldr	r3, [pc, #376]	; (8005f18 <HAL_GPIO_Init+0x2fc>)
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005da8:	4a5c      	ldr	r2, [pc, #368]	; (8005f1c <HAL_GPIO_Init+0x300>)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	3302      	adds	r3, #2
 8005db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	220f      	movs	r2, #15
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dd2:	d02b      	beq.n	8005e2c <HAL_GPIO_Init+0x210>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a52      	ldr	r2, [pc, #328]	; (8005f20 <HAL_GPIO_Init+0x304>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d025      	beq.n	8005e28 <HAL_GPIO_Init+0x20c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a51      	ldr	r2, [pc, #324]	; (8005f24 <HAL_GPIO_Init+0x308>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d01f      	beq.n	8005e24 <HAL_GPIO_Init+0x208>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a50      	ldr	r2, [pc, #320]	; (8005f28 <HAL_GPIO_Init+0x30c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d019      	beq.n	8005e20 <HAL_GPIO_Init+0x204>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a4f      	ldr	r2, [pc, #316]	; (8005f2c <HAL_GPIO_Init+0x310>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <HAL_GPIO_Init+0x200>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a4e      	ldr	r2, [pc, #312]	; (8005f30 <HAL_GPIO_Init+0x314>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00d      	beq.n	8005e18 <HAL_GPIO_Init+0x1fc>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a4d      	ldr	r2, [pc, #308]	; (8005f34 <HAL_GPIO_Init+0x318>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d007      	beq.n	8005e14 <HAL_GPIO_Init+0x1f8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a4c      	ldr	r2, [pc, #304]	; (8005f38 <HAL_GPIO_Init+0x31c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d101      	bne.n	8005e10 <HAL_GPIO_Init+0x1f4>
 8005e0c:	2307      	movs	r3, #7
 8005e0e:	e00e      	b.n	8005e2e <HAL_GPIO_Init+0x212>
 8005e10:	2308      	movs	r3, #8
 8005e12:	e00c      	b.n	8005e2e <HAL_GPIO_Init+0x212>
 8005e14:	2306      	movs	r3, #6
 8005e16:	e00a      	b.n	8005e2e <HAL_GPIO_Init+0x212>
 8005e18:	2305      	movs	r3, #5
 8005e1a:	e008      	b.n	8005e2e <HAL_GPIO_Init+0x212>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	e006      	b.n	8005e2e <HAL_GPIO_Init+0x212>
 8005e20:	2303      	movs	r3, #3
 8005e22:	e004      	b.n	8005e2e <HAL_GPIO_Init+0x212>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e002      	b.n	8005e2e <HAL_GPIO_Init+0x212>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <HAL_GPIO_Init+0x212>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	f002 0203 	and.w	r2, r2, #3
 8005e34:	0092      	lsls	r2, r2, #2
 8005e36:	4093      	lsls	r3, r2
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e3e:	4937      	ldr	r1, [pc, #220]	; (8005f1c <HAL_GPIO_Init+0x300>)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	3302      	adds	r3, #2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e4c:	4b3b      	ldr	r3, [pc, #236]	; (8005f3c <HAL_GPIO_Init+0x320>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	43db      	mvns	r3, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e70:	4a32      	ldr	r2, [pc, #200]	; (8005f3c <HAL_GPIO_Init+0x320>)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005e76:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <HAL_GPIO_Init+0x320>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e9a:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <HAL_GPIO_Init+0x320>)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <HAL_GPIO_Init+0x320>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ec4:	4a1d      	ldr	r2, [pc, #116]	; (8005f3c <HAL_GPIO_Init+0x320>)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005eca:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <HAL_GPIO_Init+0x320>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005eee:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <HAL_GPIO_Init+0x320>)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f47f ae91 	bne.w	8005c2c <HAL_GPIO_Init+0x10>
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	48000400 	.word	0x48000400
 8005f24:	48000800 	.word	0x48000800
 8005f28:	48000c00 	.word	0x48000c00
 8005f2c:	48001000 	.word	0x48001000
 8005f30:	48001400 	.word	0x48001400
 8005f34:	48001800 	.word	0x48001800
 8005f38:	48001c00 	.word	0x48001c00
 8005f3c:	40010400 	.word	0x40010400

08005f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	887b      	ldrh	r3, [r7, #2]
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
 8005f5c:	e001      	b.n	8005f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f80:	787b      	ldrb	r3, [r7, #1]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f86:	887a      	ldrh	r2, [r7, #2]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f8c:	e002      	b.n	8005f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f8e:	887a      	ldrh	r2, [r7, #2]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005faa:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d006      	beq.n	8005fc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fb6:	4a05      	ldr	r2, [pc, #20]	; (8005fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff f9d4 	bl	800536c <HAL_GPIO_EXTI_Callback>
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40010400 	.word	0x40010400

08005fd0 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8005fd4:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	4a07      	ldr	r2, [pc, #28]	; (8005ffc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005fde:	f043 0303 	orr.w	r3, r3, #3
 8005fe2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	4a05      	ldr	r2, [pc, #20]	; (8006000 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005fea:	f043 0304 	orr.w	r3, r3, #4
 8005fee:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005ff0:	bf30      	wfi
}
 8005ff2:	bf00      	nop
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40007000 	.word	0x40007000
 8006000:	e000ed00 	.word	0xe000ed00

08006004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <HAL_PWREx_GetVoltageRange+0x18>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40007000 	.word	0x40007000

08006020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800602e:	d130      	bne.n	8006092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006030:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603c:	d038      	beq.n	80060b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800603e:	4b20      	ldr	r3, [pc, #128]	; (80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800604c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800604e:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2232      	movs	r2, #50	; 0x32
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	0c9b      	lsrs	r3, r3, #18
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006064:	e002      	b.n	800606c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3b01      	subs	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800606c:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006078:	d102      	bne.n	8006080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f2      	bne.n	8006066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608c:	d110      	bne.n	80060b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e00f      	b.n	80060b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800609a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609e:	d007      	beq.n	80060b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060a0:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060a8:	4a05      	ldr	r2, [pc, #20]	; (80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40007000 	.word	0x40007000
 80060c4:	20000014 	.word	0x20000014
 80060c8:	431bde83 	.word	0x431bde83

080060cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f000 bc16 	b.w	800690c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e0:	4ba0      	ldr	r3, [pc, #640]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 030c 	and.w	r3, r3, #12
 80060e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ea:	4b9e      	ldr	r3, [pc, #632]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80e4 	beq.w	80062ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <HAL_RCC_OscConfig+0x4c>
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2b0c      	cmp	r3, #12
 800610c:	f040 808b 	bne.w	8006226 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2b01      	cmp	r3, #1
 8006114:	f040 8087 	bne.w	8006226 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006118:	4b92      	ldr	r3, [pc, #584]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_OscConfig+0x64>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e3ed      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	4b8b      	ldr	r3, [pc, #556]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <HAL_RCC_OscConfig+0x7e>
 8006140:	4b88      	ldr	r3, [pc, #544]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006148:	e005      	b.n	8006156 <HAL_RCC_OscConfig+0x8a>
 800614a:	4b86      	ldr	r3, [pc, #536]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800614c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006150:	091b      	lsrs	r3, r3, #4
 8006152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006156:	4293      	cmp	r3, r2
 8006158:	d223      	bcs.n	80061a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fd7e 	bl	8006c60 <RCC_SetFlashLatencyFromMSIRange>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e3ce      	b.n	800690c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800616e:	4b7d      	ldr	r3, [pc, #500]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7c      	ldr	r2, [pc, #496]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006174:	f043 0308 	orr.w	r3, r3, #8
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	4b7a      	ldr	r3, [pc, #488]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	4977      	ldr	r1, [pc, #476]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800618c:	4b75      	ldr	r3, [pc, #468]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	4972      	ldr	r1, [pc, #456]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800619c:	4313      	orrs	r3, r2
 800619e:	604b      	str	r3, [r1, #4]
 80061a0:	e025      	b.n	80061ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061a2:	4b70      	ldr	r3, [pc, #448]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a6f      	ldr	r2, [pc, #444]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80061a8:	f043 0308 	orr.w	r3, r3, #8
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	4b6d      	ldr	r3, [pc, #436]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	496a      	ldr	r1, [pc, #424]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061c0:	4b68      	ldr	r3, [pc, #416]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	4965      	ldr	r1, [pc, #404]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fd3e 	bl	8006c60 <RCC_SetFlashLatencyFromMSIRange>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e38e      	b.n	800690c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061ee:	f000 fc75 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 80061f2:	4601      	mov	r1, r0
 80061f4:	4b5b      	ldr	r3, [pc, #364]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	4a5a      	ldr	r2, [pc, #360]	; (8006368 <HAL_RCC_OscConfig+0x29c>)
 8006200:	5cd3      	ldrb	r3, [r2, r3]
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	fa21 f303 	lsr.w	r3, r1, r3
 800620a:	4a58      	ldr	r2, [pc, #352]	; (800636c <HAL_RCC_OscConfig+0x2a0>)
 800620c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800620e:	4b58      	ldr	r3, [pc, #352]	; (8006370 <HAL_RCC_OscConfig+0x2a4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fb58 	bl	80058c8 <HAL_InitTick>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d052      	beq.n	80062c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	e372      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d032      	beq.n	8006294 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800622e:	4b4d      	ldr	r3, [pc, #308]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a4c      	ldr	r2, [pc, #304]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006234:	f043 0301 	orr.w	r3, r3, #1
 8006238:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800623a:	f7ff fb91 	bl	8005960 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006242:	f7ff fb8d 	bl	8005960 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e35b      	b.n	800690c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006254:	4b43      	ldr	r3, [pc, #268]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0f0      	beq.n	8006242 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006260:	4b40      	ldr	r3, [pc, #256]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a3f      	ldr	r2, [pc, #252]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006266:	f043 0308 	orr.w	r3, r3, #8
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4b3d      	ldr	r3, [pc, #244]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	493a      	ldr	r1, [pc, #232]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800627a:	4313      	orrs	r3, r2
 800627c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800627e:	4b39      	ldr	r3, [pc, #228]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	4935      	ldr	r1, [pc, #212]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800628e:	4313      	orrs	r3, r2
 8006290:	604b      	str	r3, [r1, #4]
 8006292:	e01a      	b.n	80062ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006294:	4b33      	ldr	r3, [pc, #204]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a32      	ldr	r2, [pc, #200]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062a0:	f7ff fb5e 	bl	8005960 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062a8:	f7ff fb5a 	bl	8005960 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e328      	b.n	800690c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062ba:	4b2a      	ldr	r3, [pc, #168]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x1dc>
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d073      	beq.n	80063be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d005      	beq.n	80062e8 <HAL_RCC_OscConfig+0x21c>
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d10e      	bne.n	8006300 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d10b      	bne.n	8006300 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e8:	4b1e      	ldr	r3, [pc, #120]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d063      	beq.n	80063bc <HAL_RCC_OscConfig+0x2f0>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d15f      	bne.n	80063bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e305      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006308:	d106      	bne.n	8006318 <HAL_RCC_OscConfig+0x24c>
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a15      	ldr	r2, [pc, #84]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e01d      	b.n	8006354 <HAL_RCC_OscConfig+0x288>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006320:	d10c      	bne.n	800633c <HAL_RCC_OscConfig+0x270>
 8006322:	4b10      	ldr	r3, [pc, #64]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a0f      	ldr	r2, [pc, #60]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e00b      	b.n	8006354 <HAL_RCC_OscConfig+0x288>
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a08      	ldr	r2, [pc, #32]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 8006342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a05      	ldr	r2, [pc, #20]	; (8006364 <HAL_RCC_OscConfig+0x298>)
 800634e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01b      	beq.n	8006394 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635c:	f7ff fb00 	bl	8005960 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006362:	e010      	b.n	8006386 <HAL_RCC_OscConfig+0x2ba>
 8006364:	40021000 	.word	0x40021000
 8006368:	08011ccc 	.word	0x08011ccc
 800636c:	20000014 	.word	0x20000014
 8006370:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006374:	f7ff faf4 	bl	8005960 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e2c2      	b.n	800690c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006386:	4baf      	ldr	r3, [pc, #700]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x2a8>
 8006392:	e014      	b.n	80063be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7ff fae4 	bl	8005960 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800639c:	f7ff fae0 	bl	8005960 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b64      	cmp	r3, #100	; 0x64
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e2ae      	b.n	800690c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063ae:	4ba5      	ldr	r3, [pc, #660]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f0      	bne.n	800639c <HAL_RCC_OscConfig+0x2d0>
 80063ba:	e000      	b.n	80063be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d060      	beq.n	800648c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_OscConfig+0x310>
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d119      	bne.n	800640a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d116      	bne.n	800640a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063dc:	4b99      	ldr	r3, [pc, #612]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_OscConfig+0x328>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e28b      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f4:	4b93      	ldr	r3, [pc, #588]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	4990      	ldr	r1, [pc, #576]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006404:	4313      	orrs	r3, r2
 8006406:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006408:	e040      	b.n	800648c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d023      	beq.n	800645a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006412:	4b8c      	ldr	r3, [pc, #560]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a8b      	ldr	r2, [pc, #556]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641e:	f7ff fa9f 	bl	8005960 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006426:	f7ff fa9b 	bl	8005960 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e269      	b.n	800690c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006438:	4b82      	ldr	r3, [pc, #520]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f0      	beq.n	8006426 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006444:	4b7f      	ldr	r3, [pc, #508]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	061b      	lsls	r3, r3, #24
 8006452:	497c      	ldr	r1, [pc, #496]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006454:	4313      	orrs	r3, r2
 8006456:	604b      	str	r3, [r1, #4]
 8006458:	e018      	b.n	800648c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800645a:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a79      	ldr	r2, [pc, #484]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006466:	f7ff fa7b 	bl	8005960 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800646c:	e008      	b.n	8006480 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800646e:	f7ff fa77 	bl	8005960 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d901      	bls.n	8006480 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e245      	b.n	800690c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006480:	4b70      	ldr	r3, [pc, #448]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f0      	bne.n	800646e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d03c      	beq.n	8006512 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01c      	beq.n	80064da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064a0:	4b68      	ldr	r3, [pc, #416]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80064a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a6:	4a67      	ldr	r2, [pc, #412]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7ff fa56 	bl	8005960 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b8:	f7ff fa52 	bl	8005960 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e220      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064ca:	4b5e      	ldr	r3, [pc, #376]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80064cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0ef      	beq.n	80064b8 <HAL_RCC_OscConfig+0x3ec>
 80064d8:	e01b      	b.n	8006512 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064da:	4b5a      	ldr	r3, [pc, #360]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80064dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e0:	4a58      	ldr	r2, [pc, #352]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ea:	f7ff fa39 	bl	8005960 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f2:	f7ff fa35 	bl	8005960 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e203      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006504:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ef      	bne.n	80064f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80a6 	beq.w	800666c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006520:	2300      	movs	r3, #0
 8006522:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006524:	4b47      	ldr	r3, [pc, #284]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10d      	bne.n	800654c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006530:	4b44      	ldr	r3, [pc, #272]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	4a43      	ldr	r2, [pc, #268]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800653a:	6593      	str	r3, [r2, #88]	; 0x58
 800653c:	4b41      	ldr	r3, [pc, #260]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 800653e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006548:	2301      	movs	r3, #1
 800654a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800654c:	4b3e      	ldr	r3, [pc, #248]	; (8006648 <HAL_RCC_OscConfig+0x57c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d118      	bne.n	800658a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006558:	4b3b      	ldr	r3, [pc, #236]	; (8006648 <HAL_RCC_OscConfig+0x57c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a3a      	ldr	r2, [pc, #232]	; (8006648 <HAL_RCC_OscConfig+0x57c>)
 800655e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006564:	f7ff f9fc 	bl	8005960 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656c:	f7ff f9f8 	bl	8005960 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e1c6      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800657e:	4b32      	ldr	r3, [pc, #200]	; (8006648 <HAL_RCC_OscConfig+0x57c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f0      	beq.n	800656c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d108      	bne.n	80065a4 <HAL_RCC_OscConfig+0x4d8>
 8006592:	4b2c      	ldr	r3, [pc, #176]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006598:	4a2a      	ldr	r2, [pc, #168]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065a2:	e024      	b.n	80065ee <HAL_RCC_OscConfig+0x522>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d110      	bne.n	80065ce <HAL_RCC_OscConfig+0x502>
 80065ac:	4b25      	ldr	r3, [pc, #148]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b2:	4a24      	ldr	r2, [pc, #144]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80065b4:	f043 0304 	orr.w	r3, r3, #4
 80065b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065bc:	4b21      	ldr	r3, [pc, #132]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	4a20      	ldr	r2, [pc, #128]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065cc:	e00f      	b.n	80065ee <HAL_RCC_OscConfig+0x522>
 80065ce:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d4:	4a1b      	ldr	r2, [pc, #108]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065de:	4b19      	ldr	r3, [pc, #100]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	4a17      	ldr	r2, [pc, #92]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 80065e6:	f023 0304 	bic.w	r3, r3, #4
 80065ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f6:	f7ff f9b3 	bl	8005960 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065fc:	e00a      	b.n	8006614 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fe:	f7ff f9af 	bl	8005960 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e17b      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006614:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <HAL_RCC_OscConfig+0x578>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0ed      	beq.n	80065fe <HAL_RCC_OscConfig+0x532>
 8006622:	e01a      	b.n	800665a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006624:	f7ff f99c 	bl	8005960 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800662a:	e00f      	b.n	800664c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662c:	f7ff f998 	bl	8005960 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	4293      	cmp	r3, r2
 800663c:	d906      	bls.n	800664c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e164      	b.n	800690c <HAL_RCC_OscConfig+0x840>
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000
 8006648:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800664c:	4ba8      	ldr	r3, [pc, #672]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e8      	bne.n	800662c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800665a:	7ffb      	ldrb	r3, [r7, #31]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d105      	bne.n	800666c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006660:	4ba3      	ldr	r3, [pc, #652]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006664:	4aa2      	ldr	r2, [pc, #648]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800666a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d03c      	beq.n	80066f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01c      	beq.n	80066ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006680:	4b9b      	ldr	r3, [pc, #620]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006686:	4a9a      	ldr	r2, [pc, #616]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006690:	f7ff f966 	bl	8005960 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006698:	f7ff f962 	bl	8005960 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e130      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066aa:	4b91      	ldr	r3, [pc, #580]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80066ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0ef      	beq.n	8006698 <HAL_RCC_OscConfig+0x5cc>
 80066b8:	e01b      	b.n	80066f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066ba:	4b8d      	ldr	r3, [pc, #564]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80066bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066c0:	4a8b      	ldr	r2, [pc, #556]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ca:	f7ff f949 	bl	8005960 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066d2:	f7ff f945 	bl	8005960 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e113      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066e4:	4b82      	ldr	r3, [pc, #520]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80066e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1ef      	bne.n	80066d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8107 	beq.w	800690a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	2b02      	cmp	r3, #2
 8006702:	f040 80cb 	bne.w	800689c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006706:	4b7a      	ldr	r3, [pc, #488]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f003 0203 	and.w	r2, r3, #3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	429a      	cmp	r2, r3
 8006718:	d12c      	bne.n	8006774 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	3b01      	subs	r3, #1
 8006726:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006728:	429a      	cmp	r2, r3
 800672a:	d123      	bne.n	8006774 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006736:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006738:	429a      	cmp	r2, r3
 800673a:	d11b      	bne.n	8006774 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006748:	429a      	cmp	r2, r3
 800674a:	d113      	bne.n	8006774 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	3b01      	subs	r3, #1
 800675a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800675c:	429a      	cmp	r2, r3
 800675e:	d109      	bne.n	8006774 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	3b01      	subs	r3, #1
 800676e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006770:	429a      	cmp	r2, r3
 8006772:	d06d      	beq.n	8006850 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b0c      	cmp	r3, #12
 8006778:	d068      	beq.n	800684c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800677a:	4b5d      	ldr	r3, [pc, #372]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d105      	bne.n	8006792 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006786:	4b5a      	ldr	r3, [pc, #360]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e0ba      	b.n	800690c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006796:	4b56      	ldr	r3, [pc, #344]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a55      	ldr	r2, [pc, #340]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800679c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067a2:	f7ff f8dd 	bl	8005960 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067aa:	f7ff f8d9 	bl	8005960 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0a7      	b.n	800690c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067bc:	4b4c      	ldr	r3, [pc, #304]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f0      	bne.n	80067aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067c8:	4b49      	ldr	r3, [pc, #292]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	4b49      	ldr	r3, [pc, #292]	; (80068f4 <HAL_RCC_OscConfig+0x828>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80067d8:	3a01      	subs	r2, #1
 80067da:	0112      	lsls	r2, r2, #4
 80067dc:	4311      	orrs	r1, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067e2:	0212      	lsls	r2, r2, #8
 80067e4:	4311      	orrs	r1, r2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067ea:	0852      	lsrs	r2, r2, #1
 80067ec:	3a01      	subs	r2, #1
 80067ee:	0552      	lsls	r2, r2, #21
 80067f0:	4311      	orrs	r1, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80067f6:	0852      	lsrs	r2, r2, #1
 80067f8:	3a01      	subs	r2, #1
 80067fa:	0652      	lsls	r2, r2, #25
 80067fc:	4311      	orrs	r1, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006802:	06d2      	lsls	r2, r2, #27
 8006804:	430a      	orrs	r2, r1
 8006806:	493a      	ldr	r1, [pc, #232]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006808:	4313      	orrs	r3, r2
 800680a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800680c:	4b38      	ldr	r3, [pc, #224]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a37      	ldr	r2, [pc, #220]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006816:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006818:	4b35      	ldr	r3, [pc, #212]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4a34      	ldr	r2, [pc, #208]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800681e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006822:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006824:	f7ff f89c 	bl	8005960 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800682c:	f7ff f898 	bl	8005960 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e066      	b.n	800690c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800683e:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800684a:	e05e      	b.n	800690a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e05d      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006850:	4b27      	ldr	r3, [pc, #156]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d156      	bne.n	800690a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800685c:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006866:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 800686e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006872:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006874:	f7ff f874 	bl	8005960 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800687c:	f7ff f870 	bl	8005960 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e03e      	b.n	800690c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800688e:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0f0      	beq.n	800687c <HAL_RCC_OscConfig+0x7b0>
 800689a:	e036      	b.n	800690a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b0c      	cmp	r3, #12
 80068a0:	d031      	beq.n	8006906 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a2:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a12      	ldr	r2, [pc, #72]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80068a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d105      	bne.n	80068c6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80068ba:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	4a0c      	ldr	r2, [pc, #48]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80068c0:	f023 0303 	bic.w	r3, r3, #3
 80068c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <HAL_RCC_OscConfig+0x824>)
 80068cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80068d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d6:	f7ff f843 	bl	8005960 <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068dc:	e00c      	b.n	80068f8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068de:	f7ff f83f 	bl	8005960 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d905      	bls.n	80068f8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e00d      	b.n	800690c <HAL_RCC_OscConfig+0x840>
 80068f0:	40021000 	.word	0x40021000
 80068f4:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <HAL_RCC_OscConfig+0x848>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1ec      	bne.n	80068de <HAL_RCC_OscConfig+0x812>
 8006904:	e001      	b.n	800690a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3720      	adds	r7, #32
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	40021000 	.word	0x40021000

08006918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0c8      	b.n	8006abe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800692c:	4b66      	ldr	r3, [pc, #408]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b0>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d910      	bls.n	800695c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693a:	4b63      	ldr	r3, [pc, #396]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f023 0207 	bic.w	r2, r3, #7
 8006942:	4961      	ldr	r1, [pc, #388]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	4313      	orrs	r3, r2
 8006948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800694a:	4b5f      	ldr	r3, [pc, #380]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d001      	beq.n	800695c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0b0      	b.n	8006abe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d04c      	beq.n	8006a02 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d107      	bne.n	8006980 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006970:	4b56      	ldr	r3, [pc, #344]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d121      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e09e      	b.n	8006abe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d107      	bne.n	8006998 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006988:	4b50      	ldr	r3, [pc, #320]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d115      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e092      	b.n	8006abe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d107      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069a0:	4b4a      	ldr	r3, [pc, #296]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d109      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e086      	b.n	8006abe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069b0:	4b46      	ldr	r3, [pc, #280]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e07e      	b.n	8006abe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069c0:	4b42      	ldr	r3, [pc, #264]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f023 0203 	bic.w	r2, r3, #3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	493f      	ldr	r1, [pc, #252]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d2:	f7fe ffc5 	bl	8005960 <HAL_GetTick>
 80069d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d8:	e00a      	b.n	80069f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069da:	f7fe ffc1 	bl	8005960 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e066      	b.n	8006abe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f0:	4b36      	ldr	r3, [pc, #216]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 020c 	and.w	r2, r3, #12
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d1eb      	bne.n	80069da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d008      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a0e:	4b2f      	ldr	r3, [pc, #188]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	492c      	ldr	r1, [pc, #176]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a20:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d210      	bcs.n	8006a50 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a2e:	4b26      	ldr	r3, [pc, #152]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 0207 	bic.w	r2, r3, #7
 8006a36:	4924      	ldr	r1, [pc, #144]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a3e:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d001      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e036      	b.n	8006abe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4918      	ldr	r1, [pc, #96]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a7a:	4b14      	ldr	r3, [pc, #80]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	4910      	ldr	r1, [pc, #64]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a8e:	f000 f825 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 8006a92:	4601      	mov	r1, r0
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <HAL_RCC_ClockConfig+0x1b4>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	4a0c      	ldr	r2, [pc, #48]	; (8006ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa0:	5cd3      	ldrb	r3, [r2, r3]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006aae:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe ff08 	bl	80058c8 <HAL_InitTick>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	72fb      	strb	r3, [r7, #11]

  return status;
 8006abc:	7afb      	ldrb	r3, [r7, #11]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40022000 	.word	0x40022000
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	08011ccc 	.word	0x08011ccc
 8006ad4:	20000014 	.word	0x20000014
 8006ad8:	20000018 	.word	0x20000018

08006adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b089      	sub	sp, #36	; 0x24
 8006ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aea:	4b3d      	ldr	r3, [pc, #244]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006af4:	4b3a      	ldr	r3, [pc, #232]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <HAL_RCC_GetSysClockFreq+0x34>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b0c      	cmp	r3, #12
 8006b08:	d121      	bne.n	8006b4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d11e      	bne.n	8006b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b10:	4b33      	ldr	r3, [pc, #204]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b1c:	4b30      	ldr	r3, [pc, #192]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	e005      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b2c:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006b38:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10d      	bne.n	8006b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b4c:	e00a      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d102      	bne.n	8006b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b54:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e004      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d101      	bne.n	8006b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b60:	4b22      	ldr	r3, [pc, #136]	; (8006bec <HAL_RCC_GetSysClockFreq+0x110>)
 8006b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b0c      	cmp	r3, #12
 8006b68:	d133      	bne.n	8006bd2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d002      	beq.n	8006b80 <HAL_RCC_GetSysClockFreq+0xa4>
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d003      	beq.n	8006b86 <HAL_RCC_GetSysClockFreq+0xaa>
 8006b7e:	e005      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b80:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b82:	617b      	str	r3, [r7, #20]
      break;
 8006b84:	e005      	b.n	8006b92 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <HAL_RCC_GetSysClockFreq+0x110>)
 8006b88:	617b      	str	r3, [r7, #20]
      break;
 8006b8a:	e002      	b.n	8006b92 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	617b      	str	r3, [r7, #20]
      break;
 8006b90:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	fb02 f203 	mul.w	r2, r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	0e5b      	lsrs	r3, r3, #25
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3724      	adds	r7, #36	; 0x24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	40021000 	.word	0x40021000
 8006be4:	08011ce4 	.word	0x08011ce4
 8006be8:	00f42400 	.word	0x00f42400
 8006bec:	007a1200 	.word	0x007a1200

08006bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bf4:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000014 	.word	0x20000014

08006c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c0c:	f7ff fff0 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c10:	4601      	mov	r1, r0
 8006c12:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c1e:	5cd3      	ldrb	r3, [r2, r3]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	08011cdc 	.word	0x08011cdc

08006c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c38:	f7ff ffda 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c3c:	4601      	mov	r1, r0
 8006c3e:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	0adb      	lsrs	r3, r3, #11
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	4a04      	ldr	r2, [pc, #16]	; (8006c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c4a:	5cd3      	ldrb	r3, [r2, r3]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	08011cdc 	.word	0x08011cdc

08006c60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c6c:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c78:	f7ff f9c4 	bl	8006004 <HAL_PWREx_GetVoltageRange>
 8006c7c:	6178      	str	r0, [r7, #20]
 8006c7e:	e014      	b.n	8006caa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c80:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c84:	4a24      	ldr	r2, [pc, #144]	; (8006d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c8c:	4b22      	ldr	r3, [pc, #136]	; (8006d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c98:	f7ff f9b4 	bl	8006004 <HAL_PWREx_GetVoltageRange>
 8006c9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	; (8006d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb0:	d10b      	bne.n	8006cca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b80      	cmp	r3, #128	; 0x80
 8006cb6:	d919      	bls.n	8006cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2ba0      	cmp	r3, #160	; 0xa0
 8006cbc:	d902      	bls.n	8006cc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	e013      	b.n	8006cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	e010      	b.n	8006cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b80      	cmp	r3, #128	; 0x80
 8006cce:	d902      	bls.n	8006cd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	e00a      	b.n	8006cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b80      	cmp	r3, #128	; 0x80
 8006cda:	d102      	bne.n	8006ce2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006cdc:	2302      	movs	r3, #2
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	e004      	b.n	8006cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b70      	cmp	r3, #112	; 0x70
 8006ce6:	d101      	bne.n	8006cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ce8:	2301      	movs	r3, #1
 8006cea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006cec:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f023 0207 	bic.w	r2, r3, #7
 8006cf4:	4909      	ldr	r1, [pc, #36]	; (8006d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d001      	beq.n	8006d0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	40022000 	.word	0x40022000

08006d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d28:	2300      	movs	r3, #0
 8006d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d03f      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d44:	d01c      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d4a:	d802      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006d50:	e01f      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006d52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d56:	d003      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006d58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d5c:	d01c      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006d5e:	e018      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d60:	4b85      	ldr	r3, [pc, #532]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	4a84      	ldr	r2, [pc, #528]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d6c:	e015      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3304      	adds	r3, #4
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 facb 	bl	8007310 <RCCEx_PLLSAI1_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d7e:	e00c      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3320      	adds	r3, #32
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fbb2 	bl	80074f0 <RCCEx_PLLSAI2_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d90:	e003      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	74fb      	strb	r3, [r7, #19]
      break;
 8006d96:	e000      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9a:	7cfb      	ldrb	r3, [r7, #19]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10b      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006da0:	4b75      	ldr	r3, [pc, #468]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dae:	4972      	ldr	r1, [pc, #456]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006db6:	e001      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db8:	7cfb      	ldrb	r3, [r7, #19]
 8006dba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d03f      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dd0:	d01c      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006dd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dd6:	d802      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00e      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006ddc:	e01f      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006de2:	d003      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006de8:	d01c      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006dea:	e018      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006dec:	4b62      	ldr	r3, [pc, #392]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4a61      	ldr	r2, [pc, #388]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006df8:	e015      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fa85 	bl	8007310 <RCCEx_PLLSAI1_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e0a:	e00c      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3320      	adds	r3, #32
 8006e10:	2100      	movs	r1, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fb6c 	bl	80074f0 <RCCEx_PLLSAI2_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e1c:	e003      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	74fb      	strb	r3, [r7, #19]
      break;
 8006e22:	e000      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e26:	7cfb      	ldrb	r3, [r7, #19]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e2c:	4b52      	ldr	r3, [pc, #328]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3a:	494f      	ldr	r1, [pc, #316]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006e42:	e001      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e44:	7cfb      	ldrb	r3, [r7, #19]
 8006e46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80a0 	beq.w	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e56:	2300      	movs	r3, #0
 8006e58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e5a:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00d      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e70:	4b41      	ldr	r3, [pc, #260]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e74:	4a40      	ldr	r2, [pc, #256]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8006e7c:	4b3e      	ldr	r3, [pc, #248]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a3a      	ldr	r2, [pc, #232]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e98:	f7fe fd62 	bl	8005960 <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e9e:	e009      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea0:	f7fe fd5e 	bl	8005960 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d902      	bls.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	74fb      	strb	r3, [r7, #19]
        break;
 8006eb2:	e005      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006eb4:	4b31      	ldr	r3, [pc, #196]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0ef      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006ec0:	7cfb      	ldrb	r3, [r7, #19]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d15c      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ec6:	4b2c      	ldr	r3, [pc, #176]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01f      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d019      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ee4:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ef0:	4b21      	ldr	r3, [pc, #132]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef6:	4a20      	ldr	r2, [pc, #128]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f00:	4b1d      	ldr	r3, [pc, #116]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f06:	4a1c      	ldr	r2, [pc, #112]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d016      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f22:	f7fe fd1d 	bl	8005960 <HAL_GetTick>
 8006f26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f28:	e00b      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f2a:	f7fe fd19 	bl	8005960 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d902      	bls.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	74fb      	strb	r3, [r7, #19]
            break;
 8006f40:	e006      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f42:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0ec      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006f50:	7cfb      	ldrb	r3, [r7, #19]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10c      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	4904      	ldr	r1, [pc, #16]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f6e:	e009      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f70:	7cfb      	ldrb	r3, [r7, #19]
 8006f72:	74bb      	strb	r3, [r7, #18]
 8006f74:	e006      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006f76:	bf00      	nop
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f80:	7cfb      	ldrb	r3, [r7, #19]
 8006f82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f84:	7c7b      	ldrb	r3, [r7, #17]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d105      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f8a:	4ba6      	ldr	r3, [pc, #664]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8e:	4aa5      	ldr	r2, [pc, #660]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fa2:	4ba0      	ldr	r3, [pc, #640]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa8:	f023 0203 	bic.w	r2, r3, #3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	499c      	ldr	r1, [pc, #624]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fc4:	4b97      	ldr	r3, [pc, #604]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fca:	f023 020c 	bic.w	r2, r3, #12
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	4994      	ldr	r1, [pc, #592]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006fe6:	4b8f      	ldr	r3, [pc, #572]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	498b      	ldr	r1, [pc, #556]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007008:	4b86      	ldr	r3, [pc, #536]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	4983      	ldr	r1, [pc, #524]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800702a:	4b7e      	ldr	r3, [pc, #504]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800702c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007038:	497a      	ldr	r1, [pc, #488]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800704c:	4b75      	ldr	r3, [pc, #468]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007052:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705a:	4972      	ldr	r1, [pc, #456]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800705c:	4313      	orrs	r3, r2
 800705e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800706e:	4b6d      	ldr	r3, [pc, #436]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707c:	4969      	ldr	r1, [pc, #420]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007090:	4b64      	ldr	r3, [pc, #400]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800709e:	4961      	ldr	r1, [pc, #388]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070b2:	4b5c      	ldr	r3, [pc, #368]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c0:	4958      	ldr	r1, [pc, #352]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070d4:	4b53      	ldr	r3, [pc, #332]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	4950      	ldr	r1, [pc, #320]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070f6:	4b4b      	ldr	r3, [pc, #300]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80070f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	4947      	ldr	r1, [pc, #284]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007118:	4b42      	ldr	r3, [pc, #264]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800711a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800711e:	f023 0203 	bic.w	r2, r3, #3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007126:	493f      	ldr	r1, [pc, #252]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d028      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800713a:	4b3a      	ldr	r3, [pc, #232]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007140:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007148:	4936      	ldr	r1, [pc, #216]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007158:	d106      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800715a:	4b32      	ldr	r3, [pc, #200]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	4a31      	ldr	r2, [pc, #196]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007160:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007164:	60d3      	str	r3, [r2, #12]
 8007166:	e011      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007170:	d10c      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	2101      	movs	r1, #1
 8007178:	4618      	mov	r0, r3
 800717a:	f000 f8c9 	bl	8007310 <RCCEx_PLLSAI1_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007182:	7cfb      	ldrb	r3, [r7, #19]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8007188:	7cfb      	ldrb	r3, [r7, #19]
 800718a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d028      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007198:	4b22      	ldr	r3, [pc, #136]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800719a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a6:	491f      	ldr	r1, [pc, #124]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071b6:	d106      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4a19      	ldr	r2, [pc, #100]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80071be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071c2:	60d3      	str	r3, [r2, #12]
 80071c4:	e011      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071ce:	d10c      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	2101      	movs	r1, #1
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f89a 	bl	8007310 <RCCEx_PLLSAI1_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071e0:	7cfb      	ldrb	r3, [r7, #19]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80071e6:	7cfb      	ldrb	r3, [r7, #19]
 80071e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d02a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071f6:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007204:	4907      	ldr	r1, [pc, #28]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007214:	d108      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	4a02      	ldr	r2, [pc, #8]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800721c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007220:	60d3      	str	r3, [r2, #12]
 8007222:	e013      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007224:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800722c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007230:	d10c      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3304      	adds	r3, #4
 8007236:	2101      	movs	r1, #1
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f869 	bl	8007310 <RCCEx_PLLSAI1_Config>
 800723e:	4603      	mov	r3, r0
 8007240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007242:	7cfb      	ldrb	r3, [r7, #19]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8007248:	7cfb      	ldrb	r3, [r7, #19]
 800724a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d02f      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007258:	4b2c      	ldr	r3, [pc, #176]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007266:	4929      	ldr	r1, [pc, #164]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007268:	4313      	orrs	r3, r2
 800726a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007276:	d10d      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3304      	adds	r3, #4
 800727c:	2102      	movs	r1, #2
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f846 	bl	8007310 <RCCEx_PLLSAI1_Config>
 8007284:	4603      	mov	r3, r0
 8007286:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007288:	7cfb      	ldrb	r3, [r7, #19]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d014      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800728e:	7cfb      	ldrb	r3, [r7, #19]
 8007290:	74bb      	strb	r3, [r7, #18]
 8007292:	e011      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800729c:	d10c      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3320      	adds	r3, #32
 80072a2:	2102      	movs	r1, #2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f923 	bl	80074f0 <RCCEx_PLLSAI2_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072ae:	7cfb      	ldrb	r3, [r7, #19]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80072b4:	7cfb      	ldrb	r3, [r7, #19]
 80072b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d4:	490d      	ldr	r1, [pc, #52]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072e8:	4b08      	ldr	r3, [pc, #32]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80072ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f8:	4904      	ldr	r1, [pc, #16]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007300:	7cbb      	ldrb	r3, [r7, #18]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40021000 	.word	0x40021000

08007310 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800731e:	4b73      	ldr	r3, [pc, #460]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d018      	beq.n	800735c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800732a:	4b70      	ldr	r3, [pc, #448]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f003 0203 	and.w	r2, r3, #3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d10d      	bne.n	8007356 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
       ||
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007342:	4b6a      	ldr	r3, [pc, #424]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	091b      	lsrs	r3, r3, #4
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
       ||
 8007352:	429a      	cmp	r2, r3
 8007354:	d044      	beq.n	80073e0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	73fb      	strb	r3, [r7, #15]
 800735a:	e041      	b.n	80073e0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d00c      	beq.n	800737e <RCCEx_PLLSAI1_Config+0x6e>
 8007364:	2b03      	cmp	r3, #3
 8007366:	d013      	beq.n	8007390 <RCCEx_PLLSAI1_Config+0x80>
 8007368:	2b01      	cmp	r3, #1
 800736a:	d120      	bne.n	80073ae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800736c:	4b5f      	ldr	r3, [pc, #380]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d11d      	bne.n	80073b4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800737c:	e01a      	b.n	80073b4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800737e:	4b5b      	ldr	r3, [pc, #364]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007386:	2b00      	cmp	r3, #0
 8007388:	d116      	bne.n	80073b8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800738e:	e013      	b.n	80073b8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007390:	4b56      	ldr	r3, [pc, #344]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10f      	bne.n	80073bc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800739c:	4b53      	ldr	r3, [pc, #332]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d109      	bne.n	80073bc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073ac:	e006      	b.n	80073bc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	73fb      	strb	r3, [r7, #15]
      break;
 80073b2:	e004      	b.n	80073be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80073b4:	bf00      	nop
 80073b6:	e002      	b.n	80073be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80073b8:	bf00      	nop
 80073ba:	e000      	b.n	80073be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80073bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10d      	bne.n	80073e0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80073c4:	4b49      	ldr	r3, [pc, #292]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6819      	ldr	r1, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	430b      	orrs	r3, r1
 80073da:	4944      	ldr	r1, [pc, #272]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d17c      	bne.n	80074e0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80073e6:	4b41      	ldr	r3, [pc, #260]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a40      	ldr	r2, [pc, #256]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80073ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f2:	f7fe fab5 	bl	8005960 <HAL_GetTick>
 80073f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073f8:	e009      	b.n	800740e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073fa:	f7fe fab1 	bl	8005960 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d902      	bls.n	800740e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	73fb      	strb	r3, [r7, #15]
        break;
 800740c:	e005      	b.n	800741a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800740e:	4b37      	ldr	r3, [pc, #220]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1ef      	bne.n	80073fa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d15f      	bne.n	80074e0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d110      	bne.n	8007448 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007426:	4b31      	ldr	r3, [pc, #196]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800742e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6892      	ldr	r2, [r2, #8]
 8007436:	0211      	lsls	r1, r2, #8
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	68d2      	ldr	r2, [r2, #12]
 800743c:	06d2      	lsls	r2, r2, #27
 800743e:	430a      	orrs	r2, r1
 8007440:	492a      	ldr	r1, [pc, #168]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007442:	4313      	orrs	r3, r2
 8007444:	610b      	str	r3, [r1, #16]
 8007446:	e027      	b.n	8007498 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d112      	bne.n	8007474 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800744e:	4b27      	ldr	r3, [pc, #156]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007456:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6892      	ldr	r2, [r2, #8]
 800745e:	0211      	lsls	r1, r2, #8
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6912      	ldr	r2, [r2, #16]
 8007464:	0852      	lsrs	r2, r2, #1
 8007466:	3a01      	subs	r2, #1
 8007468:	0552      	lsls	r2, r2, #21
 800746a:	430a      	orrs	r2, r1
 800746c:	491f      	ldr	r1, [pc, #124]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800746e:	4313      	orrs	r3, r2
 8007470:	610b      	str	r3, [r1, #16]
 8007472:	e011      	b.n	8007498 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007474:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800747c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6892      	ldr	r2, [r2, #8]
 8007484:	0211      	lsls	r1, r2, #8
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6952      	ldr	r2, [r2, #20]
 800748a:	0852      	lsrs	r2, r2, #1
 800748c:	3a01      	subs	r2, #1
 800748e:	0652      	lsls	r2, r2, #25
 8007490:	430a      	orrs	r2, r1
 8007492:	4916      	ldr	r1, [pc, #88]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8007494:	4313      	orrs	r3, r2
 8007496:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007498:	4b14      	ldr	r3, [pc, #80]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a13      	ldr	r2, [pc, #76]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800749e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7fe fa5c 	bl	8005960 <HAL_GetTick>
 80074a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074aa:	e009      	b.n	80074c0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074ac:	f7fe fa58 	bl	8005960 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d902      	bls.n	80074c0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	73fb      	strb	r3, [r7, #15]
          break;
 80074be:	e005      	b.n	80074cc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0ef      	beq.n	80074ac <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80074d2:	4b06      	ldr	r3, [pc, #24]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	4904      	ldr	r1, [pc, #16]	; (80074ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40021000 	.word	0x40021000

080074f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80074fe:	4b68      	ldr	r3, [pc, #416]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d018      	beq.n	800753c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800750a:	4b65      	ldr	r3, [pc, #404]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f003 0203 	and.w	r2, r3, #3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d10d      	bne.n	8007536 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
       ||
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007522:	4b5f      	ldr	r3, [pc, #380]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	091b      	lsrs	r3, r3, #4
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
       ||
 8007532:	429a      	cmp	r2, r3
 8007534:	d044      	beq.n	80075c0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]
 800753a:	e041      	b.n	80075c0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d00c      	beq.n	800755e <RCCEx_PLLSAI2_Config+0x6e>
 8007544:	2b03      	cmp	r3, #3
 8007546:	d013      	beq.n	8007570 <RCCEx_PLLSAI2_Config+0x80>
 8007548:	2b01      	cmp	r3, #1
 800754a:	d120      	bne.n	800758e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800754c:	4b54      	ldr	r3, [pc, #336]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11d      	bne.n	8007594 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800755c:	e01a      	b.n	8007594 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800755e:	4b50      	ldr	r3, [pc, #320]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007566:	2b00      	cmp	r3, #0
 8007568:	d116      	bne.n	8007598 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800756e:	e013      	b.n	8007598 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007570:	4b4b      	ldr	r3, [pc, #300]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10f      	bne.n	800759c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800757c:	4b48      	ldr	r3, [pc, #288]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800758c:	e006      	b.n	800759c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	73fb      	strb	r3, [r7, #15]
      break;
 8007592:	e004      	b.n	800759e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800759c:	bf00      	nop
    }

    if(status == HAL_OK)
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10d      	bne.n	80075c0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80075a4:	4b3e      	ldr	r3, [pc, #248]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	430b      	orrs	r3, r1
 80075ba:	4939      	ldr	r1, [pc, #228]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d166      	bne.n	8007694 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80075c6:	4b36      	ldr	r3, [pc, #216]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a35      	ldr	r2, [pc, #212]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80075cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d2:	f7fe f9c5 	bl	8005960 <HAL_GetTick>
 80075d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80075d8:	e009      	b.n	80075ee <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075da:	f7fe f9c1 	bl	8005960 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d902      	bls.n	80075ee <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	73fb      	strb	r3, [r7, #15]
        break;
 80075ec:	e005      	b.n	80075fa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80075ee:	4b2c      	ldr	r3, [pc, #176]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1ef      	bne.n	80075da <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d149      	bne.n	8007694 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d110      	bne.n	8007628 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007606:	4b26      	ldr	r3, [pc, #152]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800760e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6892      	ldr	r2, [r2, #8]
 8007616:	0211      	lsls	r1, r2, #8
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	68d2      	ldr	r2, [r2, #12]
 800761c:	06d2      	lsls	r2, r2, #27
 800761e:	430a      	orrs	r2, r1
 8007620:	491f      	ldr	r1, [pc, #124]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007622:	4313      	orrs	r3, r2
 8007624:	614b      	str	r3, [r1, #20]
 8007626:	e011      	b.n	800764c <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007628:	4b1d      	ldr	r3, [pc, #116]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007630:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6892      	ldr	r2, [r2, #8]
 8007638:	0211      	lsls	r1, r2, #8
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6912      	ldr	r2, [r2, #16]
 800763e:	0852      	lsrs	r2, r2, #1
 8007640:	3a01      	subs	r2, #1
 8007642:	0652      	lsls	r2, r2, #25
 8007644:	430a      	orrs	r2, r1
 8007646:	4916      	ldr	r1, [pc, #88]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007648:	4313      	orrs	r3, r2
 800764a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800764c:	4b14      	ldr	r3, [pc, #80]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a13      	ldr	r2, [pc, #76]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007656:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007658:	f7fe f982 	bl	8005960 <HAL_GetTick>
 800765c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800765e:	e009      	b.n	8007674 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007660:	f7fe f97e 	bl	8005960 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d902      	bls.n	8007674 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	73fb      	strb	r3, [r7, #15]
          break;
 8007672:	e005      	b.n	8007680 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0ef      	beq.n	8007660 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007686:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007688:	695a      	ldr	r2, [r3, #20]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	4904      	ldr	r1, [pc, #16]	; (80076a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007690:	4313      	orrs	r3, r2
 8007692:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40021000 	.word	0x40021000

080076a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d06c      	beq.n	8007790 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fd ff66 	bl	800559c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	22ca      	movs	r2, #202	; 0xca
 80076de:	625a      	str	r2, [r3, #36]	; 0x24
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2253      	movs	r2, #83	; 0x53
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f87c 	bl	80077e6 <RTC_EnterInitMode>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d14b      	bne.n	8007790 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6899      	ldr	r1, [r3, #8]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	68d2      	ldr	r2, [r2, #12]
 8007732:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6919      	ldr	r1, [r3, #16]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	041a      	lsls	r2, r3, #16
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f87f 	bl	800784c <RTC_ExitInitMode>
 800774e:	4603      	mov	r3, r0
 8007750:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d11b      	bne.n	8007790 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0203 	bic.w	r2, r2, #3
 8007766:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69da      	ldr	r2, [r3, #28]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077b0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80077b2:	f7fe f8d5 	bl	8005960 <HAL_GetTick>
 80077b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077b8:	e009      	b.n	80077ce <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077ba:	f7fe f8d1 	bl	8005960 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077c8:	d901      	bls.n	80077ce <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e007      	b.n	80077de <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0ee      	beq.n	80077ba <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d120      	bne.n	8007842 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800780a:	f7fe f8a9 	bl	8005960 <HAL_GetTick>
 800780e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007810:	e00d      	b.n	800782e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007812:	f7fe f8a5 	bl	8005960 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007820:	d905      	bls.n	800782e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2203      	movs	r2, #3
 800782a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <RTC_EnterInitMode+0x5c>
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	2b03      	cmp	r3, #3
 8007840:	d1e7      	bne.n	8007812 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007858:	4b1a      	ldr	r3, [pc, #104]	; (80078c4 <RTC_ExitInitMode+0x78>)
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	4a19      	ldr	r2, [pc, #100]	; (80078c4 <RTC_ExitInitMode+0x78>)
 800785e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007862:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007864:	4b17      	ldr	r3, [pc, #92]	; (80078c4 <RTC_ExitInitMode+0x78>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10c      	bne.n	800788a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ff92 	bl	800779a <HAL_RTC_WaitForSynchro>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01e      	beq.n	80078ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2203      	movs	r2, #3
 8007880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	73fb      	strb	r3, [r7, #15]
 8007888:	e017      	b.n	80078ba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800788a:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <RTC_ExitInitMode+0x78>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	4a0d      	ldr	r2, [pc, #52]	; (80078c4 <RTC_ExitInitMode+0x78>)
 8007890:	f023 0320 	bic.w	r3, r3, #32
 8007894:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff ff7f 	bl	800779a <HAL_RTC_WaitForSynchro>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2203      	movs	r2, #3
 80078a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <RTC_ExitInitMode+0x78>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	4a04      	ldr	r2, [pc, #16]	; (80078c4 <RTC_ExitInitMode+0x78>)
 80078b4:	f043 0320 	orr.w	r3, r3, #32
 80078b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	40002800 	.word	0x40002800

080078c8 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80078de:	2302      	movs	r3, #2
 80078e0:	e07f      	b.n	80079e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2202      	movs	r2, #2
 80078ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	22ca      	movs	r2, #202	; 0xca
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2253      	movs	r2, #83	; 0x53
 8007900:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007910:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007922:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d120      	bne.n	8007974 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8007932:	f7fe f815 	bl	8005960 <HAL_GetTick>
 8007936:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007938:	e015      	b.n	8007966 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800793a:	f7fe f811 	bl	8005960 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007948:	d90d      	bls.n	8007966 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	22ff      	movs	r2, #255	; 0xff
 8007950:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2203      	movs	r2, #3
 8007956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e03d      	b.n	80079e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0e2      	beq.n	800793a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f023 0107 	bic.w	r1, r3, #7
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	430a      	orrs	r2, r1
 800798e:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a15      	ldr	r2, [pc, #84]	; (80079ec <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800799a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800799c:	4b13      	ldr	r3, [pc, #76]	; (80079ec <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4a12      	ldr	r2, [pc, #72]	; (80079ec <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80079a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079a6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079b6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	22ff      	movs	r2, #255	; 0xff
 80079ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40010400 	.word	0x40010400

080079f0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d101      	bne.n	8007a06 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8007a02:	2302      	movs	r3, #2
 8007a04:	e04d      	b.n	8007aa2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	22ca      	movs	r2, #202	; 0xca
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2253      	movs	r2, #83	; 0x53
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a34:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a44:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8007a46:	f7fd ff8b 	bl	8005960 <HAL_GetTick>
 8007a4a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a4c:	e015      	b.n	8007a7a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a4e:	f7fd ff87 	bl	8005960 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a5c:	d90d      	bls.n	8007a7a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	22ff      	movs	r2, #255	; 0xff
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2203      	movs	r2, #3
 8007a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e013      	b.n	8007aa2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0e2      	beq.n	8007a4e <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	22ff      	movs	r2, #255	; 0xff
 8007a8e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e07c      	b.n	8007bb6 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7fd fd7c 	bl	80055d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007afc:	d902      	bls.n	8007b04 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	e002      	b.n	8007b0a <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b12:	d007      	beq.n	8007b24 <HAL_SPI_Init+0x7a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b1c:	d002      	beq.n	8007b24 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10b      	bne.n	8007b44 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b34:	d903      	bls.n	8007b3e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8007b3c:	e002      	b.n	8007b44 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	ea42 0103 	orr.w	r1, r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	f003 0204 	and.w	r2, r3, #4
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b92:	431a      	orrs	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	ea42 0103 	orr.w	r1, r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b088      	sub	sp, #32
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	603b      	str	r3, [r7, #0]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_SPI_Transmit+0x22>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e150      	b.n	8007e82 <HAL_SPI_Transmit+0x2c4>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007be8:	f7fd feba 	bl	8005960 <HAL_GetTick>
 8007bec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d002      	beq.n	8007c04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007bfe:	2302      	movs	r3, #2
 8007c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c02:	e135      	b.n	8007e70 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <HAL_SPI_Transmit+0x52>
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c14:	e12c      	b.n	8007e70 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2203      	movs	r2, #3
 8007c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	88fa      	ldrh	r2, [r7, #6]
 8007c34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c60:	d107      	bne.n	8007c72 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7c:	2b40      	cmp	r3, #64	; 0x40
 8007c7e:	d007      	beq.n	8007c90 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c98:	d94b      	bls.n	8007d32 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <HAL_SPI_Transmit+0xea>
 8007ca2:	8afb      	ldrh	r3, [r7, #22]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d13e      	bne.n	8007d26 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	881a      	ldrh	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	1c9a      	adds	r2, r3, #2
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ccc:	e02b      	b.n	8007d26 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d112      	bne.n	8007d02 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	881a      	ldrh	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	1c9a      	adds	r2, r3, #2
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d00:	e011      	b.n	8007d26 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d02:	f7fd fe2d 	bl	8005960 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d803      	bhi.n	8007d1a <HAL_SPI_Transmit+0x15c>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d102      	bne.n	8007d20 <HAL_SPI_Transmit+0x162>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d24:	e0a4      	b.n	8007e70 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1ce      	bne.n	8007cce <HAL_SPI_Transmit+0x110>
 8007d30:	e07c      	b.n	8007e2c <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <HAL_SPI_Transmit+0x182>
 8007d3a:	8afb      	ldrh	r3, [r7, #22]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d170      	bne.n	8007e22 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d912      	bls.n	8007d70 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	881a      	ldrh	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	1c9a      	adds	r2, r3, #2
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b02      	subs	r3, #2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d6e:	e058      	b.n	8007e22 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007d96:	e044      	b.n	8007e22 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d12b      	bne.n	8007dfe <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d912      	bls.n	8007dd6 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	881a      	ldrh	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	1c9a      	adds	r2, r3, #2
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	3b02      	subs	r3, #2
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dd4:	e025      	b.n	8007e22 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dfc:	e011      	b.n	8007e22 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dfe:	f7fd fdaf 	bl	8005960 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d803      	bhi.n	8007e16 <HAL_SPI_Transmit+0x258>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d102      	bne.n	8007e1c <HAL_SPI_Transmit+0x25e>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e20:	e026      	b.n	8007e70 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1b5      	bne.n	8007d98 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fc94 	bl	800875e <SPI_EndRxTxTransaction>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	77fb      	strb	r3, [r7, #31]
 8007e6c:	e000      	b.n	8007e70 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007e6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e80:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b088      	sub	sp, #32
 8007e8e:	af02      	add	r7, sp, #8
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	4613      	mov	r3, r2
 8007e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea6:	d112      	bne.n	8007ece <HAL_SPI_Receive+0x44>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10e      	bne.n	8007ece <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007eb8:	88fa      	ldrh	r2, [r7, #6]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f908 	bl	80080da <HAL_SPI_TransmitReceive>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	e101      	b.n	80080d2 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_SPI_Receive+0x52>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e0fa      	b.n	80080d2 <HAL_SPI_Receive+0x248>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ee4:	f7fd fd3c 	bl	8005960 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d002      	beq.n	8007efc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007efa:	e0e1      	b.n	80080c0 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_SPI_Receive+0x7e>
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d102      	bne.n	8007f0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f0c:	e0d8      	b.n	80080c0 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2204      	movs	r2, #4
 8007f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	88fa      	ldrh	r2, [r7, #6]
 8007f2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f58:	d908      	bls.n	8007f6c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f68:	605a      	str	r2, [r3, #4]
 8007f6a:	e007      	b.n	8007f7c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f7a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f84:	d107      	bne.n	8007f96 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa0:	2b40      	cmp	r3, #64	; 0x40
 8007fa2:	d007      	beq.n	8007fb4 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fbc:	d867      	bhi.n	800808e <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007fbe:	e030      	b.n	8008022 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d117      	bne.n	8007ffe <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f103 020c 	add.w	r2, r3, #12
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	7812      	ldrb	r2, [r2, #0]
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007ffc:	e011      	b.n	8008022 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ffe:	f7fd fcaf 	bl	8005960 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d803      	bhi.n	8008016 <HAL_SPI_Receive+0x18c>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008014:	d102      	bne.n	800801c <HAL_SPI_Receive+0x192>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008020:	e04e      	b.n	80080c0 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1c8      	bne.n	8007fc0 <HAL_SPI_Receive+0x136>
 800802e:	e034      	b.n	800809a <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b01      	cmp	r3, #1
 800803c:	d115      	bne.n	800806a <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	b292      	uxth	r2, r2
 800804a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	1c9a      	adds	r2, r3, #2
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008068:	e011      	b.n	800808e <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800806a:	f7fd fc79 	bl	8005960 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d803      	bhi.n	8008082 <HAL_SPI_Receive+0x1f8>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008080:	d102      	bne.n	8008088 <HAL_SPI_Receive+0x1fe>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800808c:	e018      	b.n	80080c0 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1ca      	bne.n	8008030 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fb05 	bl	80086ae <SPI_EndRxTransaction>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	75fb      	strb	r3, [r7, #23]
 80080bc:	e000      	b.n	80080c0 <HAL_SPI_Receive+0x236>
  }

error :
 80080be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b08a      	sub	sp, #40	; 0x28
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080e8:	2301      	movs	r3, #1
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_SPI_TransmitReceive+0x26>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e1fb      	b.n	80084f8 <HAL_SPI_TransmitReceive+0x41e>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008108:	f7fd fc2a 	bl	8005960 <HAL_GetTick>
 800810c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008114:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800811c:	887b      	ldrh	r3, [r7, #2]
 800811e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008120:	887b      	ldrh	r3, [r7, #2]
 8008122:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008124:	7efb      	ldrb	r3, [r7, #27]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d00e      	beq.n	8008148 <HAL_SPI_TransmitReceive+0x6e>
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008130:	d106      	bne.n	8008140 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <HAL_SPI_TransmitReceive+0x66>
 800813a:	7efb      	ldrb	r3, [r7, #27]
 800813c:	2b04      	cmp	r3, #4
 800813e:	d003      	beq.n	8008148 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008140:	2302      	movs	r3, #2
 8008142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008146:	e1cd      	b.n	80084e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <HAL_SPI_TransmitReceive+0x80>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <HAL_SPI_TransmitReceive+0x80>
 8008154:	887b      	ldrh	r3, [r7, #2]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008160:	e1c0      	b.n	80084e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b04      	cmp	r3, #4
 800816c:	d003      	beq.n	8008176 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2205      	movs	r2, #5
 8008172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	887a      	ldrh	r2, [r7, #2]
 8008186:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	887a      	ldrh	r2, [r7, #2]
 800818e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	887a      	ldrh	r2, [r7, #2]
 800819c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	887a      	ldrh	r2, [r7, #2]
 80081a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081b8:	d802      	bhi.n	80081c0 <HAL_SPI_TransmitReceive+0xe6>
 80081ba:	8a3b      	ldrh	r3, [r7, #16]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d908      	bls.n	80081d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081ce:	605a      	str	r2, [r3, #4]
 80081d0:	e007      	b.n	80081e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ec:	2b40      	cmp	r3, #64	; 0x40
 80081ee:	d007      	beq.n	8008200 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008208:	d97c      	bls.n	8008304 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <HAL_SPI_TransmitReceive+0x13e>
 8008212:	8a7b      	ldrh	r3, [r7, #18]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d169      	bne.n	80082ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	881a      	ldrh	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	1c9a      	adds	r2, r3, #2
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008232:	b29b      	uxth	r3, r3
 8008234:	3b01      	subs	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800823c:	e056      	b.n	80082ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b02      	cmp	r3, #2
 800824a:	d11b      	bne.n	8008284 <HAL_SPI_TransmitReceive+0x1aa>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d016      	beq.n	8008284 <HAL_SPI_TransmitReceive+0x1aa>
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	2b01      	cmp	r3, #1
 800825a:	d113      	bne.n	8008284 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	881a      	ldrh	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	1c9a      	adds	r2, r3, #2
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b01      	cmp	r3, #1
 8008290:	d11c      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x1f2>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d016      	beq.n	80082cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a8:	b292      	uxth	r2, r2
 80082aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b0:	1c9a      	adds	r2, r3, #2
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082c8:	2301      	movs	r3, #1
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082cc:	f7fd fb48 	bl	8005960 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d8:	429a      	cmp	r2, r3
 80082da:	d807      	bhi.n	80082ec <HAL_SPI_TransmitReceive+0x212>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d003      	beq.n	80082ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80082ea:	e0fb      	b.n	80084e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1a3      	bne.n	800823e <HAL_SPI_TransmitReceive+0x164>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d19d      	bne.n	800823e <HAL_SPI_TransmitReceive+0x164>
 8008302:	e0df      	b.n	80084c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <HAL_SPI_TransmitReceive+0x23a>
 800830c:	8a7b      	ldrh	r3, [r7, #18]
 800830e:	2b01      	cmp	r3, #1
 8008310:	f040 80cb 	bne.w	80084aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b01      	cmp	r3, #1
 800831c:	d912      	bls.n	8008344 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008322:	881a      	ldrh	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	1c9a      	adds	r2, r3, #2
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b02      	subs	r3, #2
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008342:	e0b2      	b.n	80084aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008360:	b29b      	uxth	r3, r3
 8008362:	3b01      	subs	r3, #1
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800836a:	e09e      	b.n	80084aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b02      	cmp	r3, #2
 8008378:	d134      	bne.n	80083e4 <HAL_SPI_TransmitReceive+0x30a>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d02f      	beq.n	80083e4 <HAL_SPI_TransmitReceive+0x30a>
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	2b01      	cmp	r3, #1
 8008388:	d12c      	bne.n	80083e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800838e:	b29b      	uxth	r3, r3
 8008390:	2b01      	cmp	r3, #1
 8008392:	d912      	bls.n	80083ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	881a      	ldrh	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	1c9a      	adds	r2, r3, #2
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	3b02      	subs	r3, #2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083b8:	e012      	b.n	80083e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	330c      	adds	r3, #12
 80083c4:	7812      	ldrb	r2, [r2, #0]
 80083c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d148      	bne.n	8008484 <HAL_SPI_TransmitReceive+0x3aa>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d042      	beq.n	8008484 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b01      	cmp	r3, #1
 8008408:	d923      	bls.n	8008452 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	b292      	uxth	r2, r2
 8008416:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	1c9a      	adds	r2, r3, #2
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008428:	b29b      	uxth	r3, r3
 800842a:	3b02      	subs	r3, #2
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800843a:	b29b      	uxth	r3, r3
 800843c:	2b01      	cmp	r3, #1
 800843e:	d81f      	bhi.n	8008480 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800844e:	605a      	str	r2, [r3, #4]
 8008450:	e016      	b.n	8008480 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f103 020c 	add.w	r2, r3, #12
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008474:	b29b      	uxth	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008480:	2301      	movs	r3, #1
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008484:	f7fd fa6c 	bl	8005960 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008490:	429a      	cmp	r2, r3
 8008492:	d803      	bhi.n	800849c <HAL_SPI_TransmitReceive+0x3c2>
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849a:	d102      	bne.n	80084a2 <HAL_SPI_TransmitReceive+0x3c8>
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80084a8:	e01c      	b.n	80084e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f47f af5b 	bne.w	800836c <HAL_SPI_TransmitReceive+0x292>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f47f af54 	bne.w	800836c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084c4:	69fa      	ldr	r2, [r7, #28]
 80084c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f948 	bl	800875e <SPI_EndRxTxTransaction>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d006      	beq.n	80084e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2220      	movs	r2, #32
 80084de:	661a      	str	r2, [r3, #96]	; 0x60
 80084e0:	e000      	b.n	80084e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80084e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3728      	adds	r7, #40	; 0x28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	4613      	mov	r3, r2
 800850e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008510:	e04c      	b.n	80085ac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d048      	beq.n	80085ac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800851a:	f7fd fa21 	bl	8005960 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d902      	bls.n	8008530 <SPI_WaitFlagStateUntilTimeout+0x30>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d13d      	bne.n	80085ac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800853e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008548:	d111      	bne.n	800856e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008552:	d004      	beq.n	800855e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855c:	d107      	bne.n	800856e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800856c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008576:	d10f      	bne.n	8008598 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008596:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e00f      	b.n	80085cc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4013      	ands	r3, r2
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	bf0c      	ite	eq
 80085bc:	2301      	moveq	r3, #1
 80085be:	2300      	movne	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d1a3      	bne.n	8008512 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80085e2:	e057      	b.n	8008694 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80085ea:	d106      	bne.n	80085fa <SPI_WaitFifoStateUntilTimeout+0x26>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d103      	bne.n	80085fa <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	330c      	adds	r3, #12
 80085f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008600:	d048      	beq.n	8008694 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008602:	f7fd f9ad 	bl	8005960 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d902      	bls.n	8008618 <SPI_WaitFifoStateUntilTimeout+0x44>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d13d      	bne.n	8008694 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008630:	d111      	bne.n	8008656 <SPI_WaitFifoStateUntilTimeout+0x82>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800863a:	d004      	beq.n	8008646 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008644:	d107      	bne.n	8008656 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008654:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865e:	d10f      	bne.n	8008680 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800867e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e008      	b.n	80086a6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4013      	ands	r3, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d19f      	bne.n	80085e4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b086      	sub	sp, #24
 80086b2:	af02      	add	r7, sp, #8
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086c2:	d111      	bne.n	80086e8 <SPI_EndRxTransaction+0x3a>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086cc:	d004      	beq.n	80086d8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d6:	d107      	bne.n	80086e8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086e6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2200      	movs	r2, #0
 80086f0:	2180      	movs	r1, #128	; 0x80
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff ff04 	bl	8008500 <SPI_WaitFlagStateUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008702:	f043 0220 	orr.w	r2, r3, #32
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e023      	b.n	8008756 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008716:	d11d      	bne.n	8008754 <SPI_EndRxTransaction+0xa6>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008720:	d004      	beq.n	800872c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872a:	d113      	bne.n	8008754 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff ff4b 	bl	80085d4 <SPI_WaitFifoStateUntilTimeout>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d007      	beq.n	8008754 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008748:	f043 0220 	orr.w	r2, r3, #32
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e000      	b.n	8008756 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b086      	sub	sp, #24
 8008762:	af02      	add	r7, sp, #8
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2200      	movs	r2, #0
 8008772:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7ff ff2c 	bl	80085d4 <SPI_WaitFifoStateUntilTimeout>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008786:	f043 0220 	orr.w	r2, r3, #32
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e027      	b.n	80087e2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2200      	movs	r2, #0
 800879a:	2180      	movs	r1, #128	; 0x80
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7ff feaf 	bl	8008500 <SPI_WaitFlagStateUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d007      	beq.n	80087b8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ac:	f043 0220 	orr.w	r2, r3, #32
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e014      	b.n	80087e2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2200      	movs	r2, #0
 80087c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff ff05 	bl	80085d4 <SPI_WaitFifoStateUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d4:	f043 0220 	orr.w	r2, r3, #32
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e000      	b.n	80087e2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e040      	b.n	800887e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7fc ff23 	bl	8005658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2224      	movs	r2, #36	; 0x24
 8008816:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0201 	bic.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fabb 	bl	8008da4 <UART_SetConfig>
 800882e:	4603      	mov	r3, r0
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e022      	b.n	800887e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fe21 	bl	8009488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008854:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008864:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0201 	orr.w	r2, r2, #1
 8008874:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fea8 	bl	80095cc <UART_CheckIdleState>
 800887c:	4603      	mov	r3, r0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b08a      	sub	sp, #40	; 0x28
 800888a:	af02      	add	r7, sp, #8
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	4613      	mov	r3, r2
 8008894:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889a:	2b20      	cmp	r3, #32
 800889c:	f040 8081 	bne.w	80089a2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_UART_Transmit+0x26>
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e079      	b.n	80089a4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_UART_Transmit+0x38>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e072      	b.n	80089a4 <HAL_UART_Transmit+0x11e>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2221      	movs	r2, #33	; 0x21
 80088d0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80088d2:	f7fd f845 	bl	8005960 <HAL_GetTick>
 80088d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	88fa      	ldrh	r2, [r7, #6]
 80088dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f0:	d108      	bne.n	8008904 <HAL_UART_Transmit+0x7e>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d104      	bne.n	8008904 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	e003      	b.n	800890c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008914:	e02d      	b.n	8008972 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2200      	movs	r2, #0
 800891e:	2180      	movs	r1, #128	; 0x80
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fe98 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e039      	b.n	80089a4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	881a      	ldrh	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008942:	b292      	uxth	r2, r2
 8008944:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	3302      	adds	r3, #2
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	e008      	b.n	8008960 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	b292      	uxth	r2, r2
 8008958:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	3301      	adds	r3, #1
 800895e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008966:	b29b      	uxth	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	b29a      	uxth	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008978:	b29b      	uxth	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1cb      	bne.n	8008916 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2200      	movs	r2, #0
 8008986:	2140      	movs	r1, #64	; 0x40
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fe64 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e005      	b.n	80089a4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	e000      	b.n	80089a4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80089a2:	2302      	movs	r3, #2
  }
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089be:	2b20      	cmp	r3, #32
 80089c0:	f040 808a 	bne.w	8008ad8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <HAL_UART_Receive_IT+0x24>
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e082      	b.n	8008ada <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d101      	bne.n	80089e2 <HAL_UART_Receive_IT+0x36>
 80089de:	2302      	movs	r3, #2
 80089e0:	e07b      	b.n	8008ada <HAL_UART_Receive_IT+0x12e>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	88fa      	ldrh	r2, [r7, #6]
 80089f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0e:	d10e      	bne.n	8008a2e <HAL_UART_Receive_IT+0x82>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d105      	bne.n	8008a24 <HAL_UART_Receive_IT+0x78>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a22:	e02d      	b.n	8008a80 <HAL_UART_Receive_IT+0xd4>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	22ff      	movs	r2, #255	; 0xff
 8008a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a2c:	e028      	b.n	8008a80 <HAL_UART_Receive_IT+0xd4>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10d      	bne.n	8008a52 <HAL_UART_Receive_IT+0xa6>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d104      	bne.n	8008a48 <HAL_UART_Receive_IT+0x9c>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	22ff      	movs	r2, #255	; 0xff
 8008a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a46:	e01b      	b.n	8008a80 <HAL_UART_Receive_IT+0xd4>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	227f      	movs	r2, #127	; 0x7f
 8008a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a50:	e016      	b.n	8008a80 <HAL_UART_Receive_IT+0xd4>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a5a:	d10d      	bne.n	8008a78 <HAL_UART_Receive_IT+0xcc>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d104      	bne.n	8008a6e <HAL_UART_Receive_IT+0xc2>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	227f      	movs	r2, #127	; 0x7f
 8008a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a6c:	e008      	b.n	8008a80 <HAL_UART_Receive_IT+0xd4>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	223f      	movs	r2, #63	; 0x3f
 8008a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a76:	e003      	b.n	8008a80 <HAL_UART_Receive_IT+0xd4>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2222      	movs	r2, #34	; 0x22
 8008a8a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0201 	orr.w	r2, r2, #1
 8008a9a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa4:	d107      	bne.n	8008ab6 <HAL_UART_Receive_IT+0x10a>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d103      	bne.n	8008ab6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4a0d      	ldr	r2, [pc, #52]	; (8008ae8 <HAL_UART_Receive_IT+0x13c>)
 8008ab2:	661a      	str	r2, [r3, #96]	; 0x60
 8008ab4:	e002      	b.n	8008abc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4a0c      	ldr	r2, [pc, #48]	; (8008aec <HAL_UART_Receive_IT+0x140>)
 8008aba:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008ad2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e000      	b.n	8008ada <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008ad8:	2302      	movs	r3, #2
  }
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	08009895 	.word	0x08009895
 8008aec:	080097eb 	.word	0x080097eb

08008af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b10:	69fa      	ldr	r2, [r7, #28]
 8008b12:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b16:	4013      	ands	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d113      	bne.n	8008b48 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f003 0320 	and.w	r3, r3, #32
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00e      	beq.n	8008b48 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d009      	beq.n	8008b48 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 8114 	beq.w	8008d66 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	4798      	blx	r3
      }
      return;
 8008b46:	e10e      	b.n	8008d66 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 80d6 	beq.w	8008cfc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d105      	bne.n	8008b66 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80cb 	beq.w	8008cfc <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00e      	beq.n	8008b8e <HAL_UART_IRQHandler+0x9e>
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b86:	f043 0201 	orr.w	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00e      	beq.n	8008bb6 <HAL_UART_IRQHandler+0xc6>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d009      	beq.n	8008bb6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bae:	f043 0204 	orr.w	r2, r3, #4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	f003 0304 	and.w	r3, r3, #4
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00e      	beq.n	8008bde <HAL_UART_IRQHandler+0xee>
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2204      	movs	r2, #4
 8008bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bd6:	f043 0202 	orr.w	r2, r3, #2
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d013      	beq.n	8008c10 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2208      	movs	r2, #8
 8008c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c08:	f043 0208 	orr.w	r2, r3, #8
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00f      	beq.n	8008c3a <HAL_UART_IRQHandler+0x14a>
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00a      	beq.n	8008c3a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c32:	f043 0220 	orr.w	r2, r3, #32
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 8093 	beq.w	8008d6a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00c      	beq.n	8008c68 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	f003 0320 	and.w	r3, r3, #32
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b40      	cmp	r3, #64	; 0x40
 8008c7a:	d004      	beq.n	8008c86 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d031      	beq.n	8008cea <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fd60 	bl	800974c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c96:	2b40      	cmp	r3, #64	; 0x40
 8008c98:	d123      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ca8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d013      	beq.n	8008cda <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb6:	4a30      	ldr	r2, [pc, #192]	; (8008d78 <HAL_UART_IRQHandler+0x288>)
 8008cb8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fc ff6b 	bl	8005b9a <HAL_DMA_Abort_IT>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d016      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd8:	e00e      	b.n	8008cf8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f858 	bl	8008d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce0:	e00a      	b.n	8008cf8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f854 	bl	8008d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce8:	e006      	b.n	8008cf8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f850 	bl	8008d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008cf6:	e038      	b.n	8008d6a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf8:	bf00      	nop
    return;
 8008cfa:	e036      	b.n	8008d6a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00d      	beq.n	8008d22 <HAL_UART_IRQHandler+0x232>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d008      	beq.n	8008d22 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fe0f 	bl	800993e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d20:	e026      	b.n	8008d70 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00d      	beq.n	8008d48 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d008      	beq.n	8008d48 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d017      	beq.n	8008d6e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	4798      	blx	r3
    }
    return;
 8008d46:	e012      	b.n	8008d6e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00e      	beq.n	8008d70 <HAL_UART_IRQHandler+0x280>
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d009      	beq.n	8008d70 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fd2b 	bl	80097b8 <UART_EndTransmit_IT>
    return;
 8008d62:	bf00      	nop
 8008d64:	e004      	b.n	8008d70 <HAL_UART_IRQHandler+0x280>
      return;
 8008d66:	bf00      	nop
 8008d68:	e002      	b.n	8008d70 <HAL_UART_IRQHandler+0x280>
    return;
 8008d6a:	bf00      	nop
 8008d6c:	e000      	b.n	8008d70 <HAL_UART_IRQHandler+0x280>
    return;
 8008d6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008d70:	3720      	adds	r7, #32
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	0800978d 	.word	0x0800978d

08008d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008da4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008da8:	b08a      	sub	sp, #40	; 0x28
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689a      	ldr	r2, [r3, #8]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	4bb8      	ldr	r3, [pc, #736]	; (80090bc <UART_SetConfig+0x318>)
 8008dda:	4013      	ands	r3, r2
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6812      	ldr	r2, [r2, #0]
 8008de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008de2:	430b      	orrs	r3, r1
 8008de4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4aae      	ldr	r2, [pc, #696]	; (80090c0 <UART_SetConfig+0x31c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d004      	beq.n	8008e16 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	4313      	orrs	r3, r2
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e26:	430a      	orrs	r2, r1
 8008e28:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4aa5      	ldr	r2, [pc, #660]	; (80090c4 <UART_SetConfig+0x320>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d126      	bne.n	8008e82 <UART_SetConfig+0xde>
 8008e34:	4ba4      	ldr	r3, [pc, #656]	; (80090c8 <UART_SetConfig+0x324>)
 8008e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d81a      	bhi.n	8008e78 <UART_SetConfig+0xd4>
 8008e42:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <UART_SetConfig+0xa4>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e59 	.word	0x08008e59
 8008e4c:	08008e69 	.word	0x08008e69
 8008e50:	08008e61 	.word	0x08008e61
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	2301      	movs	r3, #1
 8008e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e5e:	e105      	b.n	800906c <UART_SetConfig+0x2c8>
 8008e60:	2302      	movs	r3, #2
 8008e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e66:	e101      	b.n	800906c <UART_SetConfig+0x2c8>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e6e:	e0fd      	b.n	800906c <UART_SetConfig+0x2c8>
 8008e70:	2308      	movs	r3, #8
 8008e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e76:	e0f9      	b.n	800906c <UART_SetConfig+0x2c8>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e7e:	bf00      	nop
 8008e80:	e0f4      	b.n	800906c <UART_SetConfig+0x2c8>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a91      	ldr	r2, [pc, #580]	; (80090cc <UART_SetConfig+0x328>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d138      	bne.n	8008efe <UART_SetConfig+0x15a>
 8008e8c:	4b8e      	ldr	r3, [pc, #568]	; (80090c8 <UART_SetConfig+0x324>)
 8008e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e92:	f003 030c 	and.w	r3, r3, #12
 8008e96:	2b0c      	cmp	r3, #12
 8008e98:	d82c      	bhi.n	8008ef4 <UART_SetConfig+0x150>
 8008e9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <UART_SetConfig+0xfc>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008ed5 	.word	0x08008ed5
 8008ea4:	08008ef5 	.word	0x08008ef5
 8008ea8:	08008ef5 	.word	0x08008ef5
 8008eac:	08008ef5 	.word	0x08008ef5
 8008eb0:	08008ee5 	.word	0x08008ee5
 8008eb4:	08008ef5 	.word	0x08008ef5
 8008eb8:	08008ef5 	.word	0x08008ef5
 8008ebc:	08008ef5 	.word	0x08008ef5
 8008ec0:	08008edd 	.word	0x08008edd
 8008ec4:	08008ef5 	.word	0x08008ef5
 8008ec8:	08008ef5 	.word	0x08008ef5
 8008ecc:	08008ef5 	.word	0x08008ef5
 8008ed0:	08008eed 	.word	0x08008eed
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eda:	e0c7      	b.n	800906c <UART_SetConfig+0x2c8>
 8008edc:	2302      	movs	r3, #2
 8008ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ee2:	e0c3      	b.n	800906c <UART_SetConfig+0x2c8>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eea:	e0bf      	b.n	800906c <UART_SetConfig+0x2c8>
 8008eec:	2308      	movs	r3, #8
 8008eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ef2:	e0bb      	b.n	800906c <UART_SetConfig+0x2c8>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008efa:	bf00      	nop
 8008efc:	e0b6      	b.n	800906c <UART_SetConfig+0x2c8>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a73      	ldr	r2, [pc, #460]	; (80090d0 <UART_SetConfig+0x32c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d125      	bne.n	8008f54 <UART_SetConfig+0x1b0>
 8008f08:	4b6f      	ldr	r3, [pc, #444]	; (80090c8 <UART_SetConfig+0x324>)
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f12:	2b10      	cmp	r3, #16
 8008f14:	d011      	beq.n	8008f3a <UART_SetConfig+0x196>
 8008f16:	2b10      	cmp	r3, #16
 8008f18:	d802      	bhi.n	8008f20 <UART_SetConfig+0x17c>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d005      	beq.n	8008f2a <UART_SetConfig+0x186>
 8008f1e:	e014      	b.n	8008f4a <UART_SetConfig+0x1a6>
 8008f20:	2b20      	cmp	r3, #32
 8008f22:	d006      	beq.n	8008f32 <UART_SetConfig+0x18e>
 8008f24:	2b30      	cmp	r3, #48	; 0x30
 8008f26:	d00c      	beq.n	8008f42 <UART_SetConfig+0x19e>
 8008f28:	e00f      	b.n	8008f4a <UART_SetConfig+0x1a6>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f30:	e09c      	b.n	800906c <UART_SetConfig+0x2c8>
 8008f32:	2302      	movs	r3, #2
 8008f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f38:	e098      	b.n	800906c <UART_SetConfig+0x2c8>
 8008f3a:	2304      	movs	r3, #4
 8008f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f40:	e094      	b.n	800906c <UART_SetConfig+0x2c8>
 8008f42:	2308      	movs	r3, #8
 8008f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f48:	e090      	b.n	800906c <UART_SetConfig+0x2c8>
 8008f4a:	2310      	movs	r3, #16
 8008f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f50:	bf00      	nop
 8008f52:	e08b      	b.n	800906c <UART_SetConfig+0x2c8>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a5e      	ldr	r2, [pc, #376]	; (80090d4 <UART_SetConfig+0x330>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d125      	bne.n	8008faa <UART_SetConfig+0x206>
 8008f5e:	4b5a      	ldr	r3, [pc, #360]	; (80090c8 <UART_SetConfig+0x324>)
 8008f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008f68:	2b40      	cmp	r3, #64	; 0x40
 8008f6a:	d011      	beq.n	8008f90 <UART_SetConfig+0x1ec>
 8008f6c:	2b40      	cmp	r3, #64	; 0x40
 8008f6e:	d802      	bhi.n	8008f76 <UART_SetConfig+0x1d2>
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d005      	beq.n	8008f80 <UART_SetConfig+0x1dc>
 8008f74:	e014      	b.n	8008fa0 <UART_SetConfig+0x1fc>
 8008f76:	2b80      	cmp	r3, #128	; 0x80
 8008f78:	d006      	beq.n	8008f88 <UART_SetConfig+0x1e4>
 8008f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f7c:	d00c      	beq.n	8008f98 <UART_SetConfig+0x1f4>
 8008f7e:	e00f      	b.n	8008fa0 <UART_SetConfig+0x1fc>
 8008f80:	2300      	movs	r3, #0
 8008f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f86:	e071      	b.n	800906c <UART_SetConfig+0x2c8>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f8e:	e06d      	b.n	800906c <UART_SetConfig+0x2c8>
 8008f90:	2304      	movs	r3, #4
 8008f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f96:	e069      	b.n	800906c <UART_SetConfig+0x2c8>
 8008f98:	2308      	movs	r3, #8
 8008f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f9e:	e065      	b.n	800906c <UART_SetConfig+0x2c8>
 8008fa0:	2310      	movs	r3, #16
 8008fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fa6:	bf00      	nop
 8008fa8:	e060      	b.n	800906c <UART_SetConfig+0x2c8>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a4a      	ldr	r2, [pc, #296]	; (80090d8 <UART_SetConfig+0x334>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d129      	bne.n	8009008 <UART_SetConfig+0x264>
 8008fb4:	4b44      	ldr	r3, [pc, #272]	; (80090c8 <UART_SetConfig+0x324>)
 8008fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc2:	d014      	beq.n	8008fee <UART_SetConfig+0x24a>
 8008fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc8:	d802      	bhi.n	8008fd0 <UART_SetConfig+0x22c>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <UART_SetConfig+0x23a>
 8008fce:	e016      	b.n	8008ffe <UART_SetConfig+0x25a>
 8008fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd4:	d007      	beq.n	8008fe6 <UART_SetConfig+0x242>
 8008fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fda:	d00c      	beq.n	8008ff6 <UART_SetConfig+0x252>
 8008fdc:	e00f      	b.n	8008ffe <UART_SetConfig+0x25a>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fe4:	e042      	b.n	800906c <UART_SetConfig+0x2c8>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fec:	e03e      	b.n	800906c <UART_SetConfig+0x2c8>
 8008fee:	2304      	movs	r3, #4
 8008ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ff4:	e03a      	b.n	800906c <UART_SetConfig+0x2c8>
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ffc:	e036      	b.n	800906c <UART_SetConfig+0x2c8>
 8008ffe:	2310      	movs	r3, #16
 8009000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009004:	bf00      	nop
 8009006:	e031      	b.n	800906c <UART_SetConfig+0x2c8>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a2c      	ldr	r2, [pc, #176]	; (80090c0 <UART_SetConfig+0x31c>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d129      	bne.n	8009066 <UART_SetConfig+0x2c2>
 8009012:	4b2d      	ldr	r3, [pc, #180]	; (80090c8 <UART_SetConfig+0x324>)
 8009014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800901c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009020:	d014      	beq.n	800904c <UART_SetConfig+0x2a8>
 8009022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009026:	d802      	bhi.n	800902e <UART_SetConfig+0x28a>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <UART_SetConfig+0x298>
 800902c:	e016      	b.n	800905c <UART_SetConfig+0x2b8>
 800902e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009032:	d007      	beq.n	8009044 <UART_SetConfig+0x2a0>
 8009034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009038:	d00c      	beq.n	8009054 <UART_SetConfig+0x2b0>
 800903a:	e00f      	b.n	800905c <UART_SetConfig+0x2b8>
 800903c:	2300      	movs	r3, #0
 800903e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009042:	e013      	b.n	800906c <UART_SetConfig+0x2c8>
 8009044:	2302      	movs	r3, #2
 8009046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800904a:	e00f      	b.n	800906c <UART_SetConfig+0x2c8>
 800904c:	2304      	movs	r3, #4
 800904e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009052:	e00b      	b.n	800906c <UART_SetConfig+0x2c8>
 8009054:	2308      	movs	r3, #8
 8009056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800905a:	e007      	b.n	800906c <UART_SetConfig+0x2c8>
 800905c:	2310      	movs	r3, #16
 800905e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009062:	bf00      	nop
 8009064:	e002      	b.n	800906c <UART_SetConfig+0x2c8>
 8009066:	2310      	movs	r3, #16
 8009068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <UART_SetConfig+0x31c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	f040 80fe 	bne.w	8009274 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800907c:	2b08      	cmp	r3, #8
 800907e:	d837      	bhi.n	80090f0 <UART_SetConfig+0x34c>
 8009080:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <UART_SetConfig+0x2e4>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	080090ad 	.word	0x080090ad
 800908c:	080090f1 	.word	0x080090f1
 8009090:	080090b5 	.word	0x080090b5
 8009094:	080090f1 	.word	0x080090f1
 8009098:	080090e1 	.word	0x080090e1
 800909c:	080090f1 	.word	0x080090f1
 80090a0:	080090f1 	.word	0x080090f1
 80090a4:	080090f1 	.word	0x080090f1
 80090a8:	080090e9 	.word	0x080090e9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80090ac:	f7fd fdac 	bl	8006c08 <HAL_RCC_GetPCLK1Freq>
 80090b0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80090b2:	e020      	b.n	80090f6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80090b4:	4b09      	ldr	r3, [pc, #36]	; (80090dc <UART_SetConfig+0x338>)
 80090b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80090b8:	e01d      	b.n	80090f6 <UART_SetConfig+0x352>
 80090ba:	bf00      	nop
 80090bc:	efff69f3 	.word	0xefff69f3
 80090c0:	40008000 	.word	0x40008000
 80090c4:	40013800 	.word	0x40013800
 80090c8:	40021000 	.word	0x40021000
 80090cc:	40004400 	.word	0x40004400
 80090d0:	40004800 	.word	0x40004800
 80090d4:	40004c00 	.word	0x40004c00
 80090d8:	40005000 	.word	0x40005000
 80090dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80090e0:	f7fd fcfc 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 80090e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80090e6:	e006      	b.n	80090f6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80090e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80090ee:	e002      	b.n	80090f6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	76fb      	strb	r3, [r7, #27]
        break;
 80090f4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 81b9 	beq.w	8009470 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	4613      	mov	r3, r2
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	4413      	add	r3, r2
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	429a      	cmp	r2, r3
 800910c:	d305      	bcc.n	800911a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	429a      	cmp	r2, r3
 8009118:	d902      	bls.n	8009120 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	76fb      	strb	r3, [r7, #27]
 800911e:	e1a7      	b.n	8009470 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8009120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009124:	2b08      	cmp	r3, #8
 8009126:	f200 8092 	bhi.w	800924e <UART_SetConfig+0x4aa>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <UART_SetConfig+0x38c>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009155 	.word	0x08009155
 8009134:	0800924f 	.word	0x0800924f
 8009138:	080091a3 	.word	0x080091a3
 800913c:	0800924f 	.word	0x0800924f
 8009140:	080091d7 	.word	0x080091d7
 8009144:	0800924f 	.word	0x0800924f
 8009148:	0800924f 	.word	0x0800924f
 800914c:	0800924f 	.word	0x0800924f
 8009150:	08009225 	.word	0x08009225
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8009154:	f7fd fd58 	bl	8006c08 <HAL_RCC_GetPCLK1Freq>
 8009158:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	4619      	mov	r1, r3
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	f04f 0400 	mov.w	r4, #0
 800916a:	0214      	lsls	r4, r2, #8
 800916c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009170:	020b      	lsls	r3, r1, #8
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6852      	ldr	r2, [r2, #4]
 8009176:	0852      	lsrs	r2, r2, #1
 8009178:	4611      	mov	r1, r2
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	eb13 0b01 	adds.w	fp, r3, r1
 8009182:	eb44 0c02 	adc.w	ip, r4, r2
 8009186:	4658      	mov	r0, fp
 8009188:	4661      	mov	r1, ip
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f04f 0400 	mov.w	r4, #0
 8009192:	461a      	mov	r2, r3
 8009194:	4623      	mov	r3, r4
 8009196:	f7f7 fdd7 	bl	8000d48 <__aeabi_uldivmod>
 800919a:	4603      	mov	r3, r0
 800919c:	460c      	mov	r4, r1
 800919e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80091a0:	e058      	b.n	8009254 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	085b      	lsrs	r3, r3, #1
 80091a8:	f04f 0400 	mov.w	r4, #0
 80091ac:	49ae      	ldr	r1, [pc, #696]	; (8009468 <UART_SetConfig+0x6c4>)
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	eb13 0b01 	adds.w	fp, r3, r1
 80091b6:	eb44 0c02 	adc.w	ip, r4, r2
 80091ba:	4658      	mov	r0, fp
 80091bc:	4661      	mov	r1, ip
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f04f 0400 	mov.w	r4, #0
 80091c6:	461a      	mov	r2, r3
 80091c8:	4623      	mov	r3, r4
 80091ca:	f7f7 fdbd 	bl	8000d48 <__aeabi_uldivmod>
 80091ce:	4603      	mov	r3, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80091d4:	e03e      	b.n	8009254 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80091d6:	f7fd fc81 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 80091da:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4619      	mov	r1, r3
 80091e0:	f04f 0200 	mov.w	r2, #0
 80091e4:	f04f 0300 	mov.w	r3, #0
 80091e8:	f04f 0400 	mov.w	r4, #0
 80091ec:	0214      	lsls	r4, r2, #8
 80091ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80091f2:	020b      	lsls	r3, r1, #8
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6852      	ldr	r2, [r2, #4]
 80091f8:	0852      	lsrs	r2, r2, #1
 80091fa:	4611      	mov	r1, r2
 80091fc:	f04f 0200 	mov.w	r2, #0
 8009200:	eb13 0b01 	adds.w	fp, r3, r1
 8009204:	eb44 0c02 	adc.w	ip, r4, r2
 8009208:	4658      	mov	r0, fp
 800920a:	4661      	mov	r1, ip
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f04f 0400 	mov.w	r4, #0
 8009214:	461a      	mov	r2, r3
 8009216:	4623      	mov	r3, r4
 8009218:	f7f7 fd96 	bl	8000d48 <__aeabi_uldivmod>
 800921c:	4603      	mov	r3, r0
 800921e:	460c      	mov	r4, r1
 8009220:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009222:	e017      	b.n	8009254 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	085b      	lsrs	r3, r3, #1
 800922a:	f04f 0400 	mov.w	r4, #0
 800922e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8009232:	f144 0100 	adc.w	r1, r4, #0
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f04f 0400 	mov.w	r4, #0
 800923e:	461a      	mov	r2, r3
 8009240:	4623      	mov	r3, r4
 8009242:	f7f7 fd81 	bl	8000d48 <__aeabi_uldivmod>
 8009246:	4603      	mov	r3, r0
 8009248:	460c      	mov	r4, r1
 800924a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800924c:	e002      	b.n	8009254 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	76fb      	strb	r3, [r7, #27]
            break;
 8009252:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800925a:	d308      	bcc.n	800926e <UART_SetConfig+0x4ca>
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009262:	d204      	bcs.n	800926e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69fa      	ldr	r2, [r7, #28]
 800926a:	60da      	str	r2, [r3, #12]
 800926c:	e100      	b.n	8009470 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	76fb      	strb	r3, [r7, #27]
 8009272:	e0fd      	b.n	8009470 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800927c:	f040 8084 	bne.w	8009388 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8009280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009284:	2b08      	cmp	r3, #8
 8009286:	d85f      	bhi.n	8009348 <UART_SetConfig+0x5a4>
 8009288:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <UART_SetConfig+0x4ec>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092b5 	.word	0x080092b5
 8009294:	080092d5 	.word	0x080092d5
 8009298:	080092f5 	.word	0x080092f5
 800929c:	08009349 	.word	0x08009349
 80092a0:	08009311 	.word	0x08009311
 80092a4:	08009349 	.word	0x08009349
 80092a8:	08009349 	.word	0x08009349
 80092ac:	08009349 	.word	0x08009349
 80092b0:	08009331 	.word	0x08009331
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092b4:	f7fd fca8 	bl	8006c08 <HAL_RCC_GetPCLK1Freq>
 80092b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	005a      	lsls	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	085b      	lsrs	r3, r3, #1
 80092c4:	441a      	add	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80092d2:	e03c      	b.n	800934e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092d4:	f7fd fcae 	bl	8006c34 <HAL_RCC_GetPCLK2Freq>
 80092d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	005a      	lsls	r2, r3, #1
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	085b      	lsrs	r3, r3, #1
 80092e4:	441a      	add	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80092f2:	e02c      	b.n	800934e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80092fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6852      	ldr	r2, [r2, #4]
 8009306:	fbb3 f3f2 	udiv	r3, r3, r2
 800930a:	b29b      	uxth	r3, r3
 800930c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800930e:	e01e      	b.n	800934e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009310:	f7fd fbe4 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 8009314:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	005a      	lsls	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	085b      	lsrs	r3, r3, #1
 8009320:	441a      	add	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	fbb2 f3f3 	udiv	r3, r2, r3
 800932a:	b29b      	uxth	r3, r3
 800932c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800932e:	e00e      	b.n	800934e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	085b      	lsrs	r3, r3, #1
 8009336:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009342:	b29b      	uxth	r3, r3
 8009344:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009346:	e002      	b.n	800934e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	76fb      	strb	r3, [r7, #27]
        break;
 800934c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	2b0f      	cmp	r3, #15
 8009352:	d916      	bls.n	8009382 <UART_SetConfig+0x5de>
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800935a:	d212      	bcs.n	8009382 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	b29b      	uxth	r3, r3
 8009360:	f023 030f 	bic.w	r3, r3, #15
 8009364:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	085b      	lsrs	r3, r3, #1
 800936a:	b29b      	uxth	r3, r3
 800936c:	f003 0307 	and.w	r3, r3, #7
 8009370:	b29a      	uxth	r2, r3
 8009372:	89fb      	ldrh	r3, [r7, #14]
 8009374:	4313      	orrs	r3, r2
 8009376:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	89fa      	ldrh	r2, [r7, #14]
 800937e:	60da      	str	r2, [r3, #12]
 8009380:	e076      	b.n	8009470 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	76fb      	strb	r3, [r7, #27]
 8009386:	e073      	b.n	8009470 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8009388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800938c:	2b08      	cmp	r3, #8
 800938e:	d85c      	bhi.n	800944a <UART_SetConfig+0x6a6>
 8009390:	a201      	add	r2, pc, #4	; (adr r2, 8009398 <UART_SetConfig+0x5f4>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	080093bd 	.word	0x080093bd
 800939c:	080093db 	.word	0x080093db
 80093a0:	080093f9 	.word	0x080093f9
 80093a4:	0800944b 	.word	0x0800944b
 80093a8:	08009415 	.word	0x08009415
 80093ac:	0800944b 	.word	0x0800944b
 80093b0:	0800944b 	.word	0x0800944b
 80093b4:	0800944b 	.word	0x0800944b
 80093b8:	08009433 	.word	0x08009433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093bc:	f7fd fc24 	bl	8006c08 <HAL_RCC_GetPCLK1Freq>
 80093c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	085a      	lsrs	r2, r3, #1
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	441a      	add	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80093d8:	e03a      	b.n	8009450 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093da:	f7fd fc2b 	bl	8006c34 <HAL_RCC_GetPCLK2Freq>
 80093de:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	085a      	lsrs	r2, r3, #1
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	441a      	add	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80093f6:	e02b      	b.n	8009450 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	085b      	lsrs	r3, r3, #1
 80093fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009402:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	6852      	ldr	r2, [r2, #4]
 800940a:	fbb3 f3f2 	udiv	r3, r3, r2
 800940e:	b29b      	uxth	r3, r3
 8009410:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009412:	e01d      	b.n	8009450 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009414:	f7fd fb62 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 8009418:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	085a      	lsrs	r2, r3, #1
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	441a      	add	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	fbb2 f3f3 	udiv	r3, r2, r3
 800942c:	b29b      	uxth	r3, r3
 800942e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009430:	e00e      	b.n	8009450 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	fbb2 f3f3 	udiv	r3, r2, r3
 8009444:	b29b      	uxth	r3, r3
 8009446:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009448:	e002      	b.n	8009450 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	76fb      	strb	r3, [r7, #27]
        break;
 800944e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	2b0f      	cmp	r3, #15
 8009454:	d90a      	bls.n	800946c <UART_SetConfig+0x6c8>
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800945c:	d206      	bcs.n	800946c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	60da      	str	r2, [r3, #12]
 8009466:	e003      	b.n	8009470 <UART_SetConfig+0x6cc>
 8009468:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800947c:	7efb      	ldrb	r3, [r7, #27]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3728      	adds	r7, #40	; 0x28
 8009482:	46bd      	mov	sp, r7
 8009484:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	f003 0308 	and.w	r3, r3, #8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009564:	2b00      	cmp	r3, #0
 8009566:	d01a      	beq.n	800959e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009586:	d10a      	bne.n	800959e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	605a      	str	r2, [r3, #4]
  }
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80095da:	f7fc f9c1 	bl	8005960 <HAL_GetTick>
 80095de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0308 	and.w	r3, r3, #8
 80095ea:	2b08      	cmp	r3, #8
 80095ec:	d10e      	bne.n	800960c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f82a 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e020      	b.n	800964e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0304 	and.w	r3, r3, #4
 8009616:	2b04      	cmp	r3, #4
 8009618:	d10e      	bne.n	8009638 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800961a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f814 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e00a      	b.n	800964e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2220      	movs	r2, #32
 800963c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2220      	movs	r2, #32
 8009642:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009666:	e05d      	b.n	8009724 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966e:	d059      	beq.n	8009724 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009670:	f7fc f976 	bl	8005960 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <UART_WaitOnFlagUntilTimeout+0x30>
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d11b      	bne.n	80096be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009694:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0201 	bic.w	r2, r2, #1
 80096a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2220      	movs	r2, #32
 80096aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2220      	movs	r2, #32
 80096b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e042      	b.n	8009744 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d02b      	beq.n	8009724 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096da:	d123      	bne.n	8009724 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	689a      	ldr	r2, [r3, #8]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0201 	bic.w	r2, r2, #1
 8009704:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2220      	movs	r2, #32
 8009710:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e00f      	b.n	8009744 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	69da      	ldr	r2, [r3, #28]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	4013      	ands	r3, r2
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	429a      	cmp	r2, r3
 8009732:	bf0c      	ite	eq
 8009734:	2301      	moveq	r3, #1
 8009736:	2300      	movne	r3, #0
 8009738:	b2db      	uxtb	r3, r3
 800973a:	461a      	mov	r2, r3
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	429a      	cmp	r2, r3
 8009740:	d092      	beq.n	8009668 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009762:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 0201 	bic.w	r2, r2, #1
 8009772:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff faf0 	bl	8008d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2220      	movs	r2, #32
 80097d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff facd 	bl	8008d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097f8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097fe:	2b22      	cmp	r3, #34	; 0x22
 8009800:	d13a      	bne.n	8009878 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009808:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800980a:	89bb      	ldrh	r3, [r7, #12]
 800980c:	b2d9      	uxtb	r1, r3
 800980e:	89fb      	ldrh	r3, [r7, #14]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009816:	400a      	ands	r2, r1
 8009818:	b2d2      	uxtb	r2, r2
 800981a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800983e:	b29b      	uxth	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d123      	bne.n	800988c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009852:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0201 	bic.w	r2, r2, #1
 8009862:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2220      	movs	r2, #32
 8009868:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7fb fdc5 	bl	8005400 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009876:	e009      	b.n	800988c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	8b1b      	ldrh	r3, [r3, #24]
 800987e:	b29a      	uxth	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0208 	orr.w	r2, r2, #8
 8009888:	b292      	uxth	r2, r2
 800988a:	831a      	strh	r2, [r3, #24]
}
 800988c:	bf00      	nop
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a8:	2b22      	cmp	r3, #34	; 0x22
 80098aa:	d13a      	bne.n	8009922 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098b2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80098ba:	89ba      	ldrh	r2, [r7, #12]
 80098bc:	89fb      	ldrh	r3, [r7, #14]
 80098be:	4013      	ands	r3, r2
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ca:	1c9a      	adds	r2, r3, #2
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	3b01      	subs	r3, #1
 80098da:	b29a      	uxth	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d123      	bne.n	8009936 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0201 	bic.w	r2, r2, #1
 800990c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fb fd70 	bl	8005400 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009920:	e009      	b.n	8009936 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	8b1b      	ldrh	r3, [r3, #24]
 8009928:	b29a      	uxth	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0208 	orr.w	r2, r2, #8
 8009932:	b292      	uxth	r2, r2
 8009934:	831a      	strh	r2, [r3, #24]
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <__errno>:
 8009954:	4b01      	ldr	r3, [pc, #4]	; (800995c <__errno+0x8>)
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20000020 	.word	0x20000020

08009960 <__libc_init_array>:
 8009960:	b570      	push	{r4, r5, r6, lr}
 8009962:	4e0d      	ldr	r6, [pc, #52]	; (8009998 <__libc_init_array+0x38>)
 8009964:	4c0d      	ldr	r4, [pc, #52]	; (800999c <__libc_init_array+0x3c>)
 8009966:	1ba4      	subs	r4, r4, r6
 8009968:	10a4      	asrs	r4, r4, #2
 800996a:	2500      	movs	r5, #0
 800996c:	42a5      	cmp	r5, r4
 800996e:	d109      	bne.n	8009984 <__libc_init_array+0x24>
 8009970:	4e0b      	ldr	r6, [pc, #44]	; (80099a0 <__libc_init_array+0x40>)
 8009972:	4c0c      	ldr	r4, [pc, #48]	; (80099a4 <__libc_init_array+0x44>)
 8009974:	f002 f9bc 	bl	800bcf0 <_init>
 8009978:	1ba4      	subs	r4, r4, r6
 800997a:	10a4      	asrs	r4, r4, #2
 800997c:	2500      	movs	r5, #0
 800997e:	42a5      	cmp	r5, r4
 8009980:	d105      	bne.n	800998e <__libc_init_array+0x2e>
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009988:	4798      	blx	r3
 800998a:	3501      	adds	r5, #1
 800998c:	e7ee      	b.n	800996c <__libc_init_array+0xc>
 800998e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009992:	4798      	blx	r3
 8009994:	3501      	adds	r5, #1
 8009996:	e7f2      	b.n	800997e <__libc_init_array+0x1e>
 8009998:	08011fe4 	.word	0x08011fe4
 800999c:	08011fe4 	.word	0x08011fe4
 80099a0:	08011fe4 	.word	0x08011fe4
 80099a4:	08011fe8 	.word	0x08011fe8

080099a8 <memset>:
 80099a8:	4402      	add	r2, r0
 80099aa:	4603      	mov	r3, r0
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d100      	bne.n	80099b2 <memset+0xa>
 80099b0:	4770      	bx	lr
 80099b2:	f803 1b01 	strb.w	r1, [r3], #1
 80099b6:	e7f9      	b.n	80099ac <memset+0x4>

080099b8 <__cvt>:
 80099b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099bc:	ec55 4b10 	vmov	r4, r5, d0
 80099c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80099c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	460e      	mov	r6, r1
 80099ca:	4691      	mov	r9, r2
 80099cc:	4619      	mov	r1, r3
 80099ce:	bfb8      	it	lt
 80099d0:	4622      	movlt	r2, r4
 80099d2:	462b      	mov	r3, r5
 80099d4:	f027 0720 	bic.w	r7, r7, #32
 80099d8:	bfbb      	ittet	lt
 80099da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099de:	461d      	movlt	r5, r3
 80099e0:	2300      	movge	r3, #0
 80099e2:	232d      	movlt	r3, #45	; 0x2d
 80099e4:	bfb8      	it	lt
 80099e6:	4614      	movlt	r4, r2
 80099e8:	2f46      	cmp	r7, #70	; 0x46
 80099ea:	700b      	strb	r3, [r1, #0]
 80099ec:	d004      	beq.n	80099f8 <__cvt+0x40>
 80099ee:	2f45      	cmp	r7, #69	; 0x45
 80099f0:	d100      	bne.n	80099f4 <__cvt+0x3c>
 80099f2:	3601      	adds	r6, #1
 80099f4:	2102      	movs	r1, #2
 80099f6:	e000      	b.n	80099fa <__cvt+0x42>
 80099f8:	2103      	movs	r1, #3
 80099fa:	ab03      	add	r3, sp, #12
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	ab02      	add	r3, sp, #8
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	4632      	mov	r2, r6
 8009a04:	4653      	mov	r3, sl
 8009a06:	ec45 4b10 	vmov	d0, r4, r5
 8009a0a:	f000 fcdd 	bl	800a3c8 <_dtoa_r>
 8009a0e:	2f47      	cmp	r7, #71	; 0x47
 8009a10:	4680      	mov	r8, r0
 8009a12:	d102      	bne.n	8009a1a <__cvt+0x62>
 8009a14:	f019 0f01 	tst.w	r9, #1
 8009a18:	d026      	beq.n	8009a68 <__cvt+0xb0>
 8009a1a:	2f46      	cmp	r7, #70	; 0x46
 8009a1c:	eb08 0906 	add.w	r9, r8, r6
 8009a20:	d111      	bne.n	8009a46 <__cvt+0x8e>
 8009a22:	f898 3000 	ldrb.w	r3, [r8]
 8009a26:	2b30      	cmp	r3, #48	; 0x30
 8009a28:	d10a      	bne.n	8009a40 <__cvt+0x88>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f7 f8c9 	bl	8000bc8 <__aeabi_dcmpeq>
 8009a36:	b918      	cbnz	r0, 8009a40 <__cvt+0x88>
 8009a38:	f1c6 0601 	rsb	r6, r6, #1
 8009a3c:	f8ca 6000 	str.w	r6, [sl]
 8009a40:	f8da 3000 	ldr.w	r3, [sl]
 8009a44:	4499      	add	r9, r3
 8009a46:	2200      	movs	r2, #0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	f7f7 f8bb 	bl	8000bc8 <__aeabi_dcmpeq>
 8009a52:	b938      	cbnz	r0, 8009a64 <__cvt+0xac>
 8009a54:	2230      	movs	r2, #48	; 0x30
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	454b      	cmp	r3, r9
 8009a5a:	d205      	bcs.n	8009a68 <__cvt+0xb0>
 8009a5c:	1c59      	adds	r1, r3, #1
 8009a5e:	9103      	str	r1, [sp, #12]
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	e7f8      	b.n	8009a56 <__cvt+0x9e>
 8009a64:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a6c:	eba3 0308 	sub.w	r3, r3, r8
 8009a70:	4640      	mov	r0, r8
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	b004      	add	sp, #16
 8009a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009a7a <__exponent>:
 8009a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	4604      	mov	r4, r0
 8009a80:	bfba      	itte	lt
 8009a82:	4249      	neglt	r1, r1
 8009a84:	232d      	movlt	r3, #45	; 0x2d
 8009a86:	232b      	movge	r3, #43	; 0x2b
 8009a88:	2909      	cmp	r1, #9
 8009a8a:	f804 2b02 	strb.w	r2, [r4], #2
 8009a8e:	7043      	strb	r3, [r0, #1]
 8009a90:	dd20      	ble.n	8009ad4 <__exponent+0x5a>
 8009a92:	f10d 0307 	add.w	r3, sp, #7
 8009a96:	461f      	mov	r7, r3
 8009a98:	260a      	movs	r6, #10
 8009a9a:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a9e:	fb06 1115 	mls	r1, r6, r5, r1
 8009aa2:	3130      	adds	r1, #48	; 0x30
 8009aa4:	2d09      	cmp	r5, #9
 8009aa6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009aaa:	f103 32ff 	add.w	r2, r3, #4294967295
 8009aae:	4629      	mov	r1, r5
 8009ab0:	dc09      	bgt.n	8009ac6 <__exponent+0x4c>
 8009ab2:	3130      	adds	r1, #48	; 0x30
 8009ab4:	3b02      	subs	r3, #2
 8009ab6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009aba:	42bb      	cmp	r3, r7
 8009abc:	4622      	mov	r2, r4
 8009abe:	d304      	bcc.n	8009aca <__exponent+0x50>
 8009ac0:	1a10      	subs	r0, r2, r0
 8009ac2:	b003      	add	sp, #12
 8009ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	e7e7      	b.n	8009a9a <__exponent+0x20>
 8009aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ace:	f804 2b01 	strb.w	r2, [r4], #1
 8009ad2:	e7f2      	b.n	8009aba <__exponent+0x40>
 8009ad4:	2330      	movs	r3, #48	; 0x30
 8009ad6:	4419      	add	r1, r3
 8009ad8:	7083      	strb	r3, [r0, #2]
 8009ada:	1d02      	adds	r2, r0, #4
 8009adc:	70c1      	strb	r1, [r0, #3]
 8009ade:	e7ef      	b.n	8009ac0 <__exponent+0x46>

08009ae0 <_printf_float>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	b08d      	sub	sp, #52	; 0x34
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009aec:	4616      	mov	r6, r2
 8009aee:	461f      	mov	r7, r3
 8009af0:	4605      	mov	r5, r0
 8009af2:	f001 fa21 	bl	800af38 <_localeconv_r>
 8009af6:	6803      	ldr	r3, [r0, #0]
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7f6 fbe2 	bl	80002c4 <strlen>
 8009b00:	2300      	movs	r3, #0
 8009b02:	930a      	str	r3, [sp, #40]	; 0x28
 8009b04:	f8d8 3000 	ldr.w	r3, [r8]
 8009b08:	9005      	str	r0, [sp, #20]
 8009b0a:	3307      	adds	r3, #7
 8009b0c:	f023 0307 	bic.w	r3, r3, #7
 8009b10:	f103 0208 	add.w	r2, r3, #8
 8009b14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b18:	f8d4 b000 	ldr.w	fp, [r4]
 8009b1c:	f8c8 2000 	str.w	r2, [r8]
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b28:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b2c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b30:	9307      	str	r3, [sp, #28]
 8009b32:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b36:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3a:	4ba7      	ldr	r3, [pc, #668]	; (8009dd8 <_printf_float+0x2f8>)
 8009b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b40:	f7f7 f874 	bl	8000c2c <__aeabi_dcmpun>
 8009b44:	bb70      	cbnz	r0, 8009ba4 <_printf_float+0xc4>
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	4ba3      	ldr	r3, [pc, #652]	; (8009dd8 <_printf_float+0x2f8>)
 8009b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b50:	f7f7 f84e 	bl	8000bf0 <__aeabi_dcmple>
 8009b54:	bb30      	cbnz	r0, 8009ba4 <_printf_float+0xc4>
 8009b56:	2200      	movs	r2, #0
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	f7f7 f83d 	bl	8000bdc <__aeabi_dcmplt>
 8009b62:	b110      	cbz	r0, 8009b6a <_printf_float+0x8a>
 8009b64:	232d      	movs	r3, #45	; 0x2d
 8009b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b6a:	4a9c      	ldr	r2, [pc, #624]	; (8009ddc <_printf_float+0x2fc>)
 8009b6c:	4b9c      	ldr	r3, [pc, #624]	; (8009de0 <_printf_float+0x300>)
 8009b6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009b72:	bf8c      	ite	hi
 8009b74:	4690      	movhi	r8, r2
 8009b76:	4698      	movls	r8, r3
 8009b78:	2303      	movs	r3, #3
 8009b7a:	f02b 0204 	bic.w	r2, fp, #4
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	6022      	str	r2, [r4, #0]
 8009b82:	f04f 0900 	mov.w	r9, #0
 8009b86:	9700      	str	r7, [sp, #0]
 8009b88:	4633      	mov	r3, r6
 8009b8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 f9e6 	bl	8009f60 <_printf_common>
 8009b94:	3001      	adds	r0, #1
 8009b96:	f040 808d 	bne.w	8009cb4 <_printf_float+0x1d4>
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	b00d      	add	sp, #52	; 0x34
 8009ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba4:	4642      	mov	r2, r8
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	4640      	mov	r0, r8
 8009baa:	4649      	mov	r1, r9
 8009bac:	f7f7 f83e 	bl	8000c2c <__aeabi_dcmpun>
 8009bb0:	b110      	cbz	r0, 8009bb8 <_printf_float+0xd8>
 8009bb2:	4a8c      	ldr	r2, [pc, #560]	; (8009de4 <_printf_float+0x304>)
 8009bb4:	4b8c      	ldr	r3, [pc, #560]	; (8009de8 <_printf_float+0x308>)
 8009bb6:	e7da      	b.n	8009b6e <_printf_float+0x8e>
 8009bb8:	6861      	ldr	r1, [r4, #4]
 8009bba:	1c4b      	adds	r3, r1, #1
 8009bbc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009bc0:	a80a      	add	r0, sp, #40	; 0x28
 8009bc2:	d13e      	bne.n	8009c42 <_printf_float+0x162>
 8009bc4:	2306      	movs	r3, #6
 8009bc6:	6063      	str	r3, [r4, #4]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009bce:	ab09      	add	r3, sp, #36	; 0x24
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	ec49 8b10 	vmov	d0, r8, r9
 8009bd6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bda:	6022      	str	r2, [r4, #0]
 8009bdc:	f8cd a004 	str.w	sl, [sp, #4]
 8009be0:	6861      	ldr	r1, [r4, #4]
 8009be2:	4628      	mov	r0, r5
 8009be4:	f7ff fee8 	bl	80099b8 <__cvt>
 8009be8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009bec:	2b47      	cmp	r3, #71	; 0x47
 8009bee:	4680      	mov	r8, r0
 8009bf0:	d109      	bne.n	8009c06 <_printf_float+0x126>
 8009bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf4:	1cd8      	adds	r0, r3, #3
 8009bf6:	db02      	blt.n	8009bfe <_printf_float+0x11e>
 8009bf8:	6862      	ldr	r2, [r4, #4]
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	dd47      	ble.n	8009c8e <_printf_float+0x1ae>
 8009bfe:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c02:	fa5f fa8a 	uxtb.w	sl, sl
 8009c06:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c0c:	d824      	bhi.n	8009c58 <_printf_float+0x178>
 8009c0e:	3901      	subs	r1, #1
 8009c10:	4652      	mov	r2, sl
 8009c12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c16:	9109      	str	r1, [sp, #36]	; 0x24
 8009c18:	f7ff ff2f 	bl	8009a7a <__exponent>
 8009c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c1e:	1813      	adds	r3, r2, r0
 8009c20:	2a01      	cmp	r2, #1
 8009c22:	4681      	mov	r9, r0
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	dc02      	bgt.n	8009c2e <_printf_float+0x14e>
 8009c28:	6822      	ldr	r2, [r4, #0]
 8009c2a:	07d1      	lsls	r1, r2, #31
 8009c2c:	d501      	bpl.n	8009c32 <_printf_float+0x152>
 8009c2e:	3301      	adds	r3, #1
 8009c30:	6123      	str	r3, [r4, #16]
 8009c32:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0a5      	beq.n	8009b86 <_printf_float+0xa6>
 8009c3a:	232d      	movs	r3, #45	; 0x2d
 8009c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c40:	e7a1      	b.n	8009b86 <_printf_float+0xa6>
 8009c42:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009c46:	f000 8177 	beq.w	8009f38 <_printf_float+0x458>
 8009c4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009c4e:	d1bb      	bne.n	8009bc8 <_printf_float+0xe8>
 8009c50:	2900      	cmp	r1, #0
 8009c52:	d1b9      	bne.n	8009bc8 <_printf_float+0xe8>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e7b6      	b.n	8009bc6 <_printf_float+0xe6>
 8009c58:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009c5c:	d119      	bne.n	8009c92 <_printf_float+0x1b2>
 8009c5e:	2900      	cmp	r1, #0
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	dd0c      	ble.n	8009c7e <_printf_float+0x19e>
 8009c64:	6121      	str	r1, [r4, #16]
 8009c66:	b913      	cbnz	r3, 8009c6e <_printf_float+0x18e>
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	07d2      	lsls	r2, r2, #31
 8009c6c:	d502      	bpl.n	8009c74 <_printf_float+0x194>
 8009c6e:	3301      	adds	r3, #1
 8009c70:	440b      	add	r3, r1
 8009c72:	6123      	str	r3, [r4, #16]
 8009c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c76:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c78:	f04f 0900 	mov.w	r9, #0
 8009c7c:	e7d9      	b.n	8009c32 <_printf_float+0x152>
 8009c7e:	b913      	cbnz	r3, 8009c86 <_printf_float+0x1a6>
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	07d0      	lsls	r0, r2, #31
 8009c84:	d501      	bpl.n	8009c8a <_printf_float+0x1aa>
 8009c86:	3302      	adds	r3, #2
 8009c88:	e7f3      	b.n	8009c72 <_printf_float+0x192>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e7f1      	b.n	8009c72 <_printf_float+0x192>
 8009c8e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009c92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c96:	4293      	cmp	r3, r2
 8009c98:	db05      	blt.n	8009ca6 <_printf_float+0x1c6>
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	07d1      	lsls	r1, r2, #31
 8009ca0:	d5e8      	bpl.n	8009c74 <_printf_float+0x194>
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	e7e5      	b.n	8009c72 <_printf_float+0x192>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bfd4      	ite	le
 8009caa:	f1c3 0302 	rsble	r3, r3, #2
 8009cae:	2301      	movgt	r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	e7de      	b.n	8009c72 <_printf_float+0x192>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	055a      	lsls	r2, r3, #21
 8009cb8:	d407      	bmi.n	8009cca <_printf_float+0x1ea>
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d12b      	bne.n	8009d20 <_printf_float+0x240>
 8009cc8:	e767      	b.n	8009b9a <_printf_float+0xba>
 8009cca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009cce:	f240 80dc 	bls.w	8009e8a <_printf_float+0x3aa>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cda:	f7f6 ff75 	bl	8000bc8 <__aeabi_dcmpeq>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d033      	beq.n	8009d4a <_printf_float+0x26a>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4a41      	ldr	r2, [pc, #260]	; (8009dec <_printf_float+0x30c>)
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f af54 	beq.w	8009b9a <_printf_float+0xba>
 8009cf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	db02      	blt.n	8009d00 <_printf_float+0x220>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	07d8      	lsls	r0, r3, #31
 8009cfe:	d50f      	bpl.n	8009d20 <_printf_float+0x240>
 8009d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f43f af45 	beq.w	8009b9a <_printf_float+0xba>
 8009d10:	f04f 0800 	mov.w	r8, #0
 8009d14:	f104 091a 	add.w	r9, r4, #26
 8009d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	4543      	cmp	r3, r8
 8009d1e:	dc09      	bgt.n	8009d34 <_printf_float+0x254>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	079b      	lsls	r3, r3, #30
 8009d24:	f100 8103 	bmi.w	8009f2e <_printf_float+0x44e>
 8009d28:	68e0      	ldr	r0, [r4, #12]
 8009d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d2c:	4298      	cmp	r0, r3
 8009d2e:	bfb8      	it	lt
 8009d30:	4618      	movlt	r0, r3
 8009d32:	e734      	b.n	8009b9e <_printf_float+0xbe>
 8009d34:	2301      	movs	r3, #1
 8009d36:	464a      	mov	r2, r9
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	f43f af2b 	beq.w	8009b9a <_printf_float+0xba>
 8009d44:	f108 0801 	add.w	r8, r8, #1
 8009d48:	e7e6      	b.n	8009d18 <_printf_float+0x238>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dc2b      	bgt.n	8009da8 <_printf_float+0x2c8>
 8009d50:	2301      	movs	r3, #1
 8009d52:	4a26      	ldr	r2, [pc, #152]	; (8009dec <_printf_float+0x30c>)
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f af1d 	beq.w	8009b9a <_printf_float+0xba>
 8009d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d62:	b923      	cbnz	r3, 8009d6e <_printf_float+0x28e>
 8009d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d66:	b913      	cbnz	r3, 8009d6e <_printf_float+0x28e>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d5d8      	bpl.n	8009d20 <_printf_float+0x240>
 8009d6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f43f af0e 	beq.w	8009b9a <_printf_float+0xba>
 8009d7e:	f04f 0900 	mov.w	r9, #0
 8009d82:	f104 0a1a 	add.w	sl, r4, #26
 8009d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d88:	425b      	negs	r3, r3
 8009d8a:	454b      	cmp	r3, r9
 8009d8c:	dc01      	bgt.n	8009d92 <_printf_float+0x2b2>
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d90:	e794      	b.n	8009cbc <_printf_float+0x1dc>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4652      	mov	r2, sl
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f aefc 	beq.w	8009b9a <_printf_float+0xba>
 8009da2:	f109 0901 	add.w	r9, r9, #1
 8009da6:	e7ee      	b.n	8009d86 <_printf_float+0x2a6>
 8009da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009daa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dac:	429a      	cmp	r2, r3
 8009dae:	bfa8      	it	ge
 8009db0:	461a      	movge	r2, r3
 8009db2:	2a00      	cmp	r2, #0
 8009db4:	4691      	mov	r9, r2
 8009db6:	dd07      	ble.n	8009dc8 <_printf_float+0x2e8>
 8009db8:	4613      	mov	r3, r2
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	47b8      	blx	r7
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	f43f aee9 	beq.w	8009b9a <_printf_float+0xba>
 8009dc8:	f104 031a 	add.w	r3, r4, #26
 8009dcc:	f04f 0b00 	mov.w	fp, #0
 8009dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dd4:	9306      	str	r3, [sp, #24]
 8009dd6:	e015      	b.n	8009e04 <_printf_float+0x324>
 8009dd8:	7fefffff 	.word	0x7fefffff
 8009ddc:	08011d18 	.word	0x08011d18
 8009de0:	08011d14 	.word	0x08011d14
 8009de4:	08011d20 	.word	0x08011d20
 8009de8:	08011d1c 	.word	0x08011d1c
 8009dec:	08011d24 	.word	0x08011d24
 8009df0:	2301      	movs	r3, #1
 8009df2:	9a06      	ldr	r2, [sp, #24]
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	f43f aecd 	beq.w	8009b9a <_printf_float+0xba>
 8009e00:	f10b 0b01 	add.w	fp, fp, #1
 8009e04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009e08:	ebaa 0309 	sub.w	r3, sl, r9
 8009e0c:	455b      	cmp	r3, fp
 8009e0e:	dcef      	bgt.n	8009df0 <_printf_float+0x310>
 8009e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e14:	429a      	cmp	r2, r3
 8009e16:	44d0      	add	r8, sl
 8009e18:	db15      	blt.n	8009e46 <_printf_float+0x366>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	07da      	lsls	r2, r3, #31
 8009e1e:	d412      	bmi.n	8009e46 <_printf_float+0x366>
 8009e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e24:	eba3 020a 	sub.w	r2, r3, sl
 8009e28:	eba3 0a01 	sub.w	sl, r3, r1
 8009e2c:	4592      	cmp	sl, r2
 8009e2e:	bfa8      	it	ge
 8009e30:	4692      	movge	sl, r2
 8009e32:	f1ba 0f00 	cmp.w	sl, #0
 8009e36:	dc0e      	bgt.n	8009e56 <_printf_float+0x376>
 8009e38:	f04f 0800 	mov.w	r8, #0
 8009e3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e40:	f104 091a 	add.w	r9, r4, #26
 8009e44:	e019      	b.n	8009e7a <_printf_float+0x39a>
 8009e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	d1e5      	bne.n	8009e20 <_printf_float+0x340>
 8009e54:	e6a1      	b.n	8009b9a <_printf_float+0xba>
 8009e56:	4653      	mov	r3, sl
 8009e58:	4642      	mov	r2, r8
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	d1e9      	bne.n	8009e38 <_printf_float+0x358>
 8009e64:	e699      	b.n	8009b9a <_printf_float+0xba>
 8009e66:	2301      	movs	r3, #1
 8009e68:	464a      	mov	r2, r9
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	47b8      	blx	r7
 8009e70:	3001      	adds	r0, #1
 8009e72:	f43f ae92 	beq.w	8009b9a <_printf_float+0xba>
 8009e76:	f108 0801 	add.w	r8, r8, #1
 8009e7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e7e:	1a9b      	subs	r3, r3, r2
 8009e80:	eba3 030a 	sub.w	r3, r3, sl
 8009e84:	4543      	cmp	r3, r8
 8009e86:	dcee      	bgt.n	8009e66 <_printf_float+0x386>
 8009e88:	e74a      	b.n	8009d20 <_printf_float+0x240>
 8009e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e8c:	2a01      	cmp	r2, #1
 8009e8e:	dc01      	bgt.n	8009e94 <_printf_float+0x3b4>
 8009e90:	07db      	lsls	r3, r3, #31
 8009e92:	d53a      	bpl.n	8009f0a <_printf_float+0x42a>
 8009e94:	2301      	movs	r3, #1
 8009e96:	4642      	mov	r2, r8
 8009e98:	4631      	mov	r1, r6
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	47b8      	blx	r7
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	f43f ae7b 	beq.w	8009b9a <_printf_float+0xba>
 8009ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f108 0801 	add.w	r8, r8, #1
 8009eb4:	f43f ae71 	beq.w	8009b9a <_printf_float+0xba>
 8009eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f103 3aff 	add.w	sl, r3, #4294967295
 8009ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f7f6 fe7f 	bl	8000bc8 <__aeabi_dcmpeq>
 8009eca:	b9c8      	cbnz	r0, 8009f00 <_printf_float+0x420>
 8009ecc:	4653      	mov	r3, sl
 8009ece:	4642      	mov	r2, r8
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	d10e      	bne.n	8009ef8 <_printf_float+0x418>
 8009eda:	e65e      	b.n	8009b9a <_printf_float+0xba>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4652      	mov	r2, sl
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f43f ae57 	beq.w	8009b9a <_printf_float+0xba>
 8009eec:	f108 0801 	add.w	r8, r8, #1
 8009ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	4543      	cmp	r3, r8
 8009ef6:	dcf1      	bgt.n	8009edc <_printf_float+0x3fc>
 8009ef8:	464b      	mov	r3, r9
 8009efa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009efe:	e6de      	b.n	8009cbe <_printf_float+0x1de>
 8009f00:	f04f 0800 	mov.w	r8, #0
 8009f04:	f104 0a1a 	add.w	sl, r4, #26
 8009f08:	e7f2      	b.n	8009ef0 <_printf_float+0x410>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e7df      	b.n	8009ece <_printf_float+0x3ee>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	464a      	mov	r2, r9
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f ae3e 	beq.w	8009b9a <_printf_float+0xba>
 8009f1e:	f108 0801 	add.w	r8, r8, #1
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	4543      	cmp	r3, r8
 8009f2a:	dcf0      	bgt.n	8009f0e <_printf_float+0x42e>
 8009f2c:	e6fc      	b.n	8009d28 <_printf_float+0x248>
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	f104 0919 	add.w	r9, r4, #25
 8009f36:	e7f4      	b.n	8009f22 <_printf_float+0x442>
 8009f38:	2900      	cmp	r1, #0
 8009f3a:	f43f ae8b 	beq.w	8009c54 <_printf_float+0x174>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009f44:	ab09      	add	r3, sp, #36	; 0x24
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	ec49 8b10 	vmov	d0, r8, r9
 8009f4c:	6022      	str	r2, [r4, #0]
 8009f4e:	f8cd a004 	str.w	sl, [sp, #4]
 8009f52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f56:	4628      	mov	r0, r5
 8009f58:	f7ff fd2e 	bl	80099b8 <__cvt>
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	e648      	b.n	8009bf2 <_printf_float+0x112>

08009f60 <_printf_common>:
 8009f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	4691      	mov	r9, r2
 8009f66:	461f      	mov	r7, r3
 8009f68:	688a      	ldr	r2, [r1, #8]
 8009f6a:	690b      	ldr	r3, [r1, #16]
 8009f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f70:	4293      	cmp	r3, r2
 8009f72:	bfb8      	it	lt
 8009f74:	4613      	movlt	r3, r2
 8009f76:	f8c9 3000 	str.w	r3, [r9]
 8009f7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	b112      	cbz	r2, 8009f8a <_printf_common+0x2a>
 8009f84:	3301      	adds	r3, #1
 8009f86:	f8c9 3000 	str.w	r3, [r9]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	0699      	lsls	r1, r3, #26
 8009f8e:	bf42      	ittt	mi
 8009f90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f94:	3302      	addmi	r3, #2
 8009f96:	f8c9 3000 	strmi.w	r3, [r9]
 8009f9a:	6825      	ldr	r5, [r4, #0]
 8009f9c:	f015 0506 	ands.w	r5, r5, #6
 8009fa0:	d107      	bne.n	8009fb2 <_printf_common+0x52>
 8009fa2:	f104 0a19 	add.w	sl, r4, #25
 8009fa6:	68e3      	ldr	r3, [r4, #12]
 8009fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	42ab      	cmp	r3, r5
 8009fb0:	dc28      	bgt.n	800a004 <_printf_common+0xa4>
 8009fb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fb6:	6822      	ldr	r2, [r4, #0]
 8009fb8:	3300      	adds	r3, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2301      	movne	r3, #1
 8009fbe:	0692      	lsls	r2, r2, #26
 8009fc0:	d42d      	bmi.n	800a01e <_printf_common+0xbe>
 8009fc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	4630      	mov	r0, r6
 8009fca:	47c0      	blx	r8
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d020      	beq.n	800a012 <_printf_common+0xb2>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	68e5      	ldr	r5, [r4, #12]
 8009fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fd8:	f003 0306 	and.w	r3, r3, #6
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	bf08      	it	eq
 8009fe0:	1aad      	subeq	r5, r5, r2
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	6922      	ldr	r2, [r4, #16]
 8009fe6:	bf0c      	ite	eq
 8009fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fec:	2500      	movne	r5, #0
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bfc4      	itt	gt
 8009ff2:	1a9b      	subgt	r3, r3, r2
 8009ff4:	18ed      	addgt	r5, r5, r3
 8009ff6:	f04f 0900 	mov.w	r9, #0
 8009ffa:	341a      	adds	r4, #26
 8009ffc:	454d      	cmp	r5, r9
 8009ffe:	d11a      	bne.n	800a036 <_printf_common+0xd6>
 800a000:	2000      	movs	r0, #0
 800a002:	e008      	b.n	800a016 <_printf_common+0xb6>
 800a004:	2301      	movs	r3, #1
 800a006:	4652      	mov	r2, sl
 800a008:	4639      	mov	r1, r7
 800a00a:	4630      	mov	r0, r6
 800a00c:	47c0      	blx	r8
 800a00e:	3001      	adds	r0, #1
 800a010:	d103      	bne.n	800a01a <_printf_common+0xba>
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01a:	3501      	adds	r5, #1
 800a01c:	e7c3      	b.n	8009fa6 <_printf_common+0x46>
 800a01e:	18e1      	adds	r1, r4, r3
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	2030      	movs	r0, #48	; 0x30
 800a024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a028:	4422      	add	r2, r4
 800a02a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a02e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a032:	3302      	adds	r3, #2
 800a034:	e7c5      	b.n	8009fc2 <_printf_common+0x62>
 800a036:	2301      	movs	r3, #1
 800a038:	4622      	mov	r2, r4
 800a03a:	4639      	mov	r1, r7
 800a03c:	4630      	mov	r0, r6
 800a03e:	47c0      	blx	r8
 800a040:	3001      	adds	r0, #1
 800a042:	d0e6      	beq.n	800a012 <_printf_common+0xb2>
 800a044:	f109 0901 	add.w	r9, r9, #1
 800a048:	e7d8      	b.n	8009ffc <_printf_common+0x9c>
	...

0800a04c <_printf_i>:
 800a04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a050:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a054:	460c      	mov	r4, r1
 800a056:	7e09      	ldrb	r1, [r1, #24]
 800a058:	b085      	sub	sp, #20
 800a05a:	296e      	cmp	r1, #110	; 0x6e
 800a05c:	4617      	mov	r7, r2
 800a05e:	4606      	mov	r6, r0
 800a060:	4698      	mov	r8, r3
 800a062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a064:	f000 80b3 	beq.w	800a1ce <_printf_i+0x182>
 800a068:	d822      	bhi.n	800a0b0 <_printf_i+0x64>
 800a06a:	2963      	cmp	r1, #99	; 0x63
 800a06c:	d036      	beq.n	800a0dc <_printf_i+0x90>
 800a06e:	d80a      	bhi.n	800a086 <_printf_i+0x3a>
 800a070:	2900      	cmp	r1, #0
 800a072:	f000 80b9 	beq.w	800a1e8 <_printf_i+0x19c>
 800a076:	2958      	cmp	r1, #88	; 0x58
 800a078:	f000 8083 	beq.w	800a182 <_printf_i+0x136>
 800a07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a080:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a084:	e032      	b.n	800a0ec <_printf_i+0xa0>
 800a086:	2964      	cmp	r1, #100	; 0x64
 800a088:	d001      	beq.n	800a08e <_printf_i+0x42>
 800a08a:	2969      	cmp	r1, #105	; 0x69
 800a08c:	d1f6      	bne.n	800a07c <_printf_i+0x30>
 800a08e:	6820      	ldr	r0, [r4, #0]
 800a090:	6813      	ldr	r3, [r2, #0]
 800a092:	0605      	lsls	r5, r0, #24
 800a094:	f103 0104 	add.w	r1, r3, #4
 800a098:	d52a      	bpl.n	800a0f0 <_printf_i+0xa4>
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6011      	str	r1, [r2, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	da03      	bge.n	800a0aa <_printf_i+0x5e>
 800a0a2:	222d      	movs	r2, #45	; 0x2d
 800a0a4:	425b      	negs	r3, r3
 800a0a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a0aa:	486f      	ldr	r0, [pc, #444]	; (800a268 <_printf_i+0x21c>)
 800a0ac:	220a      	movs	r2, #10
 800a0ae:	e039      	b.n	800a124 <_printf_i+0xd8>
 800a0b0:	2973      	cmp	r1, #115	; 0x73
 800a0b2:	f000 809d 	beq.w	800a1f0 <_printf_i+0x1a4>
 800a0b6:	d808      	bhi.n	800a0ca <_printf_i+0x7e>
 800a0b8:	296f      	cmp	r1, #111	; 0x6f
 800a0ba:	d020      	beq.n	800a0fe <_printf_i+0xb2>
 800a0bc:	2970      	cmp	r1, #112	; 0x70
 800a0be:	d1dd      	bne.n	800a07c <_printf_i+0x30>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	f043 0320 	orr.w	r3, r3, #32
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	e003      	b.n	800a0d2 <_printf_i+0x86>
 800a0ca:	2975      	cmp	r1, #117	; 0x75
 800a0cc:	d017      	beq.n	800a0fe <_printf_i+0xb2>
 800a0ce:	2978      	cmp	r1, #120	; 0x78
 800a0d0:	d1d4      	bne.n	800a07c <_printf_i+0x30>
 800a0d2:	2378      	movs	r3, #120	; 0x78
 800a0d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0d8:	4864      	ldr	r0, [pc, #400]	; (800a26c <_printf_i+0x220>)
 800a0da:	e055      	b.n	800a188 <_printf_i+0x13c>
 800a0dc:	6813      	ldr	r3, [r2, #0]
 800a0de:	1d19      	adds	r1, r3, #4
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	6011      	str	r1, [r2, #0]
 800a0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e08c      	b.n	800a20a <_printf_i+0x1be>
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6011      	str	r1, [r2, #0]
 800a0f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0f8:	bf18      	it	ne
 800a0fa:	b21b      	sxthne	r3, r3
 800a0fc:	e7cf      	b.n	800a09e <_printf_i+0x52>
 800a0fe:	6813      	ldr	r3, [r2, #0]
 800a100:	6825      	ldr	r5, [r4, #0]
 800a102:	1d18      	adds	r0, r3, #4
 800a104:	6010      	str	r0, [r2, #0]
 800a106:	0628      	lsls	r0, r5, #24
 800a108:	d501      	bpl.n	800a10e <_printf_i+0xc2>
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	e002      	b.n	800a114 <_printf_i+0xc8>
 800a10e:	0668      	lsls	r0, r5, #25
 800a110:	d5fb      	bpl.n	800a10a <_printf_i+0xbe>
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	4854      	ldr	r0, [pc, #336]	; (800a268 <_printf_i+0x21c>)
 800a116:	296f      	cmp	r1, #111	; 0x6f
 800a118:	bf14      	ite	ne
 800a11a:	220a      	movne	r2, #10
 800a11c:	2208      	moveq	r2, #8
 800a11e:	2100      	movs	r1, #0
 800a120:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a124:	6865      	ldr	r5, [r4, #4]
 800a126:	60a5      	str	r5, [r4, #8]
 800a128:	2d00      	cmp	r5, #0
 800a12a:	f2c0 8095 	blt.w	800a258 <_printf_i+0x20c>
 800a12e:	6821      	ldr	r1, [r4, #0]
 800a130:	f021 0104 	bic.w	r1, r1, #4
 800a134:	6021      	str	r1, [r4, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d13d      	bne.n	800a1b6 <_printf_i+0x16a>
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	f040 808e 	bne.w	800a25c <_printf_i+0x210>
 800a140:	4665      	mov	r5, ip
 800a142:	2a08      	cmp	r2, #8
 800a144:	d10b      	bne.n	800a15e <_printf_i+0x112>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	07db      	lsls	r3, r3, #31
 800a14a:	d508      	bpl.n	800a15e <_printf_i+0x112>
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	6862      	ldr	r2, [r4, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	bfde      	ittt	le
 800a154:	2330      	movle	r3, #48	; 0x30
 800a156:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a15a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a15e:	ebac 0305 	sub.w	r3, ip, r5
 800a162:	6123      	str	r3, [r4, #16]
 800a164:	f8cd 8000 	str.w	r8, [sp]
 800a168:	463b      	mov	r3, r7
 800a16a:	aa03      	add	r2, sp, #12
 800a16c:	4621      	mov	r1, r4
 800a16e:	4630      	mov	r0, r6
 800a170:	f7ff fef6 	bl	8009f60 <_printf_common>
 800a174:	3001      	adds	r0, #1
 800a176:	d14d      	bne.n	800a214 <_printf_i+0x1c8>
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	b005      	add	sp, #20
 800a17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a182:	4839      	ldr	r0, [pc, #228]	; (800a268 <_printf_i+0x21c>)
 800a184:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a188:	6813      	ldr	r3, [r2, #0]
 800a18a:	6821      	ldr	r1, [r4, #0]
 800a18c:	1d1d      	adds	r5, r3, #4
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6015      	str	r5, [r2, #0]
 800a192:	060a      	lsls	r2, r1, #24
 800a194:	d50b      	bpl.n	800a1ae <_printf_i+0x162>
 800a196:	07ca      	lsls	r2, r1, #31
 800a198:	bf44      	itt	mi
 800a19a:	f041 0120 	orrmi.w	r1, r1, #32
 800a19e:	6021      	strmi	r1, [r4, #0]
 800a1a0:	b91b      	cbnz	r3, 800a1aa <_printf_i+0x15e>
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	f022 0220 	bic.w	r2, r2, #32
 800a1a8:	6022      	str	r2, [r4, #0]
 800a1aa:	2210      	movs	r2, #16
 800a1ac:	e7b7      	b.n	800a11e <_printf_i+0xd2>
 800a1ae:	064d      	lsls	r5, r1, #25
 800a1b0:	bf48      	it	mi
 800a1b2:	b29b      	uxthmi	r3, r3
 800a1b4:	e7ef      	b.n	800a196 <_printf_i+0x14a>
 800a1b6:	4665      	mov	r5, ip
 800a1b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1bc:	fb02 3311 	mls	r3, r2, r1, r3
 800a1c0:	5cc3      	ldrb	r3, [r0, r3]
 800a1c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	d1f5      	bne.n	800a1b8 <_printf_i+0x16c>
 800a1cc:	e7b9      	b.n	800a142 <_printf_i+0xf6>
 800a1ce:	6813      	ldr	r3, [r2, #0]
 800a1d0:	6825      	ldr	r5, [r4, #0]
 800a1d2:	6961      	ldr	r1, [r4, #20]
 800a1d4:	1d18      	adds	r0, r3, #4
 800a1d6:	6010      	str	r0, [r2, #0]
 800a1d8:	0628      	lsls	r0, r5, #24
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	d501      	bpl.n	800a1e2 <_printf_i+0x196>
 800a1de:	6019      	str	r1, [r3, #0]
 800a1e0:	e002      	b.n	800a1e8 <_printf_i+0x19c>
 800a1e2:	066a      	lsls	r2, r5, #25
 800a1e4:	d5fb      	bpl.n	800a1de <_printf_i+0x192>
 800a1e6:	8019      	strh	r1, [r3, #0]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	4665      	mov	r5, ip
 800a1ee:	e7b9      	b.n	800a164 <_printf_i+0x118>
 800a1f0:	6813      	ldr	r3, [r2, #0]
 800a1f2:	1d19      	adds	r1, r3, #4
 800a1f4:	6011      	str	r1, [r2, #0]
 800a1f6:	681d      	ldr	r5, [r3, #0]
 800a1f8:	6862      	ldr	r2, [r4, #4]
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f7f6 f86f 	bl	80002e0 <memchr>
 800a202:	b108      	cbz	r0, 800a208 <_printf_i+0x1bc>
 800a204:	1b40      	subs	r0, r0, r5
 800a206:	6060      	str	r0, [r4, #4]
 800a208:	6863      	ldr	r3, [r4, #4]
 800a20a:	6123      	str	r3, [r4, #16]
 800a20c:	2300      	movs	r3, #0
 800a20e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a212:	e7a7      	b.n	800a164 <_printf_i+0x118>
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	462a      	mov	r2, r5
 800a218:	4639      	mov	r1, r7
 800a21a:	4630      	mov	r0, r6
 800a21c:	47c0      	blx	r8
 800a21e:	3001      	adds	r0, #1
 800a220:	d0aa      	beq.n	800a178 <_printf_i+0x12c>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	079b      	lsls	r3, r3, #30
 800a226:	d413      	bmi.n	800a250 <_printf_i+0x204>
 800a228:	68e0      	ldr	r0, [r4, #12]
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	4298      	cmp	r0, r3
 800a22e:	bfb8      	it	lt
 800a230:	4618      	movlt	r0, r3
 800a232:	e7a3      	b.n	800a17c <_printf_i+0x130>
 800a234:	2301      	movs	r3, #1
 800a236:	464a      	mov	r2, r9
 800a238:	4639      	mov	r1, r7
 800a23a:	4630      	mov	r0, r6
 800a23c:	47c0      	blx	r8
 800a23e:	3001      	adds	r0, #1
 800a240:	d09a      	beq.n	800a178 <_printf_i+0x12c>
 800a242:	3501      	adds	r5, #1
 800a244:	68e3      	ldr	r3, [r4, #12]
 800a246:	9a03      	ldr	r2, [sp, #12]
 800a248:	1a9b      	subs	r3, r3, r2
 800a24a:	42ab      	cmp	r3, r5
 800a24c:	dcf2      	bgt.n	800a234 <_printf_i+0x1e8>
 800a24e:	e7eb      	b.n	800a228 <_printf_i+0x1dc>
 800a250:	2500      	movs	r5, #0
 800a252:	f104 0919 	add.w	r9, r4, #25
 800a256:	e7f5      	b.n	800a244 <_printf_i+0x1f8>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1ac      	bne.n	800a1b6 <_printf_i+0x16a>
 800a25c:	7803      	ldrb	r3, [r0, #0]
 800a25e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a262:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a266:	e76c      	b.n	800a142 <_printf_i+0xf6>
 800a268:	08011d26 	.word	0x08011d26
 800a26c:	08011d37 	.word	0x08011d37

0800a270 <siprintf>:
 800a270:	b40e      	push	{r1, r2, r3}
 800a272:	b500      	push	{lr}
 800a274:	b09c      	sub	sp, #112	; 0x70
 800a276:	ab1d      	add	r3, sp, #116	; 0x74
 800a278:	9002      	str	r0, [sp, #8]
 800a27a:	9006      	str	r0, [sp, #24]
 800a27c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a280:	4809      	ldr	r0, [pc, #36]	; (800a2a8 <siprintf+0x38>)
 800a282:	9107      	str	r1, [sp, #28]
 800a284:	9104      	str	r1, [sp, #16]
 800a286:	4909      	ldr	r1, [pc, #36]	; (800a2ac <siprintf+0x3c>)
 800a288:	f853 2b04 	ldr.w	r2, [r3], #4
 800a28c:	9105      	str	r1, [sp, #20]
 800a28e:	6800      	ldr	r0, [r0, #0]
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	a902      	add	r1, sp, #8
 800a294:	f001 fa5c 	bl	800b750 <_svfiprintf_r>
 800a298:	9b02      	ldr	r3, [sp, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	b01c      	add	sp, #112	; 0x70
 800a2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a4:	b003      	add	sp, #12
 800a2a6:	4770      	bx	lr
 800a2a8:	20000020 	.word	0x20000020
 800a2ac:	ffff0208 	.word	0xffff0208

0800a2b0 <quorem>:
 800a2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	6903      	ldr	r3, [r0, #16]
 800a2b6:	690c      	ldr	r4, [r1, #16]
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	f2c0 8082 	blt.w	800a3c4 <quorem+0x114>
 800a2c0:	3c01      	subs	r4, #1
 800a2c2:	f101 0714 	add.w	r7, r1, #20
 800a2c6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a2ca:	f100 0614 	add.w	r6, r0, #20
 800a2ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a2d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a2d6:	eb06 030c 	add.w	r3, r6, ip
 800a2da:	3501      	adds	r5, #1
 800a2dc:	eb07 090c 	add.w	r9, r7, ip
 800a2e0:	9301      	str	r3, [sp, #4]
 800a2e2:	fbb0 f5f5 	udiv	r5, r0, r5
 800a2e6:	b395      	cbz	r5, 800a34e <quorem+0x9e>
 800a2e8:	f04f 0a00 	mov.w	sl, #0
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	46b6      	mov	lr, r6
 800a2f0:	46d3      	mov	fp, sl
 800a2f2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2f6:	b293      	uxth	r3, r2
 800a2f8:	fb05 a303 	mla	r3, r5, r3, sl
 800a2fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a300:	b29b      	uxth	r3, r3
 800a302:	ebab 0303 	sub.w	r3, fp, r3
 800a306:	0c12      	lsrs	r2, r2, #16
 800a308:	f8de b000 	ldr.w	fp, [lr]
 800a30c:	fb05 a202 	mla	r2, r5, r2, sl
 800a310:	fa13 f38b 	uxtah	r3, r3, fp
 800a314:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a318:	fa1f fb82 	uxth.w	fp, r2
 800a31c:	f8de 2000 	ldr.w	r2, [lr]
 800a320:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a324:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a328:	b29b      	uxth	r3, r3
 800a32a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a32e:	4581      	cmp	r9, r0
 800a330:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a334:	f84e 3b04 	str.w	r3, [lr], #4
 800a338:	d2db      	bcs.n	800a2f2 <quorem+0x42>
 800a33a:	f856 300c 	ldr.w	r3, [r6, ip]
 800a33e:	b933      	cbnz	r3, 800a34e <quorem+0x9e>
 800a340:	9b01      	ldr	r3, [sp, #4]
 800a342:	3b04      	subs	r3, #4
 800a344:	429e      	cmp	r6, r3
 800a346:	461a      	mov	r2, r3
 800a348:	d330      	bcc.n	800a3ac <quorem+0xfc>
 800a34a:	f8c8 4010 	str.w	r4, [r8, #16]
 800a34e:	4640      	mov	r0, r8
 800a350:	f001 f828 	bl	800b3a4 <__mcmp>
 800a354:	2800      	cmp	r0, #0
 800a356:	db25      	blt.n	800a3a4 <quorem+0xf4>
 800a358:	3501      	adds	r5, #1
 800a35a:	4630      	mov	r0, r6
 800a35c:	f04f 0c00 	mov.w	ip, #0
 800a360:	f857 2b04 	ldr.w	r2, [r7], #4
 800a364:	f8d0 e000 	ldr.w	lr, [r0]
 800a368:	b293      	uxth	r3, r2
 800a36a:	ebac 0303 	sub.w	r3, ip, r3
 800a36e:	0c12      	lsrs	r2, r2, #16
 800a370:	fa13 f38e 	uxtah	r3, r3, lr
 800a374:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a378:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a382:	45b9      	cmp	r9, r7
 800a384:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a388:	f840 3b04 	str.w	r3, [r0], #4
 800a38c:	d2e8      	bcs.n	800a360 <quorem+0xb0>
 800a38e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a392:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a396:	b92a      	cbnz	r2, 800a3a4 <quorem+0xf4>
 800a398:	3b04      	subs	r3, #4
 800a39a:	429e      	cmp	r6, r3
 800a39c:	461a      	mov	r2, r3
 800a39e:	d30b      	bcc.n	800a3b8 <quorem+0x108>
 800a3a0:	f8c8 4010 	str.w	r4, [r8, #16]
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	b003      	add	sp, #12
 800a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ac:	6812      	ldr	r2, [r2, #0]
 800a3ae:	3b04      	subs	r3, #4
 800a3b0:	2a00      	cmp	r2, #0
 800a3b2:	d1ca      	bne.n	800a34a <quorem+0x9a>
 800a3b4:	3c01      	subs	r4, #1
 800a3b6:	e7c5      	b.n	800a344 <quorem+0x94>
 800a3b8:	6812      	ldr	r2, [r2, #0]
 800a3ba:	3b04      	subs	r3, #4
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	d1ef      	bne.n	800a3a0 <quorem+0xf0>
 800a3c0:	3c01      	subs	r4, #1
 800a3c2:	e7ea      	b.n	800a39a <quorem+0xea>
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	e7ee      	b.n	800a3a6 <quorem+0xf6>

0800a3c8 <_dtoa_r>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	ec57 6b10 	vmov	r6, r7, d0
 800a3d0:	b097      	sub	sp, #92	; 0x5c
 800a3d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3d4:	9106      	str	r1, [sp, #24]
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a3da:	9312      	str	r3, [sp, #72]	; 0x48
 800a3dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3e0:	e9cd 6700 	strd	r6, r7, [sp]
 800a3e4:	b93d      	cbnz	r5, 800a3f6 <_dtoa_r+0x2e>
 800a3e6:	2010      	movs	r0, #16
 800a3e8:	f000 fdb4 	bl	800af54 <malloc>
 800a3ec:	6260      	str	r0, [r4, #36]	; 0x24
 800a3ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3f2:	6005      	str	r5, [r0, #0]
 800a3f4:	60c5      	str	r5, [r0, #12]
 800a3f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3f8:	6819      	ldr	r1, [r3, #0]
 800a3fa:	b151      	cbz	r1, 800a412 <_dtoa_r+0x4a>
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	604a      	str	r2, [r1, #4]
 800a400:	2301      	movs	r3, #1
 800a402:	4093      	lsls	r3, r2
 800a404:	608b      	str	r3, [r1, #8]
 800a406:	4620      	mov	r0, r4
 800a408:	f000 fdeb 	bl	800afe2 <_Bfree>
 800a40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]
 800a412:	1e3b      	subs	r3, r7, #0
 800a414:	bfbb      	ittet	lt
 800a416:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a41a:	9301      	strlt	r3, [sp, #4]
 800a41c:	2300      	movge	r3, #0
 800a41e:	2201      	movlt	r2, #1
 800a420:	bfac      	ite	ge
 800a422:	f8c8 3000 	strge.w	r3, [r8]
 800a426:	f8c8 2000 	strlt.w	r2, [r8]
 800a42a:	4baf      	ldr	r3, [pc, #700]	; (800a6e8 <_dtoa_r+0x320>)
 800a42c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a430:	ea33 0308 	bics.w	r3, r3, r8
 800a434:	d114      	bne.n	800a460 <_dtoa_r+0x98>
 800a436:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a438:	f242 730f 	movw	r3, #9999	; 0x270f
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	9b00      	ldr	r3, [sp, #0]
 800a440:	b923      	cbnz	r3, 800a44c <_dtoa_r+0x84>
 800a442:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a446:	2800      	cmp	r0, #0
 800a448:	f000 8542 	beq.w	800aed0 <_dtoa_r+0xb08>
 800a44c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a44e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a6fc <_dtoa_r+0x334>
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 8544 	beq.w	800aee0 <_dtoa_r+0xb18>
 800a458:	f10b 0303 	add.w	r3, fp, #3
 800a45c:	f000 bd3e 	b.w	800aedc <_dtoa_r+0xb14>
 800a460:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a464:	2200      	movs	r2, #0
 800a466:	2300      	movs	r3, #0
 800a468:	4630      	mov	r0, r6
 800a46a:	4639      	mov	r1, r7
 800a46c:	f7f6 fbac 	bl	8000bc8 <__aeabi_dcmpeq>
 800a470:	4681      	mov	r9, r0
 800a472:	b168      	cbz	r0, 800a490 <_dtoa_r+0xc8>
 800a474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a476:	2301      	movs	r3, #1
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 8524 	beq.w	800aeca <_dtoa_r+0xb02>
 800a482:	4b9a      	ldr	r3, [pc, #616]	; (800a6ec <_dtoa_r+0x324>)
 800a484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a486:	f103 3bff 	add.w	fp, r3, #4294967295
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	f000 bd28 	b.w	800aee0 <_dtoa_r+0xb18>
 800a490:	aa14      	add	r2, sp, #80	; 0x50
 800a492:	a915      	add	r1, sp, #84	; 0x54
 800a494:	ec47 6b10 	vmov	d0, r6, r7
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 fffa 	bl	800b492 <__d2b>
 800a49e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a4a2:	9004      	str	r0, [sp, #16]
 800a4a4:	2d00      	cmp	r5, #0
 800a4a6:	d07c      	beq.n	800a5a2 <_dtoa_r+0x1da>
 800a4a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a4b0:	46b2      	mov	sl, r6
 800a4b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a4b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4b8b      	ldr	r3, [pc, #556]	; (800a6f0 <_dtoa_r+0x328>)
 800a4c2:	4650      	mov	r0, sl
 800a4c4:	4659      	mov	r1, fp
 800a4c6:	f7f5 ff5f 	bl	8000388 <__aeabi_dsub>
 800a4ca:	a381      	add	r3, pc, #516	; (adr r3, 800a6d0 <_dtoa_r+0x308>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f7f6 f912 	bl	80006f8 <__aeabi_dmul>
 800a4d4:	a380      	add	r3, pc, #512	; (adr r3, 800a6d8 <_dtoa_r+0x310>)
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	f7f5 ff57 	bl	800038c <__adddf3>
 800a4de:	4606      	mov	r6, r0
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	460f      	mov	r7, r1
 800a4e4:	f7f6 f89e 	bl	8000624 <__aeabi_i2d>
 800a4e8:	a37d      	add	r3, pc, #500	; (adr r3, 800a6e0 <_dtoa_r+0x318>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7f6 f903 	bl	80006f8 <__aeabi_dmul>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	f7f5 ff47 	bl	800038c <__adddf3>
 800a4fe:	4606      	mov	r6, r0
 800a500:	460f      	mov	r7, r1
 800a502:	f7f6 fba9 	bl	8000c58 <__aeabi_d2iz>
 800a506:	2200      	movs	r2, #0
 800a508:	4682      	mov	sl, r0
 800a50a:	2300      	movs	r3, #0
 800a50c:	4630      	mov	r0, r6
 800a50e:	4639      	mov	r1, r7
 800a510:	f7f6 fb64 	bl	8000bdc <__aeabi_dcmplt>
 800a514:	b148      	cbz	r0, 800a52a <_dtoa_r+0x162>
 800a516:	4650      	mov	r0, sl
 800a518:	f7f6 f884 	bl	8000624 <__aeabi_i2d>
 800a51c:	4632      	mov	r2, r6
 800a51e:	463b      	mov	r3, r7
 800a520:	f7f6 fb52 	bl	8000bc8 <__aeabi_dcmpeq>
 800a524:	b908      	cbnz	r0, 800a52a <_dtoa_r+0x162>
 800a526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a52a:	f1ba 0f16 	cmp.w	sl, #22
 800a52e:	d859      	bhi.n	800a5e4 <_dtoa_r+0x21c>
 800a530:	4970      	ldr	r1, [pc, #448]	; (800a6f4 <_dtoa_r+0x32c>)
 800a532:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a536:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a53a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a53e:	f7f6 fb6b 	bl	8000c18 <__aeabi_dcmpgt>
 800a542:	2800      	cmp	r0, #0
 800a544:	d050      	beq.n	800a5e8 <_dtoa_r+0x220>
 800a546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a54a:	2300      	movs	r3, #0
 800a54c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a54e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a550:	1b5d      	subs	r5, r3, r5
 800a552:	f1b5 0801 	subs.w	r8, r5, #1
 800a556:	bf49      	itett	mi
 800a558:	f1c5 0301 	rsbmi	r3, r5, #1
 800a55c:	2300      	movpl	r3, #0
 800a55e:	9305      	strmi	r3, [sp, #20]
 800a560:	f04f 0800 	movmi.w	r8, #0
 800a564:	bf58      	it	pl
 800a566:	9305      	strpl	r3, [sp, #20]
 800a568:	f1ba 0f00 	cmp.w	sl, #0
 800a56c:	db3e      	blt.n	800a5ec <_dtoa_r+0x224>
 800a56e:	2300      	movs	r3, #0
 800a570:	44d0      	add	r8, sl
 800a572:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a576:	9307      	str	r3, [sp, #28]
 800a578:	9b06      	ldr	r3, [sp, #24]
 800a57a:	2b09      	cmp	r3, #9
 800a57c:	f200 8090 	bhi.w	800a6a0 <_dtoa_r+0x2d8>
 800a580:	2b05      	cmp	r3, #5
 800a582:	bfc4      	itt	gt
 800a584:	3b04      	subgt	r3, #4
 800a586:	9306      	strgt	r3, [sp, #24]
 800a588:	9b06      	ldr	r3, [sp, #24]
 800a58a:	f1a3 0302 	sub.w	r3, r3, #2
 800a58e:	bfcc      	ite	gt
 800a590:	2500      	movgt	r5, #0
 800a592:	2501      	movle	r5, #1
 800a594:	2b03      	cmp	r3, #3
 800a596:	f200 808f 	bhi.w	800a6b8 <_dtoa_r+0x2f0>
 800a59a:	e8df f003 	tbb	[pc, r3]
 800a59e:	7f7d      	.short	0x7f7d
 800a5a0:	7131      	.short	0x7131
 800a5a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a5a6:	441d      	add	r5, r3
 800a5a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a5ac:	2820      	cmp	r0, #32
 800a5ae:	dd13      	ble.n	800a5d8 <_dtoa_r+0x210>
 800a5b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a5b4:	9b00      	ldr	r3, [sp, #0]
 800a5b6:	fa08 f800 	lsl.w	r8, r8, r0
 800a5ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a5be:	fa23 f000 	lsr.w	r0, r3, r0
 800a5c2:	ea48 0000 	orr.w	r0, r8, r0
 800a5c6:	f7f6 f81d 	bl	8000604 <__aeabi_ui2d>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	4682      	mov	sl, r0
 800a5ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a5d2:	3d01      	subs	r5, #1
 800a5d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a5d6:	e772      	b.n	800a4be <_dtoa_r+0xf6>
 800a5d8:	9b00      	ldr	r3, [sp, #0]
 800a5da:	f1c0 0020 	rsb	r0, r0, #32
 800a5de:	fa03 f000 	lsl.w	r0, r3, r0
 800a5e2:	e7f0      	b.n	800a5c6 <_dtoa_r+0x1fe>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e7b1      	b.n	800a54c <_dtoa_r+0x184>
 800a5e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a5ea:	e7b0      	b.n	800a54e <_dtoa_r+0x186>
 800a5ec:	9b05      	ldr	r3, [sp, #20]
 800a5ee:	eba3 030a 	sub.w	r3, r3, sl
 800a5f2:	9305      	str	r3, [sp, #20]
 800a5f4:	f1ca 0300 	rsb	r3, sl, #0
 800a5f8:	9307      	str	r3, [sp, #28]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	930e      	str	r3, [sp, #56]	; 0x38
 800a5fe:	e7bb      	b.n	800a578 <_dtoa_r+0x1b0>
 800a600:	2301      	movs	r3, #1
 800a602:	930a      	str	r3, [sp, #40]	; 0x28
 800a604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a606:	2b00      	cmp	r3, #0
 800a608:	dd59      	ble.n	800a6be <_dtoa_r+0x2f6>
 800a60a:	9302      	str	r3, [sp, #8]
 800a60c:	4699      	mov	r9, r3
 800a60e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a610:	2200      	movs	r2, #0
 800a612:	6072      	str	r2, [r6, #4]
 800a614:	2204      	movs	r2, #4
 800a616:	f102 0014 	add.w	r0, r2, #20
 800a61a:	4298      	cmp	r0, r3
 800a61c:	6871      	ldr	r1, [r6, #4]
 800a61e:	d953      	bls.n	800a6c8 <_dtoa_r+0x300>
 800a620:	4620      	mov	r0, r4
 800a622:	f000 fcaa 	bl	800af7a <_Balloc>
 800a626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a628:	6030      	str	r0, [r6, #0]
 800a62a:	f1b9 0f0e 	cmp.w	r9, #14
 800a62e:	f8d3 b000 	ldr.w	fp, [r3]
 800a632:	f200 80e6 	bhi.w	800a802 <_dtoa_r+0x43a>
 800a636:	2d00      	cmp	r5, #0
 800a638:	f000 80e3 	beq.w	800a802 <_dtoa_r+0x43a>
 800a63c:	ed9d 7b00 	vldr	d7, [sp]
 800a640:	f1ba 0f00 	cmp.w	sl, #0
 800a644:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a648:	dd74      	ble.n	800a734 <_dtoa_r+0x36c>
 800a64a:	4a2a      	ldr	r2, [pc, #168]	; (800a6f4 <_dtoa_r+0x32c>)
 800a64c:	f00a 030f 	and.w	r3, sl, #15
 800a650:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a654:	ed93 7b00 	vldr	d7, [r3]
 800a658:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a65c:	06f0      	lsls	r0, r6, #27
 800a65e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a662:	d565      	bpl.n	800a730 <_dtoa_r+0x368>
 800a664:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <_dtoa_r+0x330>)
 800a666:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a66a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a66e:	f7f6 f96d 	bl	800094c <__aeabi_ddiv>
 800a672:	e9cd 0100 	strd	r0, r1, [sp]
 800a676:	f006 060f 	and.w	r6, r6, #15
 800a67a:	2503      	movs	r5, #3
 800a67c:	4f1e      	ldr	r7, [pc, #120]	; (800a6f8 <_dtoa_r+0x330>)
 800a67e:	e04c      	b.n	800a71a <_dtoa_r+0x352>
 800a680:	2301      	movs	r3, #1
 800a682:	930a      	str	r3, [sp, #40]	; 0x28
 800a684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a686:	4453      	add	r3, sl
 800a688:	f103 0901 	add.w	r9, r3, #1
 800a68c:	9302      	str	r3, [sp, #8]
 800a68e:	464b      	mov	r3, r9
 800a690:	2b01      	cmp	r3, #1
 800a692:	bfb8      	it	lt
 800a694:	2301      	movlt	r3, #1
 800a696:	e7ba      	b.n	800a60e <_dtoa_r+0x246>
 800a698:	2300      	movs	r3, #0
 800a69a:	e7b2      	b.n	800a602 <_dtoa_r+0x23a>
 800a69c:	2300      	movs	r3, #0
 800a69e:	e7f0      	b.n	800a682 <_dtoa_r+0x2ba>
 800a6a0:	2501      	movs	r5, #1
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	9306      	str	r3, [sp, #24]
 800a6a6:	950a      	str	r5, [sp, #40]	; 0x28
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ac:	9302      	str	r3, [sp, #8]
 800a6ae:	4699      	mov	r9, r3
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2312      	movs	r3, #18
 800a6b4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6b6:	e7aa      	b.n	800a60e <_dtoa_r+0x246>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a6bc:	e7f4      	b.n	800a6a8 <_dtoa_r+0x2e0>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	9302      	str	r3, [sp, #8]
 800a6c2:	4699      	mov	r9, r3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	e7f5      	b.n	800a6b4 <_dtoa_r+0x2ec>
 800a6c8:	3101      	adds	r1, #1
 800a6ca:	6071      	str	r1, [r6, #4]
 800a6cc:	0052      	lsls	r2, r2, #1
 800a6ce:	e7a2      	b.n	800a616 <_dtoa_r+0x24e>
 800a6d0:	636f4361 	.word	0x636f4361
 800a6d4:	3fd287a7 	.word	0x3fd287a7
 800a6d8:	8b60c8b3 	.word	0x8b60c8b3
 800a6dc:	3fc68a28 	.word	0x3fc68a28
 800a6e0:	509f79fb 	.word	0x509f79fb
 800a6e4:	3fd34413 	.word	0x3fd34413
 800a6e8:	7ff00000 	.word	0x7ff00000
 800a6ec:	08011d25 	.word	0x08011d25
 800a6f0:	3ff80000 	.word	0x3ff80000
 800a6f4:	08011de0 	.word	0x08011de0
 800a6f8:	08011db8 	.word	0x08011db8
 800a6fc:	08011d51 	.word	0x08011d51
 800a700:	07f1      	lsls	r1, r6, #31
 800a702:	d508      	bpl.n	800a716 <_dtoa_r+0x34e>
 800a704:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a70c:	f7f5 fff4 	bl	80006f8 <__aeabi_dmul>
 800a710:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a714:	3501      	adds	r5, #1
 800a716:	1076      	asrs	r6, r6, #1
 800a718:	3708      	adds	r7, #8
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	d1f0      	bne.n	800a700 <_dtoa_r+0x338>
 800a71e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a722:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a726:	f7f6 f911 	bl	800094c <__aeabi_ddiv>
 800a72a:	e9cd 0100 	strd	r0, r1, [sp]
 800a72e:	e01a      	b.n	800a766 <_dtoa_r+0x39e>
 800a730:	2502      	movs	r5, #2
 800a732:	e7a3      	b.n	800a67c <_dtoa_r+0x2b4>
 800a734:	f000 80a0 	beq.w	800a878 <_dtoa_r+0x4b0>
 800a738:	f1ca 0600 	rsb	r6, sl, #0
 800a73c:	4b9f      	ldr	r3, [pc, #636]	; (800a9bc <_dtoa_r+0x5f4>)
 800a73e:	4fa0      	ldr	r7, [pc, #640]	; (800a9c0 <_dtoa_r+0x5f8>)
 800a740:	f006 020f 	and.w	r2, r6, #15
 800a744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a750:	f7f5 ffd2 	bl	80006f8 <__aeabi_dmul>
 800a754:	e9cd 0100 	strd	r0, r1, [sp]
 800a758:	1136      	asrs	r6, r6, #4
 800a75a:	2300      	movs	r3, #0
 800a75c:	2502      	movs	r5, #2
 800a75e:	2e00      	cmp	r6, #0
 800a760:	d17f      	bne.n	800a862 <_dtoa_r+0x49a>
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1e1      	bne.n	800a72a <_dtoa_r+0x362>
 800a766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 8087 	beq.w	800a87c <_dtoa_r+0x4b4>
 800a76e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a772:	2200      	movs	r2, #0
 800a774:	4b93      	ldr	r3, [pc, #588]	; (800a9c4 <_dtoa_r+0x5fc>)
 800a776:	4630      	mov	r0, r6
 800a778:	4639      	mov	r1, r7
 800a77a:	f7f6 fa2f 	bl	8000bdc <__aeabi_dcmplt>
 800a77e:	2800      	cmp	r0, #0
 800a780:	d07c      	beq.n	800a87c <_dtoa_r+0x4b4>
 800a782:	f1b9 0f00 	cmp.w	r9, #0
 800a786:	d079      	beq.n	800a87c <_dtoa_r+0x4b4>
 800a788:	9b02      	ldr	r3, [sp, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dd35      	ble.n	800a7fa <_dtoa_r+0x432>
 800a78e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a792:	9308      	str	r3, [sp, #32]
 800a794:	4639      	mov	r1, r7
 800a796:	2200      	movs	r2, #0
 800a798:	4b8b      	ldr	r3, [pc, #556]	; (800a9c8 <_dtoa_r+0x600>)
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7f5 ffac 	bl	80006f8 <__aeabi_dmul>
 800a7a0:	e9cd 0100 	strd	r0, r1, [sp]
 800a7a4:	9f02      	ldr	r7, [sp, #8]
 800a7a6:	3501      	adds	r5, #1
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f7f5 ff3b 	bl	8000624 <__aeabi_i2d>
 800a7ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7b2:	f7f5 ffa1 	bl	80006f8 <__aeabi_dmul>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4b84      	ldr	r3, [pc, #528]	; (800a9cc <_dtoa_r+0x604>)
 800a7ba:	f7f5 fde7 	bl	800038c <__adddf3>
 800a7be:	4605      	mov	r5, r0
 800a7c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a7c4:	2f00      	cmp	r7, #0
 800a7c6:	d15d      	bne.n	800a884 <_dtoa_r+0x4bc>
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	4b81      	ldr	r3, [pc, #516]	; (800a9d0 <_dtoa_r+0x608>)
 800a7cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7d0:	f7f5 fdda 	bl	8000388 <__aeabi_dsub>
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	4633      	mov	r3, r6
 800a7d8:	e9cd 0100 	strd	r0, r1, [sp]
 800a7dc:	f7f6 fa1c 	bl	8000c18 <__aeabi_dcmpgt>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	f040 8288 	bne.w	800acf6 <_dtoa_r+0x92e>
 800a7e6:	462a      	mov	r2, r5
 800a7e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a7ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7f0:	f7f6 f9f4 	bl	8000bdc <__aeabi_dcmplt>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	f040 827c 	bne.w	800acf2 <_dtoa_r+0x92a>
 800a7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7fe:	e9cd 2300 	strd	r2, r3, [sp]
 800a802:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a804:	2b00      	cmp	r3, #0
 800a806:	f2c0 8150 	blt.w	800aaaa <_dtoa_r+0x6e2>
 800a80a:	f1ba 0f0e 	cmp.w	sl, #14
 800a80e:	f300 814c 	bgt.w	800aaaa <_dtoa_r+0x6e2>
 800a812:	4b6a      	ldr	r3, [pc, #424]	; (800a9bc <_dtoa_r+0x5f4>)
 800a814:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a818:	ed93 7b00 	vldr	d7, [r3]
 800a81c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a824:	f280 80d8 	bge.w	800a9d8 <_dtoa_r+0x610>
 800a828:	f1b9 0f00 	cmp.w	r9, #0
 800a82c:	f300 80d4 	bgt.w	800a9d8 <_dtoa_r+0x610>
 800a830:	f040 825e 	bne.w	800acf0 <_dtoa_r+0x928>
 800a834:	2200      	movs	r2, #0
 800a836:	4b66      	ldr	r3, [pc, #408]	; (800a9d0 <_dtoa_r+0x608>)
 800a838:	ec51 0b17 	vmov	r0, r1, d7
 800a83c:	f7f5 ff5c 	bl	80006f8 <__aeabi_dmul>
 800a840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a844:	f7f6 f9de 	bl	8000c04 <__aeabi_dcmpge>
 800a848:	464f      	mov	r7, r9
 800a84a:	464e      	mov	r6, r9
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f040 8234 	bne.w	800acba <_dtoa_r+0x8f2>
 800a852:	2331      	movs	r3, #49	; 0x31
 800a854:	f10b 0501 	add.w	r5, fp, #1
 800a858:	f88b 3000 	strb.w	r3, [fp]
 800a85c:	f10a 0a01 	add.w	sl, sl, #1
 800a860:	e22f      	b.n	800acc2 <_dtoa_r+0x8fa>
 800a862:	07f2      	lsls	r2, r6, #31
 800a864:	d505      	bpl.n	800a872 <_dtoa_r+0x4aa>
 800a866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a86a:	f7f5 ff45 	bl	80006f8 <__aeabi_dmul>
 800a86e:	3501      	adds	r5, #1
 800a870:	2301      	movs	r3, #1
 800a872:	1076      	asrs	r6, r6, #1
 800a874:	3708      	adds	r7, #8
 800a876:	e772      	b.n	800a75e <_dtoa_r+0x396>
 800a878:	2502      	movs	r5, #2
 800a87a:	e774      	b.n	800a766 <_dtoa_r+0x39e>
 800a87c:	f8cd a020 	str.w	sl, [sp, #32]
 800a880:	464f      	mov	r7, r9
 800a882:	e791      	b.n	800a7a8 <_dtoa_r+0x3e0>
 800a884:	4b4d      	ldr	r3, [pc, #308]	; (800a9bc <_dtoa_r+0x5f4>)
 800a886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a88a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a890:	2b00      	cmp	r3, #0
 800a892:	d047      	beq.n	800a924 <_dtoa_r+0x55c>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	2000      	movs	r0, #0
 800a89a:	494e      	ldr	r1, [pc, #312]	; (800a9d4 <_dtoa_r+0x60c>)
 800a89c:	f7f6 f856 	bl	800094c <__aeabi_ddiv>
 800a8a0:	462a      	mov	r2, r5
 800a8a2:	4633      	mov	r3, r6
 800a8a4:	f7f5 fd70 	bl	8000388 <__aeabi_dsub>
 800a8a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a8ac:	465d      	mov	r5, fp
 800a8ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8b2:	f7f6 f9d1 	bl	8000c58 <__aeabi_d2iz>
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	f7f5 feb4 	bl	8000624 <__aeabi_i2d>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8c4:	f7f5 fd60 	bl	8000388 <__aeabi_dsub>
 800a8c8:	3630      	adds	r6, #48	; 0x30
 800a8ca:	f805 6b01 	strb.w	r6, [r5], #1
 800a8ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8d2:	e9cd 0100 	strd	r0, r1, [sp]
 800a8d6:	f7f6 f981 	bl	8000bdc <__aeabi_dcmplt>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d163      	bne.n	800a9a6 <_dtoa_r+0x5de>
 800a8de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	4937      	ldr	r1, [pc, #220]	; (800a9c4 <_dtoa_r+0x5fc>)
 800a8e6:	f7f5 fd4f 	bl	8000388 <__aeabi_dsub>
 800a8ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8ee:	f7f6 f975 	bl	8000bdc <__aeabi_dcmplt>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f040 80b7 	bne.w	800aa66 <_dtoa_r+0x69e>
 800a8f8:	eba5 030b 	sub.w	r3, r5, fp
 800a8fc:	429f      	cmp	r7, r3
 800a8fe:	f77f af7c 	ble.w	800a7fa <_dtoa_r+0x432>
 800a902:	2200      	movs	r2, #0
 800a904:	4b30      	ldr	r3, [pc, #192]	; (800a9c8 <_dtoa_r+0x600>)
 800a906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a90a:	f7f5 fef5 	bl	80006f8 <__aeabi_dmul>
 800a90e:	2200      	movs	r2, #0
 800a910:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a914:	4b2c      	ldr	r3, [pc, #176]	; (800a9c8 <_dtoa_r+0x600>)
 800a916:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a91a:	f7f5 feed 	bl	80006f8 <__aeabi_dmul>
 800a91e:	e9cd 0100 	strd	r0, r1, [sp]
 800a922:	e7c4      	b.n	800a8ae <_dtoa_r+0x4e6>
 800a924:	462a      	mov	r2, r5
 800a926:	4633      	mov	r3, r6
 800a928:	f7f5 fee6 	bl	80006f8 <__aeabi_dmul>
 800a92c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a930:	eb0b 0507 	add.w	r5, fp, r7
 800a934:	465e      	mov	r6, fp
 800a936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a93a:	f7f6 f98d 	bl	8000c58 <__aeabi_d2iz>
 800a93e:	4607      	mov	r7, r0
 800a940:	f7f5 fe70 	bl	8000624 <__aeabi_i2d>
 800a944:	3730      	adds	r7, #48	; 0x30
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a94e:	f7f5 fd1b 	bl	8000388 <__aeabi_dsub>
 800a952:	f806 7b01 	strb.w	r7, [r6], #1
 800a956:	42ae      	cmp	r6, r5
 800a958:	e9cd 0100 	strd	r0, r1, [sp]
 800a95c:	f04f 0200 	mov.w	r2, #0
 800a960:	d126      	bne.n	800a9b0 <_dtoa_r+0x5e8>
 800a962:	4b1c      	ldr	r3, [pc, #112]	; (800a9d4 <_dtoa_r+0x60c>)
 800a964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a968:	f7f5 fd10 	bl	800038c <__adddf3>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a974:	f7f6 f950 	bl	8000c18 <__aeabi_dcmpgt>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d174      	bne.n	800aa66 <_dtoa_r+0x69e>
 800a97c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a980:	2000      	movs	r0, #0
 800a982:	4914      	ldr	r1, [pc, #80]	; (800a9d4 <_dtoa_r+0x60c>)
 800a984:	f7f5 fd00 	bl	8000388 <__aeabi_dsub>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a990:	f7f6 f924 	bl	8000bdc <__aeabi_dcmplt>
 800a994:	2800      	cmp	r0, #0
 800a996:	f43f af30 	beq.w	800a7fa <_dtoa_r+0x432>
 800a99a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a99e:	2b30      	cmp	r3, #48	; 0x30
 800a9a0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a9a4:	d002      	beq.n	800a9ac <_dtoa_r+0x5e4>
 800a9a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a9aa:	e04a      	b.n	800aa42 <_dtoa_r+0x67a>
 800a9ac:	4615      	mov	r5, r2
 800a9ae:	e7f4      	b.n	800a99a <_dtoa_r+0x5d2>
 800a9b0:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <_dtoa_r+0x600>)
 800a9b2:	f7f5 fea1 	bl	80006f8 <__aeabi_dmul>
 800a9b6:	e9cd 0100 	strd	r0, r1, [sp]
 800a9ba:	e7bc      	b.n	800a936 <_dtoa_r+0x56e>
 800a9bc:	08011de0 	.word	0x08011de0
 800a9c0:	08011db8 	.word	0x08011db8
 800a9c4:	3ff00000 	.word	0x3ff00000
 800a9c8:	40240000 	.word	0x40240000
 800a9cc:	401c0000 	.word	0x401c0000
 800a9d0:	40140000 	.word	0x40140000
 800a9d4:	3fe00000 	.word	0x3fe00000
 800a9d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a9dc:	465d      	mov	r5, fp
 800a9de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	f7f5 ffb1 	bl	800094c <__aeabi_ddiv>
 800a9ea:	f7f6 f935 	bl	8000c58 <__aeabi_d2iz>
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	f7f5 fe18 	bl	8000624 <__aeabi_i2d>
 800a9f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9f8:	f7f5 fe7e 	bl	80006f8 <__aeabi_dmul>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4630      	mov	r0, r6
 800aa02:	4639      	mov	r1, r7
 800aa04:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aa08:	f7f5 fcbe 	bl	8000388 <__aeabi_dsub>
 800aa0c:	f805 6b01 	strb.w	r6, [r5], #1
 800aa10:	eba5 060b 	sub.w	r6, r5, fp
 800aa14:	45b1      	cmp	r9, r6
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	d139      	bne.n	800aa90 <_dtoa_r+0x6c8>
 800aa1c:	f7f5 fcb6 	bl	800038c <__adddf3>
 800aa20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa24:	4606      	mov	r6, r0
 800aa26:	460f      	mov	r7, r1
 800aa28:	f7f6 f8f6 	bl	8000c18 <__aeabi_dcmpgt>
 800aa2c:	b9c8      	cbnz	r0, 800aa62 <_dtoa_r+0x69a>
 800aa2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa32:	4630      	mov	r0, r6
 800aa34:	4639      	mov	r1, r7
 800aa36:	f7f6 f8c7 	bl	8000bc8 <__aeabi_dcmpeq>
 800aa3a:	b110      	cbz	r0, 800aa42 <_dtoa_r+0x67a>
 800aa3c:	f018 0f01 	tst.w	r8, #1
 800aa40:	d10f      	bne.n	800aa62 <_dtoa_r+0x69a>
 800aa42:	9904      	ldr	r1, [sp, #16]
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 facc 	bl	800afe2 <_Bfree>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa4e:	702b      	strb	r3, [r5, #0]
 800aa50:	f10a 0301 	add.w	r3, sl, #1
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f000 8241 	beq.w	800aee0 <_dtoa_r+0xb18>
 800aa5e:	601d      	str	r5, [r3, #0]
 800aa60:	e23e      	b.n	800aee0 <_dtoa_r+0xb18>
 800aa62:	f8cd a020 	str.w	sl, [sp, #32]
 800aa66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa6a:	2a39      	cmp	r2, #57	; 0x39
 800aa6c:	f105 33ff 	add.w	r3, r5, #4294967295
 800aa70:	d108      	bne.n	800aa84 <_dtoa_r+0x6bc>
 800aa72:	459b      	cmp	fp, r3
 800aa74:	d10a      	bne.n	800aa8c <_dtoa_r+0x6c4>
 800aa76:	9b08      	ldr	r3, [sp, #32]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	9308      	str	r3, [sp, #32]
 800aa7c:	2330      	movs	r3, #48	; 0x30
 800aa7e:	f88b 3000 	strb.w	r3, [fp]
 800aa82:	465b      	mov	r3, fp
 800aa84:	781a      	ldrb	r2, [r3, #0]
 800aa86:	3201      	adds	r2, #1
 800aa88:	701a      	strb	r2, [r3, #0]
 800aa8a:	e78c      	b.n	800a9a6 <_dtoa_r+0x5de>
 800aa8c:	461d      	mov	r5, r3
 800aa8e:	e7ea      	b.n	800aa66 <_dtoa_r+0x69e>
 800aa90:	2200      	movs	r2, #0
 800aa92:	4b9b      	ldr	r3, [pc, #620]	; (800ad00 <_dtoa_r+0x938>)
 800aa94:	f7f5 fe30 	bl	80006f8 <__aeabi_dmul>
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	460f      	mov	r7, r1
 800aaa0:	f7f6 f892 	bl	8000bc8 <__aeabi_dcmpeq>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d09a      	beq.n	800a9de <_dtoa_r+0x616>
 800aaa8:	e7cb      	b.n	800aa42 <_dtoa_r+0x67a>
 800aaaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaac:	2a00      	cmp	r2, #0
 800aaae:	f000 808b 	beq.w	800abc8 <_dtoa_r+0x800>
 800aab2:	9a06      	ldr	r2, [sp, #24]
 800aab4:	2a01      	cmp	r2, #1
 800aab6:	dc6e      	bgt.n	800ab96 <_dtoa_r+0x7ce>
 800aab8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aaba:	2a00      	cmp	r2, #0
 800aabc:	d067      	beq.n	800ab8e <_dtoa_r+0x7c6>
 800aabe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aac2:	9f07      	ldr	r7, [sp, #28]
 800aac4:	9d05      	ldr	r5, [sp, #20]
 800aac6:	9a05      	ldr	r2, [sp, #20]
 800aac8:	2101      	movs	r1, #1
 800aaca:	441a      	add	r2, r3
 800aacc:	4620      	mov	r0, r4
 800aace:	9205      	str	r2, [sp, #20]
 800aad0:	4498      	add	r8, r3
 800aad2:	f000 fb26 	bl	800b122 <__i2b>
 800aad6:	4606      	mov	r6, r0
 800aad8:	2d00      	cmp	r5, #0
 800aada:	dd0c      	ble.n	800aaf6 <_dtoa_r+0x72e>
 800aadc:	f1b8 0f00 	cmp.w	r8, #0
 800aae0:	dd09      	ble.n	800aaf6 <_dtoa_r+0x72e>
 800aae2:	4545      	cmp	r5, r8
 800aae4:	9a05      	ldr	r2, [sp, #20]
 800aae6:	462b      	mov	r3, r5
 800aae8:	bfa8      	it	ge
 800aaea:	4643      	movge	r3, r8
 800aaec:	1ad2      	subs	r2, r2, r3
 800aaee:	9205      	str	r2, [sp, #20]
 800aaf0:	1aed      	subs	r5, r5, r3
 800aaf2:	eba8 0803 	sub.w	r8, r8, r3
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	b1eb      	cbz	r3, 800ab36 <_dtoa_r+0x76e>
 800aafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d067      	beq.n	800abd0 <_dtoa_r+0x808>
 800ab00:	b18f      	cbz	r7, 800ab26 <_dtoa_r+0x75e>
 800ab02:	4631      	mov	r1, r6
 800ab04:	463a      	mov	r2, r7
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fbaa 	bl	800b260 <__pow5mult>
 800ab0c:	9a04      	ldr	r2, [sp, #16]
 800ab0e:	4601      	mov	r1, r0
 800ab10:	4606      	mov	r6, r0
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 fb0e 	bl	800b134 <__multiply>
 800ab18:	9904      	ldr	r1, [sp, #16]
 800ab1a:	9008      	str	r0, [sp, #32]
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 fa60 	bl	800afe2 <_Bfree>
 800ab22:	9b08      	ldr	r3, [sp, #32]
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	9b07      	ldr	r3, [sp, #28]
 800ab28:	1bda      	subs	r2, r3, r7
 800ab2a:	d004      	beq.n	800ab36 <_dtoa_r+0x76e>
 800ab2c:	9904      	ldr	r1, [sp, #16]
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 fb96 	bl	800b260 <__pow5mult>
 800ab34:	9004      	str	r0, [sp, #16]
 800ab36:	2101      	movs	r1, #1
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 faf2 	bl	800b122 <__i2b>
 800ab3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab40:	4607      	mov	r7, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 81d0 	beq.w	800aee8 <_dtoa_r+0xb20>
 800ab48:	461a      	mov	r2, r3
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 fb87 	bl	800b260 <__pow5mult>
 800ab52:	9b06      	ldr	r3, [sp, #24]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	4607      	mov	r7, r0
 800ab58:	dc40      	bgt.n	800abdc <_dtoa_r+0x814>
 800ab5a:	9b00      	ldr	r3, [sp, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d139      	bne.n	800abd4 <_dtoa_r+0x80c>
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d136      	bne.n	800abd8 <_dtoa_r+0x810>
 800ab6a:	9b01      	ldr	r3, [sp, #4]
 800ab6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab70:	0d1b      	lsrs	r3, r3, #20
 800ab72:	051b      	lsls	r3, r3, #20
 800ab74:	b12b      	cbz	r3, 800ab82 <_dtoa_r+0x7ba>
 800ab76:	9b05      	ldr	r3, [sp, #20]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	9305      	str	r3, [sp, #20]
 800ab7c:	f108 0801 	add.w	r8, r8, #1
 800ab80:	2301      	movs	r3, #1
 800ab82:	9307      	str	r3, [sp, #28]
 800ab84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d12a      	bne.n	800abe0 <_dtoa_r+0x818>
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	e030      	b.n	800abf0 <_dtoa_r+0x828>
 800ab8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab94:	e795      	b.n	800aac2 <_dtoa_r+0x6fa>
 800ab96:	9b07      	ldr	r3, [sp, #28]
 800ab98:	f109 37ff 	add.w	r7, r9, #4294967295
 800ab9c:	42bb      	cmp	r3, r7
 800ab9e:	bfbf      	itttt	lt
 800aba0:	9b07      	ldrlt	r3, [sp, #28]
 800aba2:	9707      	strlt	r7, [sp, #28]
 800aba4:	1afa      	sublt	r2, r7, r3
 800aba6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aba8:	bfbb      	ittet	lt
 800abaa:	189b      	addlt	r3, r3, r2
 800abac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800abae:	1bdf      	subge	r7, r3, r7
 800abb0:	2700      	movlt	r7, #0
 800abb2:	f1b9 0f00 	cmp.w	r9, #0
 800abb6:	bfb5      	itete	lt
 800abb8:	9b05      	ldrlt	r3, [sp, #20]
 800abba:	9d05      	ldrge	r5, [sp, #20]
 800abbc:	eba3 0509 	sublt.w	r5, r3, r9
 800abc0:	464b      	movge	r3, r9
 800abc2:	bfb8      	it	lt
 800abc4:	2300      	movlt	r3, #0
 800abc6:	e77e      	b.n	800aac6 <_dtoa_r+0x6fe>
 800abc8:	9f07      	ldr	r7, [sp, #28]
 800abca:	9d05      	ldr	r5, [sp, #20]
 800abcc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800abce:	e783      	b.n	800aad8 <_dtoa_r+0x710>
 800abd0:	9a07      	ldr	r2, [sp, #28]
 800abd2:	e7ab      	b.n	800ab2c <_dtoa_r+0x764>
 800abd4:	2300      	movs	r3, #0
 800abd6:	e7d4      	b.n	800ab82 <_dtoa_r+0x7ba>
 800abd8:	9b00      	ldr	r3, [sp, #0]
 800abda:	e7d2      	b.n	800ab82 <_dtoa_r+0x7ba>
 800abdc:	2300      	movs	r3, #0
 800abde:	9307      	str	r3, [sp, #28]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800abe6:	6918      	ldr	r0, [r3, #16]
 800abe8:	f000 fa4d 	bl	800b086 <__hi0bits>
 800abec:	f1c0 0020 	rsb	r0, r0, #32
 800abf0:	4440      	add	r0, r8
 800abf2:	f010 001f 	ands.w	r0, r0, #31
 800abf6:	d047      	beq.n	800ac88 <_dtoa_r+0x8c0>
 800abf8:	f1c0 0320 	rsb	r3, r0, #32
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	dd3b      	ble.n	800ac78 <_dtoa_r+0x8b0>
 800ac00:	9b05      	ldr	r3, [sp, #20]
 800ac02:	f1c0 001c 	rsb	r0, r0, #28
 800ac06:	4403      	add	r3, r0
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	4405      	add	r5, r0
 800ac0c:	4480      	add	r8, r0
 800ac0e:	9b05      	ldr	r3, [sp, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dd05      	ble.n	800ac20 <_dtoa_r+0x858>
 800ac14:	461a      	mov	r2, r3
 800ac16:	9904      	ldr	r1, [sp, #16]
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f000 fb6f 	bl	800b2fc <__lshift>
 800ac1e:	9004      	str	r0, [sp, #16]
 800ac20:	f1b8 0f00 	cmp.w	r8, #0
 800ac24:	dd05      	ble.n	800ac32 <_dtoa_r+0x86a>
 800ac26:	4639      	mov	r1, r7
 800ac28:	4642      	mov	r2, r8
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 fb66 	bl	800b2fc <__lshift>
 800ac30:	4607      	mov	r7, r0
 800ac32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac34:	b353      	cbz	r3, 800ac8c <_dtoa_r+0x8c4>
 800ac36:	4639      	mov	r1, r7
 800ac38:	9804      	ldr	r0, [sp, #16]
 800ac3a:	f000 fbb3 	bl	800b3a4 <__mcmp>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	da24      	bge.n	800ac8c <_dtoa_r+0x8c4>
 800ac42:	2300      	movs	r3, #0
 800ac44:	220a      	movs	r2, #10
 800ac46:	9904      	ldr	r1, [sp, #16]
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 f9e1 	bl	800b010 <__multadd>
 800ac4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac50:	9004      	str	r0, [sp, #16]
 800ac52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 814d 	beq.w	800aef6 <_dtoa_r+0xb2e>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4631      	mov	r1, r6
 800ac60:	220a      	movs	r2, #10
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 f9d4 	bl	800b010 <__multadd>
 800ac68:	9b02      	ldr	r3, [sp, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	dc4f      	bgt.n	800ad10 <_dtoa_r+0x948>
 800ac70:	9b06      	ldr	r3, [sp, #24]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	dd4c      	ble.n	800ad10 <_dtoa_r+0x948>
 800ac76:	e011      	b.n	800ac9c <_dtoa_r+0x8d4>
 800ac78:	d0c9      	beq.n	800ac0e <_dtoa_r+0x846>
 800ac7a:	9a05      	ldr	r2, [sp, #20]
 800ac7c:	331c      	adds	r3, #28
 800ac7e:	441a      	add	r2, r3
 800ac80:	9205      	str	r2, [sp, #20]
 800ac82:	441d      	add	r5, r3
 800ac84:	4498      	add	r8, r3
 800ac86:	e7c2      	b.n	800ac0e <_dtoa_r+0x846>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	e7f6      	b.n	800ac7a <_dtoa_r+0x8b2>
 800ac8c:	f1b9 0f00 	cmp.w	r9, #0
 800ac90:	dc38      	bgt.n	800ad04 <_dtoa_r+0x93c>
 800ac92:	9b06      	ldr	r3, [sp, #24]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	dd35      	ble.n	800ad04 <_dtoa_r+0x93c>
 800ac98:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	b963      	cbnz	r3, 800acba <_dtoa_r+0x8f2>
 800aca0:	4639      	mov	r1, r7
 800aca2:	2205      	movs	r2, #5
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 f9b3 	bl	800b010 <__multadd>
 800acaa:	4601      	mov	r1, r0
 800acac:	4607      	mov	r7, r0
 800acae:	9804      	ldr	r0, [sp, #16]
 800acb0:	f000 fb78 	bl	800b3a4 <__mcmp>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f73f adcc 	bgt.w	800a852 <_dtoa_r+0x48a>
 800acba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acbc:	465d      	mov	r5, fp
 800acbe:	ea6f 0a03 	mvn.w	sl, r3
 800acc2:	f04f 0900 	mov.w	r9, #0
 800acc6:	4639      	mov	r1, r7
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 f98a 	bl	800afe2 <_Bfree>
 800acce:	2e00      	cmp	r6, #0
 800acd0:	f43f aeb7 	beq.w	800aa42 <_dtoa_r+0x67a>
 800acd4:	f1b9 0f00 	cmp.w	r9, #0
 800acd8:	d005      	beq.n	800ace6 <_dtoa_r+0x91e>
 800acda:	45b1      	cmp	r9, r6
 800acdc:	d003      	beq.n	800ace6 <_dtoa_r+0x91e>
 800acde:	4649      	mov	r1, r9
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 f97e 	bl	800afe2 <_Bfree>
 800ace6:	4631      	mov	r1, r6
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 f97a 	bl	800afe2 <_Bfree>
 800acee:	e6a8      	b.n	800aa42 <_dtoa_r+0x67a>
 800acf0:	2700      	movs	r7, #0
 800acf2:	463e      	mov	r6, r7
 800acf4:	e7e1      	b.n	800acba <_dtoa_r+0x8f2>
 800acf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800acfa:	463e      	mov	r6, r7
 800acfc:	e5a9      	b.n	800a852 <_dtoa_r+0x48a>
 800acfe:	bf00      	nop
 800ad00:	40240000 	.word	0x40240000
 800ad04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad06:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 80fa 	beq.w	800af04 <_dtoa_r+0xb3c>
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	dd05      	ble.n	800ad20 <_dtoa_r+0x958>
 800ad14:	4631      	mov	r1, r6
 800ad16:	462a      	mov	r2, r5
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 faef 	bl	800b2fc <__lshift>
 800ad1e:	4606      	mov	r6, r0
 800ad20:	9b07      	ldr	r3, [sp, #28]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d04c      	beq.n	800adc0 <_dtoa_r+0x9f8>
 800ad26:	6871      	ldr	r1, [r6, #4]
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 f926 	bl	800af7a <_Balloc>
 800ad2e:	6932      	ldr	r2, [r6, #16]
 800ad30:	3202      	adds	r2, #2
 800ad32:	4605      	mov	r5, r0
 800ad34:	0092      	lsls	r2, r2, #2
 800ad36:	f106 010c 	add.w	r1, r6, #12
 800ad3a:	300c      	adds	r0, #12
 800ad3c:	f000 f912 	bl	800af64 <memcpy>
 800ad40:	2201      	movs	r2, #1
 800ad42:	4629      	mov	r1, r5
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 fad9 	bl	800b2fc <__lshift>
 800ad4a:	9b00      	ldr	r3, [sp, #0]
 800ad4c:	f8cd b014 	str.w	fp, [sp, #20]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	46b1      	mov	r9, r6
 800ad56:	9307      	str	r3, [sp, #28]
 800ad58:	4606      	mov	r6, r0
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	9804      	ldr	r0, [sp, #16]
 800ad5e:	f7ff faa7 	bl	800a2b0 <quorem>
 800ad62:	4649      	mov	r1, r9
 800ad64:	4605      	mov	r5, r0
 800ad66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad6a:	9804      	ldr	r0, [sp, #16]
 800ad6c:	f000 fb1a 	bl	800b3a4 <__mcmp>
 800ad70:	4632      	mov	r2, r6
 800ad72:	9000      	str	r0, [sp, #0]
 800ad74:	4639      	mov	r1, r7
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 fb2e 	bl	800b3d8 <__mdiff>
 800ad7c:	68c3      	ldr	r3, [r0, #12]
 800ad7e:	4602      	mov	r2, r0
 800ad80:	bb03      	cbnz	r3, 800adc4 <_dtoa_r+0x9fc>
 800ad82:	4601      	mov	r1, r0
 800ad84:	9008      	str	r0, [sp, #32]
 800ad86:	9804      	ldr	r0, [sp, #16]
 800ad88:	f000 fb0c 	bl	800b3a4 <__mcmp>
 800ad8c:	9a08      	ldr	r2, [sp, #32]
 800ad8e:	4603      	mov	r3, r0
 800ad90:	4611      	mov	r1, r2
 800ad92:	4620      	mov	r0, r4
 800ad94:	9308      	str	r3, [sp, #32]
 800ad96:	f000 f924 	bl	800afe2 <_Bfree>
 800ad9a:	9b08      	ldr	r3, [sp, #32]
 800ad9c:	b9a3      	cbnz	r3, 800adc8 <_dtoa_r+0xa00>
 800ad9e:	9a06      	ldr	r2, [sp, #24]
 800ada0:	b992      	cbnz	r2, 800adc8 <_dtoa_r+0xa00>
 800ada2:	9a07      	ldr	r2, [sp, #28]
 800ada4:	b982      	cbnz	r2, 800adc8 <_dtoa_r+0xa00>
 800ada6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800adaa:	d029      	beq.n	800ae00 <_dtoa_r+0xa38>
 800adac:	9b00      	ldr	r3, [sp, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dd01      	ble.n	800adb6 <_dtoa_r+0x9ee>
 800adb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800adb6:	9b05      	ldr	r3, [sp, #20]
 800adb8:	1c5d      	adds	r5, r3, #1
 800adba:	f883 8000 	strb.w	r8, [r3]
 800adbe:	e782      	b.n	800acc6 <_dtoa_r+0x8fe>
 800adc0:	4630      	mov	r0, r6
 800adc2:	e7c2      	b.n	800ad4a <_dtoa_r+0x982>
 800adc4:	2301      	movs	r3, #1
 800adc6:	e7e3      	b.n	800ad90 <_dtoa_r+0x9c8>
 800adc8:	9a00      	ldr	r2, [sp, #0]
 800adca:	2a00      	cmp	r2, #0
 800adcc:	db04      	blt.n	800add8 <_dtoa_r+0xa10>
 800adce:	d125      	bne.n	800ae1c <_dtoa_r+0xa54>
 800add0:	9a06      	ldr	r2, [sp, #24]
 800add2:	bb1a      	cbnz	r2, 800ae1c <_dtoa_r+0xa54>
 800add4:	9a07      	ldr	r2, [sp, #28]
 800add6:	bb0a      	cbnz	r2, 800ae1c <_dtoa_r+0xa54>
 800add8:	2b00      	cmp	r3, #0
 800adda:	ddec      	ble.n	800adb6 <_dtoa_r+0x9ee>
 800addc:	2201      	movs	r2, #1
 800adde:	9904      	ldr	r1, [sp, #16]
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 fa8b 	bl	800b2fc <__lshift>
 800ade6:	4639      	mov	r1, r7
 800ade8:	9004      	str	r0, [sp, #16]
 800adea:	f000 fadb 	bl	800b3a4 <__mcmp>
 800adee:	2800      	cmp	r0, #0
 800adf0:	dc03      	bgt.n	800adfa <_dtoa_r+0xa32>
 800adf2:	d1e0      	bne.n	800adb6 <_dtoa_r+0x9ee>
 800adf4:	f018 0f01 	tst.w	r8, #1
 800adf8:	d0dd      	beq.n	800adb6 <_dtoa_r+0x9ee>
 800adfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800adfe:	d1d8      	bne.n	800adb2 <_dtoa_r+0x9ea>
 800ae00:	9b05      	ldr	r3, [sp, #20]
 800ae02:	9a05      	ldr	r2, [sp, #20]
 800ae04:	1c5d      	adds	r5, r3, #1
 800ae06:	2339      	movs	r3, #57	; 0x39
 800ae08:	7013      	strb	r3, [r2, #0]
 800ae0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae0e:	2b39      	cmp	r3, #57	; 0x39
 800ae10:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae14:	d04f      	beq.n	800aeb6 <_dtoa_r+0xaee>
 800ae16:	3301      	adds	r3, #1
 800ae18:	7013      	strb	r3, [r2, #0]
 800ae1a:	e754      	b.n	800acc6 <_dtoa_r+0x8fe>
 800ae1c:	9a05      	ldr	r2, [sp, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f102 0501 	add.w	r5, r2, #1
 800ae24:	dd06      	ble.n	800ae34 <_dtoa_r+0xa6c>
 800ae26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae2a:	d0e9      	beq.n	800ae00 <_dtoa_r+0xa38>
 800ae2c:	f108 0801 	add.w	r8, r8, #1
 800ae30:	9b05      	ldr	r3, [sp, #20]
 800ae32:	e7c2      	b.n	800adba <_dtoa_r+0x9f2>
 800ae34:	9a02      	ldr	r2, [sp, #8]
 800ae36:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ae3a:	eba5 030b 	sub.w	r3, r5, fp
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d021      	beq.n	800ae86 <_dtoa_r+0xabe>
 800ae42:	2300      	movs	r3, #0
 800ae44:	220a      	movs	r2, #10
 800ae46:	9904      	ldr	r1, [sp, #16]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 f8e1 	bl	800b010 <__multadd>
 800ae4e:	45b1      	cmp	r9, r6
 800ae50:	9004      	str	r0, [sp, #16]
 800ae52:	f04f 0300 	mov.w	r3, #0
 800ae56:	f04f 020a 	mov.w	r2, #10
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	d105      	bne.n	800ae6c <_dtoa_r+0xaa4>
 800ae60:	f000 f8d6 	bl	800b010 <__multadd>
 800ae64:	4681      	mov	r9, r0
 800ae66:	4606      	mov	r6, r0
 800ae68:	9505      	str	r5, [sp, #20]
 800ae6a:	e776      	b.n	800ad5a <_dtoa_r+0x992>
 800ae6c:	f000 f8d0 	bl	800b010 <__multadd>
 800ae70:	4631      	mov	r1, r6
 800ae72:	4681      	mov	r9, r0
 800ae74:	2300      	movs	r3, #0
 800ae76:	220a      	movs	r2, #10
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f000 f8c9 	bl	800b010 <__multadd>
 800ae7e:	4606      	mov	r6, r0
 800ae80:	e7f2      	b.n	800ae68 <_dtoa_r+0xaa0>
 800ae82:	f04f 0900 	mov.w	r9, #0
 800ae86:	2201      	movs	r2, #1
 800ae88:	9904      	ldr	r1, [sp, #16]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 fa36 	bl	800b2fc <__lshift>
 800ae90:	4639      	mov	r1, r7
 800ae92:	9004      	str	r0, [sp, #16]
 800ae94:	f000 fa86 	bl	800b3a4 <__mcmp>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	dcb6      	bgt.n	800ae0a <_dtoa_r+0xa42>
 800ae9c:	d102      	bne.n	800aea4 <_dtoa_r+0xadc>
 800ae9e:	f018 0f01 	tst.w	r8, #1
 800aea2:	d1b2      	bne.n	800ae0a <_dtoa_r+0xa42>
 800aea4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aea8:	2b30      	cmp	r3, #48	; 0x30
 800aeaa:	f105 32ff 	add.w	r2, r5, #4294967295
 800aeae:	f47f af0a 	bne.w	800acc6 <_dtoa_r+0x8fe>
 800aeb2:	4615      	mov	r5, r2
 800aeb4:	e7f6      	b.n	800aea4 <_dtoa_r+0xadc>
 800aeb6:	4593      	cmp	fp, r2
 800aeb8:	d105      	bne.n	800aec6 <_dtoa_r+0xafe>
 800aeba:	2331      	movs	r3, #49	; 0x31
 800aebc:	f10a 0a01 	add.w	sl, sl, #1
 800aec0:	f88b 3000 	strb.w	r3, [fp]
 800aec4:	e6ff      	b.n	800acc6 <_dtoa_r+0x8fe>
 800aec6:	4615      	mov	r5, r2
 800aec8:	e79f      	b.n	800ae0a <_dtoa_r+0xa42>
 800aeca:	f8df b064 	ldr.w	fp, [pc, #100]	; 800af30 <_dtoa_r+0xb68>
 800aece:	e007      	b.n	800aee0 <_dtoa_r+0xb18>
 800aed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800af34 <_dtoa_r+0xb6c>
 800aed6:	b11b      	cbz	r3, 800aee0 <_dtoa_r+0xb18>
 800aed8:	f10b 0308 	add.w	r3, fp, #8
 800aedc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	4658      	mov	r0, fp
 800aee2:	b017      	add	sp, #92	; 0x5c
 800aee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee8:	9b06      	ldr	r3, [sp, #24]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	f77f ae35 	ble.w	800ab5a <_dtoa_r+0x792>
 800aef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aef2:	9307      	str	r3, [sp, #28]
 800aef4:	e649      	b.n	800ab8a <_dtoa_r+0x7c2>
 800aef6:	9b02      	ldr	r3, [sp, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dc03      	bgt.n	800af04 <_dtoa_r+0xb3c>
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	f73f aecc 	bgt.w	800ac9c <_dtoa_r+0x8d4>
 800af04:	465d      	mov	r5, fp
 800af06:	4639      	mov	r1, r7
 800af08:	9804      	ldr	r0, [sp, #16]
 800af0a:	f7ff f9d1 	bl	800a2b0 <quorem>
 800af0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800af12:	f805 8b01 	strb.w	r8, [r5], #1
 800af16:	9a02      	ldr	r2, [sp, #8]
 800af18:	eba5 030b 	sub.w	r3, r5, fp
 800af1c:	429a      	cmp	r2, r3
 800af1e:	ddb0      	ble.n	800ae82 <_dtoa_r+0xaba>
 800af20:	2300      	movs	r3, #0
 800af22:	220a      	movs	r2, #10
 800af24:	9904      	ldr	r1, [sp, #16]
 800af26:	4620      	mov	r0, r4
 800af28:	f000 f872 	bl	800b010 <__multadd>
 800af2c:	9004      	str	r0, [sp, #16]
 800af2e:	e7ea      	b.n	800af06 <_dtoa_r+0xb3e>
 800af30:	08011d24 	.word	0x08011d24
 800af34:	08011d48 	.word	0x08011d48

0800af38 <_localeconv_r>:
 800af38:	4b04      	ldr	r3, [pc, #16]	; (800af4c <_localeconv_r+0x14>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6a18      	ldr	r0, [r3, #32]
 800af3e:	4b04      	ldr	r3, [pc, #16]	; (800af50 <_localeconv_r+0x18>)
 800af40:	2800      	cmp	r0, #0
 800af42:	bf08      	it	eq
 800af44:	4618      	moveq	r0, r3
 800af46:	30f0      	adds	r0, #240	; 0xf0
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	20000020 	.word	0x20000020
 800af50:	20000084 	.word	0x20000084

0800af54 <malloc>:
 800af54:	4b02      	ldr	r3, [pc, #8]	; (800af60 <malloc+0xc>)
 800af56:	4601      	mov	r1, r0
 800af58:	6818      	ldr	r0, [r3, #0]
 800af5a:	f000 bb45 	b.w	800b5e8 <_malloc_r>
 800af5e:	bf00      	nop
 800af60:	20000020 	.word	0x20000020

0800af64 <memcpy>:
 800af64:	b510      	push	{r4, lr}
 800af66:	1e43      	subs	r3, r0, #1
 800af68:	440a      	add	r2, r1
 800af6a:	4291      	cmp	r1, r2
 800af6c:	d100      	bne.n	800af70 <memcpy+0xc>
 800af6e:	bd10      	pop	{r4, pc}
 800af70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af78:	e7f7      	b.n	800af6a <memcpy+0x6>

0800af7a <_Balloc>:
 800af7a:	b570      	push	{r4, r5, r6, lr}
 800af7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af7e:	4604      	mov	r4, r0
 800af80:	460e      	mov	r6, r1
 800af82:	b93d      	cbnz	r5, 800af94 <_Balloc+0x1a>
 800af84:	2010      	movs	r0, #16
 800af86:	f7ff ffe5 	bl	800af54 <malloc>
 800af8a:	6260      	str	r0, [r4, #36]	; 0x24
 800af8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af90:	6005      	str	r5, [r0, #0]
 800af92:	60c5      	str	r5, [r0, #12]
 800af94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800af96:	68eb      	ldr	r3, [r5, #12]
 800af98:	b183      	cbz	r3, 800afbc <_Balloc+0x42>
 800af9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afa2:	b9b8      	cbnz	r0, 800afd4 <_Balloc+0x5a>
 800afa4:	2101      	movs	r1, #1
 800afa6:	fa01 f506 	lsl.w	r5, r1, r6
 800afaa:	1d6a      	adds	r2, r5, #5
 800afac:	0092      	lsls	r2, r2, #2
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 fabe 	bl	800b530 <_calloc_r>
 800afb4:	b160      	cbz	r0, 800afd0 <_Balloc+0x56>
 800afb6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800afba:	e00e      	b.n	800afda <_Balloc+0x60>
 800afbc:	2221      	movs	r2, #33	; 0x21
 800afbe:	2104      	movs	r1, #4
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 fab5 	bl	800b530 <_calloc_r>
 800afc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afc8:	60e8      	str	r0, [r5, #12]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1e4      	bne.n	800af9a <_Balloc+0x20>
 800afd0:	2000      	movs	r0, #0
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	6802      	ldr	r2, [r0, #0]
 800afd6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800afda:	2300      	movs	r3, #0
 800afdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afe0:	e7f7      	b.n	800afd2 <_Balloc+0x58>

0800afe2 <_Bfree>:
 800afe2:	b570      	push	{r4, r5, r6, lr}
 800afe4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800afe6:	4606      	mov	r6, r0
 800afe8:	460d      	mov	r5, r1
 800afea:	b93c      	cbnz	r4, 800affc <_Bfree+0x1a>
 800afec:	2010      	movs	r0, #16
 800afee:	f7ff ffb1 	bl	800af54 <malloc>
 800aff2:	6270      	str	r0, [r6, #36]	; 0x24
 800aff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aff8:	6004      	str	r4, [r0, #0]
 800affa:	60c4      	str	r4, [r0, #12]
 800affc:	b13d      	cbz	r5, 800b00e <_Bfree+0x2c>
 800affe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b000:	686a      	ldr	r2, [r5, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b008:	6029      	str	r1, [r5, #0]
 800b00a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b00e:	bd70      	pop	{r4, r5, r6, pc}

0800b010 <__multadd>:
 800b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b014:	690d      	ldr	r5, [r1, #16]
 800b016:	461f      	mov	r7, r3
 800b018:	4606      	mov	r6, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	f101 0c14 	add.w	ip, r1, #20
 800b020:	2300      	movs	r3, #0
 800b022:	f8dc 0000 	ldr.w	r0, [ip]
 800b026:	b281      	uxth	r1, r0
 800b028:	fb02 7101 	mla	r1, r2, r1, r7
 800b02c:	0c0f      	lsrs	r7, r1, #16
 800b02e:	0c00      	lsrs	r0, r0, #16
 800b030:	fb02 7000 	mla	r0, r2, r0, r7
 800b034:	b289      	uxth	r1, r1
 800b036:	3301      	adds	r3, #1
 800b038:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b03c:	429d      	cmp	r5, r3
 800b03e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b042:	f84c 1b04 	str.w	r1, [ip], #4
 800b046:	dcec      	bgt.n	800b022 <__multadd+0x12>
 800b048:	b1d7      	cbz	r7, 800b080 <__multadd+0x70>
 800b04a:	68a3      	ldr	r3, [r4, #8]
 800b04c:	42ab      	cmp	r3, r5
 800b04e:	dc12      	bgt.n	800b076 <__multadd+0x66>
 800b050:	6861      	ldr	r1, [r4, #4]
 800b052:	4630      	mov	r0, r6
 800b054:	3101      	adds	r1, #1
 800b056:	f7ff ff90 	bl	800af7a <_Balloc>
 800b05a:	6922      	ldr	r2, [r4, #16]
 800b05c:	3202      	adds	r2, #2
 800b05e:	f104 010c 	add.w	r1, r4, #12
 800b062:	4680      	mov	r8, r0
 800b064:	0092      	lsls	r2, r2, #2
 800b066:	300c      	adds	r0, #12
 800b068:	f7ff ff7c 	bl	800af64 <memcpy>
 800b06c:	4621      	mov	r1, r4
 800b06e:	4630      	mov	r0, r6
 800b070:	f7ff ffb7 	bl	800afe2 <_Bfree>
 800b074:	4644      	mov	r4, r8
 800b076:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b07a:	3501      	adds	r5, #1
 800b07c:	615f      	str	r7, [r3, #20]
 800b07e:	6125      	str	r5, [r4, #16]
 800b080:	4620      	mov	r0, r4
 800b082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b086 <__hi0bits>:
 800b086:	0c02      	lsrs	r2, r0, #16
 800b088:	0412      	lsls	r2, r2, #16
 800b08a:	4603      	mov	r3, r0
 800b08c:	b9b2      	cbnz	r2, 800b0bc <__hi0bits+0x36>
 800b08e:	0403      	lsls	r3, r0, #16
 800b090:	2010      	movs	r0, #16
 800b092:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b096:	bf04      	itt	eq
 800b098:	021b      	lsleq	r3, r3, #8
 800b09a:	3008      	addeq	r0, #8
 800b09c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b0a0:	bf04      	itt	eq
 800b0a2:	011b      	lsleq	r3, r3, #4
 800b0a4:	3004      	addeq	r0, #4
 800b0a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b0aa:	bf04      	itt	eq
 800b0ac:	009b      	lsleq	r3, r3, #2
 800b0ae:	3002      	addeq	r0, #2
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	db06      	blt.n	800b0c2 <__hi0bits+0x3c>
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	d503      	bpl.n	800b0c0 <__hi0bits+0x3a>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	4770      	bx	lr
 800b0bc:	2000      	movs	r0, #0
 800b0be:	e7e8      	b.n	800b092 <__hi0bits+0xc>
 800b0c0:	2020      	movs	r0, #32
 800b0c2:	4770      	bx	lr

0800b0c4 <__lo0bits>:
 800b0c4:	6803      	ldr	r3, [r0, #0]
 800b0c6:	f013 0207 	ands.w	r2, r3, #7
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	d00b      	beq.n	800b0e6 <__lo0bits+0x22>
 800b0ce:	07da      	lsls	r2, r3, #31
 800b0d0:	d423      	bmi.n	800b11a <__lo0bits+0x56>
 800b0d2:	0798      	lsls	r0, r3, #30
 800b0d4:	bf49      	itett	mi
 800b0d6:	085b      	lsrmi	r3, r3, #1
 800b0d8:	089b      	lsrpl	r3, r3, #2
 800b0da:	2001      	movmi	r0, #1
 800b0dc:	600b      	strmi	r3, [r1, #0]
 800b0de:	bf5c      	itt	pl
 800b0e0:	600b      	strpl	r3, [r1, #0]
 800b0e2:	2002      	movpl	r0, #2
 800b0e4:	4770      	bx	lr
 800b0e6:	b298      	uxth	r0, r3
 800b0e8:	b9a8      	cbnz	r0, 800b116 <__lo0bits+0x52>
 800b0ea:	0c1b      	lsrs	r3, r3, #16
 800b0ec:	2010      	movs	r0, #16
 800b0ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b0f2:	bf04      	itt	eq
 800b0f4:	0a1b      	lsreq	r3, r3, #8
 800b0f6:	3008      	addeq	r0, #8
 800b0f8:	071a      	lsls	r2, r3, #28
 800b0fa:	bf04      	itt	eq
 800b0fc:	091b      	lsreq	r3, r3, #4
 800b0fe:	3004      	addeq	r0, #4
 800b100:	079a      	lsls	r2, r3, #30
 800b102:	bf04      	itt	eq
 800b104:	089b      	lsreq	r3, r3, #2
 800b106:	3002      	addeq	r0, #2
 800b108:	07da      	lsls	r2, r3, #31
 800b10a:	d402      	bmi.n	800b112 <__lo0bits+0x4e>
 800b10c:	085b      	lsrs	r3, r3, #1
 800b10e:	d006      	beq.n	800b11e <__lo0bits+0x5a>
 800b110:	3001      	adds	r0, #1
 800b112:	600b      	str	r3, [r1, #0]
 800b114:	4770      	bx	lr
 800b116:	4610      	mov	r0, r2
 800b118:	e7e9      	b.n	800b0ee <__lo0bits+0x2a>
 800b11a:	2000      	movs	r0, #0
 800b11c:	4770      	bx	lr
 800b11e:	2020      	movs	r0, #32
 800b120:	4770      	bx	lr

0800b122 <__i2b>:
 800b122:	b510      	push	{r4, lr}
 800b124:	460c      	mov	r4, r1
 800b126:	2101      	movs	r1, #1
 800b128:	f7ff ff27 	bl	800af7a <_Balloc>
 800b12c:	2201      	movs	r2, #1
 800b12e:	6144      	str	r4, [r0, #20]
 800b130:	6102      	str	r2, [r0, #16]
 800b132:	bd10      	pop	{r4, pc}

0800b134 <__multiply>:
 800b134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	4614      	mov	r4, r2
 800b13a:	690a      	ldr	r2, [r1, #16]
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	429a      	cmp	r2, r3
 800b140:	bfb8      	it	lt
 800b142:	460b      	movlt	r3, r1
 800b144:	4688      	mov	r8, r1
 800b146:	bfbc      	itt	lt
 800b148:	46a0      	movlt	r8, r4
 800b14a:	461c      	movlt	r4, r3
 800b14c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b150:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b154:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b158:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b15c:	eb07 0609 	add.w	r6, r7, r9
 800b160:	42b3      	cmp	r3, r6
 800b162:	bfb8      	it	lt
 800b164:	3101      	addlt	r1, #1
 800b166:	f7ff ff08 	bl	800af7a <_Balloc>
 800b16a:	f100 0514 	add.w	r5, r0, #20
 800b16e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b172:	462b      	mov	r3, r5
 800b174:	2200      	movs	r2, #0
 800b176:	4573      	cmp	r3, lr
 800b178:	d316      	bcc.n	800b1a8 <__multiply+0x74>
 800b17a:	f104 0214 	add.w	r2, r4, #20
 800b17e:	f108 0114 	add.w	r1, r8, #20
 800b182:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b186:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	9b00      	ldr	r3, [sp, #0]
 800b18e:	9201      	str	r2, [sp, #4]
 800b190:	4293      	cmp	r3, r2
 800b192:	d80c      	bhi.n	800b1ae <__multiply+0x7a>
 800b194:	2e00      	cmp	r6, #0
 800b196:	dd03      	ble.n	800b1a0 <__multiply+0x6c>
 800b198:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d05d      	beq.n	800b25c <__multiply+0x128>
 800b1a0:	6106      	str	r6, [r0, #16]
 800b1a2:	b003      	add	sp, #12
 800b1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a8:	f843 2b04 	str.w	r2, [r3], #4
 800b1ac:	e7e3      	b.n	800b176 <__multiply+0x42>
 800b1ae:	f8b2 b000 	ldrh.w	fp, [r2]
 800b1b2:	f1bb 0f00 	cmp.w	fp, #0
 800b1b6:	d023      	beq.n	800b200 <__multiply+0xcc>
 800b1b8:	4689      	mov	r9, r1
 800b1ba:	46ac      	mov	ip, r5
 800b1bc:	f04f 0800 	mov.w	r8, #0
 800b1c0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b1c4:	f8dc a000 	ldr.w	sl, [ip]
 800b1c8:	b2a3      	uxth	r3, r4
 800b1ca:	fa1f fa8a 	uxth.w	sl, sl
 800b1ce:	fb0b a303 	mla	r3, fp, r3, sl
 800b1d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b1d6:	f8dc 4000 	ldr.w	r4, [ip]
 800b1da:	4443      	add	r3, r8
 800b1dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b1e0:	fb0b 840a 	mla	r4, fp, sl, r8
 800b1e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b1e8:	46e2      	mov	sl, ip
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b1f0:	454f      	cmp	r7, r9
 800b1f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b1f6:	f84a 3b04 	str.w	r3, [sl], #4
 800b1fa:	d82b      	bhi.n	800b254 <__multiply+0x120>
 800b1fc:	f8cc 8004 	str.w	r8, [ip, #4]
 800b200:	9b01      	ldr	r3, [sp, #4]
 800b202:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b206:	3204      	adds	r2, #4
 800b208:	f1ba 0f00 	cmp.w	sl, #0
 800b20c:	d020      	beq.n	800b250 <__multiply+0x11c>
 800b20e:	682b      	ldr	r3, [r5, #0]
 800b210:	4689      	mov	r9, r1
 800b212:	46a8      	mov	r8, r5
 800b214:	f04f 0b00 	mov.w	fp, #0
 800b218:	f8b9 c000 	ldrh.w	ip, [r9]
 800b21c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b220:	fb0a 440c 	mla	r4, sl, ip, r4
 800b224:	445c      	add	r4, fp
 800b226:	46c4      	mov	ip, r8
 800b228:	b29b      	uxth	r3, r3
 800b22a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b22e:	f84c 3b04 	str.w	r3, [ip], #4
 800b232:	f859 3b04 	ldr.w	r3, [r9], #4
 800b236:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b23a:	0c1b      	lsrs	r3, r3, #16
 800b23c:	fb0a b303 	mla	r3, sl, r3, fp
 800b240:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b244:	454f      	cmp	r7, r9
 800b246:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b24a:	d805      	bhi.n	800b258 <__multiply+0x124>
 800b24c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b250:	3504      	adds	r5, #4
 800b252:	e79b      	b.n	800b18c <__multiply+0x58>
 800b254:	46d4      	mov	ip, sl
 800b256:	e7b3      	b.n	800b1c0 <__multiply+0x8c>
 800b258:	46e0      	mov	r8, ip
 800b25a:	e7dd      	b.n	800b218 <__multiply+0xe4>
 800b25c:	3e01      	subs	r6, #1
 800b25e:	e799      	b.n	800b194 <__multiply+0x60>

0800b260 <__pow5mult>:
 800b260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b264:	4615      	mov	r5, r2
 800b266:	f012 0203 	ands.w	r2, r2, #3
 800b26a:	4606      	mov	r6, r0
 800b26c:	460f      	mov	r7, r1
 800b26e:	d007      	beq.n	800b280 <__pow5mult+0x20>
 800b270:	3a01      	subs	r2, #1
 800b272:	4c21      	ldr	r4, [pc, #132]	; (800b2f8 <__pow5mult+0x98>)
 800b274:	2300      	movs	r3, #0
 800b276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b27a:	f7ff fec9 	bl	800b010 <__multadd>
 800b27e:	4607      	mov	r7, r0
 800b280:	10ad      	asrs	r5, r5, #2
 800b282:	d035      	beq.n	800b2f0 <__pow5mult+0x90>
 800b284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b286:	b93c      	cbnz	r4, 800b298 <__pow5mult+0x38>
 800b288:	2010      	movs	r0, #16
 800b28a:	f7ff fe63 	bl	800af54 <malloc>
 800b28e:	6270      	str	r0, [r6, #36]	; 0x24
 800b290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b294:	6004      	str	r4, [r0, #0]
 800b296:	60c4      	str	r4, [r0, #12]
 800b298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b29c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2a0:	b94c      	cbnz	r4, 800b2b6 <__pow5mult+0x56>
 800b2a2:	f240 2171 	movw	r1, #625	; 0x271
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7ff ff3b 	bl	800b122 <__i2b>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	6003      	str	r3, [r0, #0]
 800b2b6:	f04f 0800 	mov.w	r8, #0
 800b2ba:	07eb      	lsls	r3, r5, #31
 800b2bc:	d50a      	bpl.n	800b2d4 <__pow5mult+0x74>
 800b2be:	4639      	mov	r1, r7
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7ff ff36 	bl	800b134 <__multiply>
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	4681      	mov	r9, r0
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f7ff fe88 	bl	800afe2 <_Bfree>
 800b2d2:	464f      	mov	r7, r9
 800b2d4:	106d      	asrs	r5, r5, #1
 800b2d6:	d00b      	beq.n	800b2f0 <__pow5mult+0x90>
 800b2d8:	6820      	ldr	r0, [r4, #0]
 800b2da:	b938      	cbnz	r0, 800b2ec <__pow5mult+0x8c>
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7ff ff27 	bl	800b134 <__multiply>
 800b2e6:	6020      	str	r0, [r4, #0]
 800b2e8:	f8c0 8000 	str.w	r8, [r0]
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	e7e4      	b.n	800b2ba <__pow5mult+0x5a>
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	bf00      	nop
 800b2f8:	08011ea8 	.word	0x08011ea8

0800b2fc <__lshift>:
 800b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b300:	460c      	mov	r4, r1
 800b302:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	6849      	ldr	r1, [r1, #4]
 800b30a:	eb0a 0903 	add.w	r9, sl, r3
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	4607      	mov	r7, r0
 800b312:	4616      	mov	r6, r2
 800b314:	f109 0501 	add.w	r5, r9, #1
 800b318:	42ab      	cmp	r3, r5
 800b31a:	db32      	blt.n	800b382 <__lshift+0x86>
 800b31c:	4638      	mov	r0, r7
 800b31e:	f7ff fe2c 	bl	800af7a <_Balloc>
 800b322:	2300      	movs	r3, #0
 800b324:	4680      	mov	r8, r0
 800b326:	f100 0114 	add.w	r1, r0, #20
 800b32a:	461a      	mov	r2, r3
 800b32c:	4553      	cmp	r3, sl
 800b32e:	db2b      	blt.n	800b388 <__lshift+0x8c>
 800b330:	6920      	ldr	r0, [r4, #16]
 800b332:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b336:	f104 0314 	add.w	r3, r4, #20
 800b33a:	f016 021f 	ands.w	r2, r6, #31
 800b33e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b342:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b346:	d025      	beq.n	800b394 <__lshift+0x98>
 800b348:	f1c2 0e20 	rsb	lr, r2, #32
 800b34c:	2000      	movs	r0, #0
 800b34e:	681e      	ldr	r6, [r3, #0]
 800b350:	468a      	mov	sl, r1
 800b352:	4096      	lsls	r6, r2
 800b354:	4330      	orrs	r0, r6
 800b356:	f84a 0b04 	str.w	r0, [sl], #4
 800b35a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b35e:	459c      	cmp	ip, r3
 800b360:	fa20 f00e 	lsr.w	r0, r0, lr
 800b364:	d814      	bhi.n	800b390 <__lshift+0x94>
 800b366:	6048      	str	r0, [r1, #4]
 800b368:	b108      	cbz	r0, 800b36e <__lshift+0x72>
 800b36a:	f109 0502 	add.w	r5, r9, #2
 800b36e:	3d01      	subs	r5, #1
 800b370:	4638      	mov	r0, r7
 800b372:	f8c8 5010 	str.w	r5, [r8, #16]
 800b376:	4621      	mov	r1, r4
 800b378:	f7ff fe33 	bl	800afe2 <_Bfree>
 800b37c:	4640      	mov	r0, r8
 800b37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b382:	3101      	adds	r1, #1
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	e7c7      	b.n	800b318 <__lshift+0x1c>
 800b388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b38c:	3301      	adds	r3, #1
 800b38e:	e7cd      	b.n	800b32c <__lshift+0x30>
 800b390:	4651      	mov	r1, sl
 800b392:	e7dc      	b.n	800b34e <__lshift+0x52>
 800b394:	3904      	subs	r1, #4
 800b396:	f853 2b04 	ldr.w	r2, [r3], #4
 800b39a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b39e:	459c      	cmp	ip, r3
 800b3a0:	d8f9      	bhi.n	800b396 <__lshift+0x9a>
 800b3a2:	e7e4      	b.n	800b36e <__lshift+0x72>

0800b3a4 <__mcmp>:
 800b3a4:	6903      	ldr	r3, [r0, #16]
 800b3a6:	690a      	ldr	r2, [r1, #16]
 800b3a8:	1a9b      	subs	r3, r3, r2
 800b3aa:	b530      	push	{r4, r5, lr}
 800b3ac:	d10c      	bne.n	800b3c8 <__mcmp+0x24>
 800b3ae:	0092      	lsls	r2, r2, #2
 800b3b0:	3014      	adds	r0, #20
 800b3b2:	3114      	adds	r1, #20
 800b3b4:	1884      	adds	r4, r0, r2
 800b3b6:	4411      	add	r1, r2
 800b3b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3c0:	4295      	cmp	r5, r2
 800b3c2:	d003      	beq.n	800b3cc <__mcmp+0x28>
 800b3c4:	d305      	bcc.n	800b3d2 <__mcmp+0x2e>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	bd30      	pop	{r4, r5, pc}
 800b3cc:	42a0      	cmp	r0, r4
 800b3ce:	d3f3      	bcc.n	800b3b8 <__mcmp+0x14>
 800b3d0:	e7fa      	b.n	800b3c8 <__mcmp+0x24>
 800b3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d6:	e7f7      	b.n	800b3c8 <__mcmp+0x24>

0800b3d8 <__mdiff>:
 800b3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3dc:	460d      	mov	r5, r1
 800b3de:	4607      	mov	r7, r0
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	4614      	mov	r4, r2
 800b3e6:	f7ff ffdd 	bl	800b3a4 <__mcmp>
 800b3ea:	1e06      	subs	r6, r0, #0
 800b3ec:	d108      	bne.n	800b400 <__mdiff+0x28>
 800b3ee:	4631      	mov	r1, r6
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff fdc2 	bl	800af7a <_Balloc>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b400:	bfa4      	itt	ge
 800b402:	4623      	movge	r3, r4
 800b404:	462c      	movge	r4, r5
 800b406:	4638      	mov	r0, r7
 800b408:	6861      	ldr	r1, [r4, #4]
 800b40a:	bfa6      	itte	ge
 800b40c:	461d      	movge	r5, r3
 800b40e:	2600      	movge	r6, #0
 800b410:	2601      	movlt	r6, #1
 800b412:	f7ff fdb2 	bl	800af7a <_Balloc>
 800b416:	692b      	ldr	r3, [r5, #16]
 800b418:	60c6      	str	r6, [r0, #12]
 800b41a:	6926      	ldr	r6, [r4, #16]
 800b41c:	f105 0914 	add.w	r9, r5, #20
 800b420:	f104 0214 	add.w	r2, r4, #20
 800b424:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b428:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b42c:	f100 0514 	add.w	r5, r0, #20
 800b430:	f04f 0e00 	mov.w	lr, #0
 800b434:	f852 ab04 	ldr.w	sl, [r2], #4
 800b438:	f859 4b04 	ldr.w	r4, [r9], #4
 800b43c:	fa1e f18a 	uxtah	r1, lr, sl
 800b440:	b2a3      	uxth	r3, r4
 800b442:	1ac9      	subs	r1, r1, r3
 800b444:	0c23      	lsrs	r3, r4, #16
 800b446:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b44a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b44e:	b289      	uxth	r1, r1
 800b450:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b454:	45c8      	cmp	r8, r9
 800b456:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b45a:	4694      	mov	ip, r2
 800b45c:	f845 3b04 	str.w	r3, [r5], #4
 800b460:	d8e8      	bhi.n	800b434 <__mdiff+0x5c>
 800b462:	45bc      	cmp	ip, r7
 800b464:	d304      	bcc.n	800b470 <__mdiff+0x98>
 800b466:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b46a:	b183      	cbz	r3, 800b48e <__mdiff+0xb6>
 800b46c:	6106      	str	r6, [r0, #16]
 800b46e:	e7c5      	b.n	800b3fc <__mdiff+0x24>
 800b470:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b474:	fa1e f381 	uxtah	r3, lr, r1
 800b478:	141a      	asrs	r2, r3, #16
 800b47a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b47e:	b29b      	uxth	r3, r3
 800b480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b484:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b488:	f845 3b04 	str.w	r3, [r5], #4
 800b48c:	e7e9      	b.n	800b462 <__mdiff+0x8a>
 800b48e:	3e01      	subs	r6, #1
 800b490:	e7e9      	b.n	800b466 <__mdiff+0x8e>

0800b492 <__d2b>:
 800b492:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b496:	460e      	mov	r6, r1
 800b498:	2101      	movs	r1, #1
 800b49a:	ec59 8b10 	vmov	r8, r9, d0
 800b49e:	4615      	mov	r5, r2
 800b4a0:	f7ff fd6b 	bl	800af7a <_Balloc>
 800b4a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4ae:	bb34      	cbnz	r4, 800b4fe <__d2b+0x6c>
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	f1b8 0300 	subs.w	r3, r8, #0
 800b4b6:	d027      	beq.n	800b508 <__d2b+0x76>
 800b4b8:	a802      	add	r0, sp, #8
 800b4ba:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b4be:	f7ff fe01 	bl	800b0c4 <__lo0bits>
 800b4c2:	9900      	ldr	r1, [sp, #0]
 800b4c4:	b1f0      	cbz	r0, 800b504 <__d2b+0x72>
 800b4c6:	9a01      	ldr	r2, [sp, #4]
 800b4c8:	f1c0 0320 	rsb	r3, r0, #32
 800b4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d0:	430b      	orrs	r3, r1
 800b4d2:	40c2      	lsrs	r2, r0
 800b4d4:	617b      	str	r3, [r7, #20]
 800b4d6:	9201      	str	r2, [sp, #4]
 800b4d8:	9b01      	ldr	r3, [sp, #4]
 800b4da:	61bb      	str	r3, [r7, #24]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	bf14      	ite	ne
 800b4e0:	2102      	movne	r1, #2
 800b4e2:	2101      	moveq	r1, #1
 800b4e4:	6139      	str	r1, [r7, #16]
 800b4e6:	b1c4      	cbz	r4, 800b51a <__d2b+0x88>
 800b4e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b4ec:	4404      	add	r4, r0
 800b4ee:	6034      	str	r4, [r6, #0]
 800b4f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4f4:	6028      	str	r0, [r5, #0]
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	b003      	add	sp, #12
 800b4fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b502:	e7d5      	b.n	800b4b0 <__d2b+0x1e>
 800b504:	6179      	str	r1, [r7, #20]
 800b506:	e7e7      	b.n	800b4d8 <__d2b+0x46>
 800b508:	a801      	add	r0, sp, #4
 800b50a:	f7ff fddb 	bl	800b0c4 <__lo0bits>
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	2101      	movs	r1, #1
 800b514:	6139      	str	r1, [r7, #16]
 800b516:	3020      	adds	r0, #32
 800b518:	e7e5      	b.n	800b4e6 <__d2b+0x54>
 800b51a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b51e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b522:	6030      	str	r0, [r6, #0]
 800b524:	6918      	ldr	r0, [r3, #16]
 800b526:	f7ff fdae 	bl	800b086 <__hi0bits>
 800b52a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b52e:	e7e1      	b.n	800b4f4 <__d2b+0x62>

0800b530 <_calloc_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	fb02 f401 	mul.w	r4, r2, r1
 800b536:	4621      	mov	r1, r4
 800b538:	f000 f856 	bl	800b5e8 <_malloc_r>
 800b53c:	4605      	mov	r5, r0
 800b53e:	b118      	cbz	r0, 800b548 <_calloc_r+0x18>
 800b540:	4622      	mov	r2, r4
 800b542:	2100      	movs	r1, #0
 800b544:	f7fe fa30 	bl	80099a8 <memset>
 800b548:	4628      	mov	r0, r5
 800b54a:	bd38      	pop	{r3, r4, r5, pc}

0800b54c <_free_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4605      	mov	r5, r0
 800b550:	2900      	cmp	r1, #0
 800b552:	d045      	beq.n	800b5e0 <_free_r+0x94>
 800b554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b558:	1f0c      	subs	r4, r1, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	bfb8      	it	lt
 800b55e:	18e4      	addlt	r4, r4, r3
 800b560:	f000 fa29 	bl	800b9b6 <__malloc_lock>
 800b564:	4a1f      	ldr	r2, [pc, #124]	; (800b5e4 <_free_r+0x98>)
 800b566:	6813      	ldr	r3, [r2, #0]
 800b568:	4610      	mov	r0, r2
 800b56a:	b933      	cbnz	r3, 800b57a <_free_r+0x2e>
 800b56c:	6063      	str	r3, [r4, #4]
 800b56e:	6014      	str	r4, [r2, #0]
 800b570:	4628      	mov	r0, r5
 800b572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b576:	f000 ba1f 	b.w	800b9b8 <__malloc_unlock>
 800b57a:	42a3      	cmp	r3, r4
 800b57c:	d90c      	bls.n	800b598 <_free_r+0x4c>
 800b57e:	6821      	ldr	r1, [r4, #0]
 800b580:	1862      	adds	r2, r4, r1
 800b582:	4293      	cmp	r3, r2
 800b584:	bf04      	itt	eq
 800b586:	681a      	ldreq	r2, [r3, #0]
 800b588:	685b      	ldreq	r3, [r3, #4]
 800b58a:	6063      	str	r3, [r4, #4]
 800b58c:	bf04      	itt	eq
 800b58e:	1852      	addeq	r2, r2, r1
 800b590:	6022      	streq	r2, [r4, #0]
 800b592:	6004      	str	r4, [r0, #0]
 800b594:	e7ec      	b.n	800b570 <_free_r+0x24>
 800b596:	4613      	mov	r3, r2
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	b10a      	cbz	r2, 800b5a0 <_free_r+0x54>
 800b59c:	42a2      	cmp	r2, r4
 800b59e:	d9fa      	bls.n	800b596 <_free_r+0x4a>
 800b5a0:	6819      	ldr	r1, [r3, #0]
 800b5a2:	1858      	adds	r0, r3, r1
 800b5a4:	42a0      	cmp	r0, r4
 800b5a6:	d10b      	bne.n	800b5c0 <_free_r+0x74>
 800b5a8:	6820      	ldr	r0, [r4, #0]
 800b5aa:	4401      	add	r1, r0
 800b5ac:	1858      	adds	r0, r3, r1
 800b5ae:	4282      	cmp	r2, r0
 800b5b0:	6019      	str	r1, [r3, #0]
 800b5b2:	d1dd      	bne.n	800b570 <_free_r+0x24>
 800b5b4:	6810      	ldr	r0, [r2, #0]
 800b5b6:	6852      	ldr	r2, [r2, #4]
 800b5b8:	605a      	str	r2, [r3, #4]
 800b5ba:	4401      	add	r1, r0
 800b5bc:	6019      	str	r1, [r3, #0]
 800b5be:	e7d7      	b.n	800b570 <_free_r+0x24>
 800b5c0:	d902      	bls.n	800b5c8 <_free_r+0x7c>
 800b5c2:	230c      	movs	r3, #12
 800b5c4:	602b      	str	r3, [r5, #0]
 800b5c6:	e7d3      	b.n	800b570 <_free_r+0x24>
 800b5c8:	6820      	ldr	r0, [r4, #0]
 800b5ca:	1821      	adds	r1, r4, r0
 800b5cc:	428a      	cmp	r2, r1
 800b5ce:	bf04      	itt	eq
 800b5d0:	6811      	ldreq	r1, [r2, #0]
 800b5d2:	6852      	ldreq	r2, [r2, #4]
 800b5d4:	6062      	str	r2, [r4, #4]
 800b5d6:	bf04      	itt	eq
 800b5d8:	1809      	addeq	r1, r1, r0
 800b5da:	6021      	streq	r1, [r4, #0]
 800b5dc:	605c      	str	r4, [r3, #4]
 800b5de:	e7c7      	b.n	800b570 <_free_r+0x24>
 800b5e0:	bd38      	pop	{r3, r4, r5, pc}
 800b5e2:	bf00      	nop
 800b5e4:	2000023c 	.word	0x2000023c

0800b5e8 <_malloc_r>:
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	1ccd      	adds	r5, r1, #3
 800b5ec:	f025 0503 	bic.w	r5, r5, #3
 800b5f0:	3508      	adds	r5, #8
 800b5f2:	2d0c      	cmp	r5, #12
 800b5f4:	bf38      	it	cc
 800b5f6:	250c      	movcc	r5, #12
 800b5f8:	2d00      	cmp	r5, #0
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	db01      	blt.n	800b602 <_malloc_r+0x1a>
 800b5fe:	42a9      	cmp	r1, r5
 800b600:	d903      	bls.n	800b60a <_malloc_r+0x22>
 800b602:	230c      	movs	r3, #12
 800b604:	6033      	str	r3, [r6, #0]
 800b606:	2000      	movs	r0, #0
 800b608:	bd70      	pop	{r4, r5, r6, pc}
 800b60a:	f000 f9d4 	bl	800b9b6 <__malloc_lock>
 800b60e:	4a21      	ldr	r2, [pc, #132]	; (800b694 <_malloc_r+0xac>)
 800b610:	6814      	ldr	r4, [r2, #0]
 800b612:	4621      	mov	r1, r4
 800b614:	b991      	cbnz	r1, 800b63c <_malloc_r+0x54>
 800b616:	4c20      	ldr	r4, [pc, #128]	; (800b698 <_malloc_r+0xb0>)
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	b91b      	cbnz	r3, 800b624 <_malloc_r+0x3c>
 800b61c:	4630      	mov	r0, r6
 800b61e:	f000 f98f 	bl	800b940 <_sbrk_r>
 800b622:	6020      	str	r0, [r4, #0]
 800b624:	4629      	mov	r1, r5
 800b626:	4630      	mov	r0, r6
 800b628:	f000 f98a 	bl	800b940 <_sbrk_r>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d124      	bne.n	800b67a <_malloc_r+0x92>
 800b630:	230c      	movs	r3, #12
 800b632:	6033      	str	r3, [r6, #0]
 800b634:	4630      	mov	r0, r6
 800b636:	f000 f9bf 	bl	800b9b8 <__malloc_unlock>
 800b63a:	e7e4      	b.n	800b606 <_malloc_r+0x1e>
 800b63c:	680b      	ldr	r3, [r1, #0]
 800b63e:	1b5b      	subs	r3, r3, r5
 800b640:	d418      	bmi.n	800b674 <_malloc_r+0x8c>
 800b642:	2b0b      	cmp	r3, #11
 800b644:	d90f      	bls.n	800b666 <_malloc_r+0x7e>
 800b646:	600b      	str	r3, [r1, #0]
 800b648:	50cd      	str	r5, [r1, r3]
 800b64a:	18cc      	adds	r4, r1, r3
 800b64c:	4630      	mov	r0, r6
 800b64e:	f000 f9b3 	bl	800b9b8 <__malloc_unlock>
 800b652:	f104 000b 	add.w	r0, r4, #11
 800b656:	1d23      	adds	r3, r4, #4
 800b658:	f020 0007 	bic.w	r0, r0, #7
 800b65c:	1ac3      	subs	r3, r0, r3
 800b65e:	d0d3      	beq.n	800b608 <_malloc_r+0x20>
 800b660:	425a      	negs	r2, r3
 800b662:	50e2      	str	r2, [r4, r3]
 800b664:	e7d0      	b.n	800b608 <_malloc_r+0x20>
 800b666:	428c      	cmp	r4, r1
 800b668:	684b      	ldr	r3, [r1, #4]
 800b66a:	bf16      	itet	ne
 800b66c:	6063      	strne	r3, [r4, #4]
 800b66e:	6013      	streq	r3, [r2, #0]
 800b670:	460c      	movne	r4, r1
 800b672:	e7eb      	b.n	800b64c <_malloc_r+0x64>
 800b674:	460c      	mov	r4, r1
 800b676:	6849      	ldr	r1, [r1, #4]
 800b678:	e7cc      	b.n	800b614 <_malloc_r+0x2c>
 800b67a:	1cc4      	adds	r4, r0, #3
 800b67c:	f024 0403 	bic.w	r4, r4, #3
 800b680:	42a0      	cmp	r0, r4
 800b682:	d005      	beq.n	800b690 <_malloc_r+0xa8>
 800b684:	1a21      	subs	r1, r4, r0
 800b686:	4630      	mov	r0, r6
 800b688:	f000 f95a 	bl	800b940 <_sbrk_r>
 800b68c:	3001      	adds	r0, #1
 800b68e:	d0cf      	beq.n	800b630 <_malloc_r+0x48>
 800b690:	6025      	str	r5, [r4, #0]
 800b692:	e7db      	b.n	800b64c <_malloc_r+0x64>
 800b694:	2000023c 	.word	0x2000023c
 800b698:	20000240 	.word	0x20000240

0800b69c <__ssputs_r>:
 800b69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a0:	688e      	ldr	r6, [r1, #8]
 800b6a2:	429e      	cmp	r6, r3
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	4690      	mov	r8, r2
 800b6aa:	4699      	mov	r9, r3
 800b6ac:	d837      	bhi.n	800b71e <__ssputs_r+0x82>
 800b6ae:	898a      	ldrh	r2, [r1, #12]
 800b6b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6b4:	d031      	beq.n	800b71a <__ssputs_r+0x7e>
 800b6b6:	6825      	ldr	r5, [r4, #0]
 800b6b8:	6909      	ldr	r1, [r1, #16]
 800b6ba:	1a6f      	subs	r7, r5, r1
 800b6bc:	6965      	ldr	r5, [r4, #20]
 800b6be:	2302      	movs	r3, #2
 800b6c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b6c8:	f109 0301 	add.w	r3, r9, #1
 800b6cc:	443b      	add	r3, r7
 800b6ce:	429d      	cmp	r5, r3
 800b6d0:	bf38      	it	cc
 800b6d2:	461d      	movcc	r5, r3
 800b6d4:	0553      	lsls	r3, r2, #21
 800b6d6:	d530      	bpl.n	800b73a <__ssputs_r+0x9e>
 800b6d8:	4629      	mov	r1, r5
 800b6da:	f7ff ff85 	bl	800b5e8 <_malloc_r>
 800b6de:	4606      	mov	r6, r0
 800b6e0:	b950      	cbnz	r0, 800b6f8 <__ssputs_r+0x5c>
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	f8ca 3000 	str.w	r3, [sl]
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f8:	463a      	mov	r2, r7
 800b6fa:	6921      	ldr	r1, [r4, #16]
 800b6fc:	f7ff fc32 	bl	800af64 <memcpy>
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b70a:	81a3      	strh	r3, [r4, #12]
 800b70c:	6126      	str	r6, [r4, #16]
 800b70e:	6165      	str	r5, [r4, #20]
 800b710:	443e      	add	r6, r7
 800b712:	1bed      	subs	r5, r5, r7
 800b714:	6026      	str	r6, [r4, #0]
 800b716:	60a5      	str	r5, [r4, #8]
 800b718:	464e      	mov	r6, r9
 800b71a:	454e      	cmp	r6, r9
 800b71c:	d900      	bls.n	800b720 <__ssputs_r+0x84>
 800b71e:	464e      	mov	r6, r9
 800b720:	4632      	mov	r2, r6
 800b722:	4641      	mov	r1, r8
 800b724:	6820      	ldr	r0, [r4, #0]
 800b726:	f000 f92d 	bl	800b984 <memmove>
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	1b9b      	subs	r3, r3, r6
 800b72e:	60a3      	str	r3, [r4, #8]
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	441e      	add	r6, r3
 800b734:	6026      	str	r6, [r4, #0]
 800b736:	2000      	movs	r0, #0
 800b738:	e7dc      	b.n	800b6f4 <__ssputs_r+0x58>
 800b73a:	462a      	mov	r2, r5
 800b73c:	f000 f93d 	bl	800b9ba <_realloc_r>
 800b740:	4606      	mov	r6, r0
 800b742:	2800      	cmp	r0, #0
 800b744:	d1e2      	bne.n	800b70c <__ssputs_r+0x70>
 800b746:	6921      	ldr	r1, [r4, #16]
 800b748:	4650      	mov	r0, sl
 800b74a:	f7ff feff 	bl	800b54c <_free_r>
 800b74e:	e7c8      	b.n	800b6e2 <__ssputs_r+0x46>

0800b750 <_svfiprintf_r>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	461d      	mov	r5, r3
 800b756:	898b      	ldrh	r3, [r1, #12]
 800b758:	061f      	lsls	r7, r3, #24
 800b75a:	b09d      	sub	sp, #116	; 0x74
 800b75c:	4680      	mov	r8, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	4616      	mov	r6, r2
 800b762:	d50f      	bpl.n	800b784 <_svfiprintf_r+0x34>
 800b764:	690b      	ldr	r3, [r1, #16]
 800b766:	b96b      	cbnz	r3, 800b784 <_svfiprintf_r+0x34>
 800b768:	2140      	movs	r1, #64	; 0x40
 800b76a:	f7ff ff3d 	bl	800b5e8 <_malloc_r>
 800b76e:	6020      	str	r0, [r4, #0]
 800b770:	6120      	str	r0, [r4, #16]
 800b772:	b928      	cbnz	r0, 800b780 <_svfiprintf_r+0x30>
 800b774:	230c      	movs	r3, #12
 800b776:	f8c8 3000 	str.w	r3, [r8]
 800b77a:	f04f 30ff 	mov.w	r0, #4294967295
 800b77e:	e0c8      	b.n	800b912 <_svfiprintf_r+0x1c2>
 800b780:	2340      	movs	r3, #64	; 0x40
 800b782:	6163      	str	r3, [r4, #20]
 800b784:	2300      	movs	r3, #0
 800b786:	9309      	str	r3, [sp, #36]	; 0x24
 800b788:	2320      	movs	r3, #32
 800b78a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b78e:	2330      	movs	r3, #48	; 0x30
 800b790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b794:	9503      	str	r5, [sp, #12]
 800b796:	f04f 0b01 	mov.w	fp, #1
 800b79a:	4637      	mov	r7, r6
 800b79c:	463d      	mov	r5, r7
 800b79e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7a2:	b10b      	cbz	r3, 800b7a8 <_svfiprintf_r+0x58>
 800b7a4:	2b25      	cmp	r3, #37	; 0x25
 800b7a6:	d13e      	bne.n	800b826 <_svfiprintf_r+0xd6>
 800b7a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b7ac:	d00b      	beq.n	800b7c6 <_svfiprintf_r+0x76>
 800b7ae:	4653      	mov	r3, sl
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	f7ff ff71 	bl	800b69c <__ssputs_r>
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	f000 80a4 	beq.w	800b908 <_svfiprintf_r+0x1b8>
 800b7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c2:	4453      	add	r3, sl
 800b7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c6:	783b      	ldrb	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 809d 	beq.w	800b908 <_svfiprintf_r+0x1b8>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	9307      	str	r3, [sp, #28]
 800b7dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7e0:	931a      	str	r3, [sp, #104]	; 0x68
 800b7e2:	462f      	mov	r7, r5
 800b7e4:	2205      	movs	r2, #5
 800b7e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b7ea:	4850      	ldr	r0, [pc, #320]	; (800b92c <_svfiprintf_r+0x1dc>)
 800b7ec:	f7f4 fd78 	bl	80002e0 <memchr>
 800b7f0:	9b04      	ldr	r3, [sp, #16]
 800b7f2:	b9d0      	cbnz	r0, 800b82a <_svfiprintf_r+0xda>
 800b7f4:	06d9      	lsls	r1, r3, #27
 800b7f6:	bf44      	itt	mi
 800b7f8:	2220      	movmi	r2, #32
 800b7fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b7fe:	071a      	lsls	r2, r3, #28
 800b800:	bf44      	itt	mi
 800b802:	222b      	movmi	r2, #43	; 0x2b
 800b804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b808:	782a      	ldrb	r2, [r5, #0]
 800b80a:	2a2a      	cmp	r2, #42	; 0x2a
 800b80c:	d015      	beq.n	800b83a <_svfiprintf_r+0xea>
 800b80e:	9a07      	ldr	r2, [sp, #28]
 800b810:	462f      	mov	r7, r5
 800b812:	2000      	movs	r0, #0
 800b814:	250a      	movs	r5, #10
 800b816:	4639      	mov	r1, r7
 800b818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b81c:	3b30      	subs	r3, #48	; 0x30
 800b81e:	2b09      	cmp	r3, #9
 800b820:	d94d      	bls.n	800b8be <_svfiprintf_r+0x16e>
 800b822:	b1b8      	cbz	r0, 800b854 <_svfiprintf_r+0x104>
 800b824:	e00f      	b.n	800b846 <_svfiprintf_r+0xf6>
 800b826:	462f      	mov	r7, r5
 800b828:	e7b8      	b.n	800b79c <_svfiprintf_r+0x4c>
 800b82a:	4a40      	ldr	r2, [pc, #256]	; (800b92c <_svfiprintf_r+0x1dc>)
 800b82c:	1a80      	subs	r0, r0, r2
 800b82e:	fa0b f000 	lsl.w	r0, fp, r0
 800b832:	4318      	orrs	r0, r3
 800b834:	9004      	str	r0, [sp, #16]
 800b836:	463d      	mov	r5, r7
 800b838:	e7d3      	b.n	800b7e2 <_svfiprintf_r+0x92>
 800b83a:	9a03      	ldr	r2, [sp, #12]
 800b83c:	1d11      	adds	r1, r2, #4
 800b83e:	6812      	ldr	r2, [r2, #0]
 800b840:	9103      	str	r1, [sp, #12]
 800b842:	2a00      	cmp	r2, #0
 800b844:	db01      	blt.n	800b84a <_svfiprintf_r+0xfa>
 800b846:	9207      	str	r2, [sp, #28]
 800b848:	e004      	b.n	800b854 <_svfiprintf_r+0x104>
 800b84a:	4252      	negs	r2, r2
 800b84c:	f043 0302 	orr.w	r3, r3, #2
 800b850:	9207      	str	r2, [sp, #28]
 800b852:	9304      	str	r3, [sp, #16]
 800b854:	783b      	ldrb	r3, [r7, #0]
 800b856:	2b2e      	cmp	r3, #46	; 0x2e
 800b858:	d10c      	bne.n	800b874 <_svfiprintf_r+0x124>
 800b85a:	787b      	ldrb	r3, [r7, #1]
 800b85c:	2b2a      	cmp	r3, #42	; 0x2a
 800b85e:	d133      	bne.n	800b8c8 <_svfiprintf_r+0x178>
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	1d1a      	adds	r2, r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	9203      	str	r2, [sp, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	bfb8      	it	lt
 800b86c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b870:	3702      	adds	r7, #2
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	4d2e      	ldr	r5, [pc, #184]	; (800b930 <_svfiprintf_r+0x1e0>)
 800b876:	7839      	ldrb	r1, [r7, #0]
 800b878:	2203      	movs	r2, #3
 800b87a:	4628      	mov	r0, r5
 800b87c:	f7f4 fd30 	bl	80002e0 <memchr>
 800b880:	b138      	cbz	r0, 800b892 <_svfiprintf_r+0x142>
 800b882:	2340      	movs	r3, #64	; 0x40
 800b884:	1b40      	subs	r0, r0, r5
 800b886:	fa03 f000 	lsl.w	r0, r3, r0
 800b88a:	9b04      	ldr	r3, [sp, #16]
 800b88c:	4303      	orrs	r3, r0
 800b88e:	3701      	adds	r7, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	7839      	ldrb	r1, [r7, #0]
 800b894:	4827      	ldr	r0, [pc, #156]	; (800b934 <_svfiprintf_r+0x1e4>)
 800b896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b89a:	2206      	movs	r2, #6
 800b89c:	1c7e      	adds	r6, r7, #1
 800b89e:	f7f4 fd1f 	bl	80002e0 <memchr>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d038      	beq.n	800b918 <_svfiprintf_r+0x1c8>
 800b8a6:	4b24      	ldr	r3, [pc, #144]	; (800b938 <_svfiprintf_r+0x1e8>)
 800b8a8:	bb13      	cbnz	r3, 800b8f0 <_svfiprintf_r+0x1a0>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	3307      	adds	r3, #7
 800b8ae:	f023 0307 	bic.w	r3, r3, #7
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b8:	444b      	add	r3, r9
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	e76d      	b.n	800b79a <_svfiprintf_r+0x4a>
 800b8be:	fb05 3202 	mla	r2, r5, r2, r3
 800b8c2:	2001      	movs	r0, #1
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	e7a6      	b.n	800b816 <_svfiprintf_r+0xc6>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	3701      	adds	r7, #1
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	250a      	movs	r5, #10
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8d8:	3a30      	subs	r2, #48	; 0x30
 800b8da:	2a09      	cmp	r2, #9
 800b8dc:	d903      	bls.n	800b8e6 <_svfiprintf_r+0x196>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0c8      	beq.n	800b874 <_svfiprintf_r+0x124>
 800b8e2:	9105      	str	r1, [sp, #20]
 800b8e4:	e7c6      	b.n	800b874 <_svfiprintf_r+0x124>
 800b8e6:	fb05 2101 	mla	r1, r5, r1, r2
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	e7f0      	b.n	800b8d2 <_svfiprintf_r+0x182>
 800b8f0:	ab03      	add	r3, sp, #12
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	4b11      	ldr	r3, [pc, #68]	; (800b93c <_svfiprintf_r+0x1ec>)
 800b8f8:	a904      	add	r1, sp, #16
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	f7fe f8f0 	bl	8009ae0 <_printf_float>
 800b900:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b904:	4681      	mov	r9, r0
 800b906:	d1d6      	bne.n	800b8b6 <_svfiprintf_r+0x166>
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	065b      	lsls	r3, r3, #25
 800b90c:	f53f af35 	bmi.w	800b77a <_svfiprintf_r+0x2a>
 800b910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b912:	b01d      	add	sp, #116	; 0x74
 800b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	ab03      	add	r3, sp, #12
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	4622      	mov	r2, r4
 800b91e:	4b07      	ldr	r3, [pc, #28]	; (800b93c <_svfiprintf_r+0x1ec>)
 800b920:	a904      	add	r1, sp, #16
 800b922:	4640      	mov	r0, r8
 800b924:	f7fe fb92 	bl	800a04c <_printf_i>
 800b928:	e7ea      	b.n	800b900 <_svfiprintf_r+0x1b0>
 800b92a:	bf00      	nop
 800b92c:	08011eb4 	.word	0x08011eb4
 800b930:	08011eba 	.word	0x08011eba
 800b934:	08011ebe 	.word	0x08011ebe
 800b938:	08009ae1 	.word	0x08009ae1
 800b93c:	0800b69d 	.word	0x0800b69d

0800b940 <_sbrk_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4c06      	ldr	r4, [pc, #24]	; (800b95c <_sbrk_r+0x1c>)
 800b944:	2300      	movs	r3, #0
 800b946:	4605      	mov	r5, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	f7f9 ff18 	bl	8005780 <_sbrk>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_sbrk_r+0x1a>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	b103      	cbz	r3, 800b95a <_sbrk_r+0x1a>
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	200149d4 	.word	0x200149d4

0800b960 <__ascii_mbtowc>:
 800b960:	b082      	sub	sp, #8
 800b962:	b901      	cbnz	r1, 800b966 <__ascii_mbtowc+0x6>
 800b964:	a901      	add	r1, sp, #4
 800b966:	b142      	cbz	r2, 800b97a <__ascii_mbtowc+0x1a>
 800b968:	b14b      	cbz	r3, 800b97e <__ascii_mbtowc+0x1e>
 800b96a:	7813      	ldrb	r3, [r2, #0]
 800b96c:	600b      	str	r3, [r1, #0]
 800b96e:	7812      	ldrb	r2, [r2, #0]
 800b970:	1c10      	adds	r0, r2, #0
 800b972:	bf18      	it	ne
 800b974:	2001      	movne	r0, #1
 800b976:	b002      	add	sp, #8
 800b978:	4770      	bx	lr
 800b97a:	4610      	mov	r0, r2
 800b97c:	e7fb      	b.n	800b976 <__ascii_mbtowc+0x16>
 800b97e:	f06f 0001 	mvn.w	r0, #1
 800b982:	e7f8      	b.n	800b976 <__ascii_mbtowc+0x16>

0800b984 <memmove>:
 800b984:	4288      	cmp	r0, r1
 800b986:	b510      	push	{r4, lr}
 800b988:	eb01 0302 	add.w	r3, r1, r2
 800b98c:	d807      	bhi.n	800b99e <memmove+0x1a>
 800b98e:	1e42      	subs	r2, r0, #1
 800b990:	4299      	cmp	r1, r3
 800b992:	d00a      	beq.n	800b9aa <memmove+0x26>
 800b994:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b998:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b99c:	e7f8      	b.n	800b990 <memmove+0xc>
 800b99e:	4283      	cmp	r3, r0
 800b9a0:	d9f5      	bls.n	800b98e <memmove+0xa>
 800b9a2:	1881      	adds	r1, r0, r2
 800b9a4:	1ad2      	subs	r2, r2, r3
 800b9a6:	42d3      	cmn	r3, r2
 800b9a8:	d100      	bne.n	800b9ac <memmove+0x28>
 800b9aa:	bd10      	pop	{r4, pc}
 800b9ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b9b4:	e7f7      	b.n	800b9a6 <memmove+0x22>

0800b9b6 <__malloc_lock>:
 800b9b6:	4770      	bx	lr

0800b9b8 <__malloc_unlock>:
 800b9b8:	4770      	bx	lr

0800b9ba <_realloc_r>:
 800b9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9bc:	4607      	mov	r7, r0
 800b9be:	4614      	mov	r4, r2
 800b9c0:	460e      	mov	r6, r1
 800b9c2:	b921      	cbnz	r1, 800b9ce <_realloc_r+0x14>
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b9ca:	f7ff be0d 	b.w	800b5e8 <_malloc_r>
 800b9ce:	b922      	cbnz	r2, 800b9da <_realloc_r+0x20>
 800b9d0:	f7ff fdbc 	bl	800b54c <_free_r>
 800b9d4:	4625      	mov	r5, r4
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9da:	f000 f821 	bl	800ba20 <_malloc_usable_size_r>
 800b9de:	42a0      	cmp	r0, r4
 800b9e0:	d20f      	bcs.n	800ba02 <_realloc_r+0x48>
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	f7ff fdff 	bl	800b5e8 <_malloc_r>
 800b9ea:	4605      	mov	r5, r0
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d0f2      	beq.n	800b9d6 <_realloc_r+0x1c>
 800b9f0:	4631      	mov	r1, r6
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	f7ff fab6 	bl	800af64 <memcpy>
 800b9f8:	4631      	mov	r1, r6
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	f7ff fda6 	bl	800b54c <_free_r>
 800ba00:	e7e9      	b.n	800b9d6 <_realloc_r+0x1c>
 800ba02:	4635      	mov	r5, r6
 800ba04:	e7e7      	b.n	800b9d6 <_realloc_r+0x1c>

0800ba06 <__ascii_wctomb>:
 800ba06:	b149      	cbz	r1, 800ba1c <__ascii_wctomb+0x16>
 800ba08:	2aff      	cmp	r2, #255	; 0xff
 800ba0a:	bf85      	ittet	hi
 800ba0c:	238a      	movhi	r3, #138	; 0x8a
 800ba0e:	6003      	strhi	r3, [r0, #0]
 800ba10:	700a      	strbls	r2, [r1, #0]
 800ba12:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba16:	bf98      	it	ls
 800ba18:	2001      	movls	r0, #1
 800ba1a:	4770      	bx	lr
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4770      	bx	lr

0800ba20 <_malloc_usable_size_r>:
 800ba20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba24:	1f18      	subs	r0, r3, #4
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfbc      	itt	lt
 800ba2a:	580b      	ldrlt	r3, [r1, r0]
 800ba2c:	18c0      	addlt	r0, r0, r3
 800ba2e:	4770      	bx	lr

0800ba30 <sqrt>:
 800ba30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba34:	ed2d 8b02 	vpush	{d8}
 800ba38:	b08b      	sub	sp, #44	; 0x2c
 800ba3a:	ec55 4b10 	vmov	r4, r5, d0
 800ba3e:	f000 f8a1 	bl	800bb84 <__ieee754_sqrt>
 800ba42:	4b26      	ldr	r3, [pc, #152]	; (800badc <sqrt+0xac>)
 800ba44:	eeb0 8a40 	vmov.f32	s16, s0
 800ba48:	eef0 8a60 	vmov.f32	s17, s1
 800ba4c:	f993 6000 	ldrsb.w	r6, [r3]
 800ba50:	1c73      	adds	r3, r6, #1
 800ba52:	d02a      	beq.n	800baaa <sqrt+0x7a>
 800ba54:	4622      	mov	r2, r4
 800ba56:	462b      	mov	r3, r5
 800ba58:	4620      	mov	r0, r4
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	f7f5 f8e6 	bl	8000c2c <__aeabi_dcmpun>
 800ba60:	4607      	mov	r7, r0
 800ba62:	bb10      	cbnz	r0, 800baaa <sqrt+0x7a>
 800ba64:	f04f 0800 	mov.w	r8, #0
 800ba68:	f04f 0900 	mov.w	r9, #0
 800ba6c:	4642      	mov	r2, r8
 800ba6e:	464b      	mov	r3, r9
 800ba70:	4620      	mov	r0, r4
 800ba72:	4629      	mov	r1, r5
 800ba74:	f7f5 f8b2 	bl	8000bdc <__aeabi_dcmplt>
 800ba78:	b1b8      	cbz	r0, 800baaa <sqrt+0x7a>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	4b18      	ldr	r3, [pc, #96]	; (800bae0 <sqrt+0xb0>)
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	9708      	str	r7, [sp, #32]
 800ba84:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ba88:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ba8c:	b9b6      	cbnz	r6, 800babc <sqrt+0x8c>
 800ba8e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ba92:	4668      	mov	r0, sp
 800ba94:	f000 f929 	bl	800bcea <matherr>
 800ba98:	b1d0      	cbz	r0, 800bad0 <sqrt+0xa0>
 800ba9a:	9b08      	ldr	r3, [sp, #32]
 800ba9c:	b11b      	cbz	r3, 800baa6 <sqrt+0x76>
 800ba9e:	f7fd ff59 	bl	8009954 <__errno>
 800baa2:	9b08      	ldr	r3, [sp, #32]
 800baa4:	6003      	str	r3, [r0, #0]
 800baa6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800baaa:	eeb0 0a48 	vmov.f32	s0, s16
 800baae:	eef0 0a68 	vmov.f32	s1, s17
 800bab2:	b00b      	add	sp, #44	; 0x2c
 800bab4:	ecbd 8b02 	vpop	{d8}
 800bab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800babc:	4642      	mov	r2, r8
 800babe:	464b      	mov	r3, r9
 800bac0:	4640      	mov	r0, r8
 800bac2:	4649      	mov	r1, r9
 800bac4:	f7f4 ff42 	bl	800094c <__aeabi_ddiv>
 800bac8:	2e02      	cmp	r6, #2
 800baca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bace:	d1e0      	bne.n	800ba92 <sqrt+0x62>
 800bad0:	f7fd ff40 	bl	8009954 <__errno>
 800bad4:	2321      	movs	r3, #33	; 0x21
 800bad6:	6003      	str	r3, [r0, #0]
 800bad8:	e7df      	b.n	800ba9a <sqrt+0x6a>
 800bada:	bf00      	nop
 800badc:	200001f0 	.word	0x200001f0
 800bae0:	08011fd0 	.word	0x08011fd0

0800bae4 <sqrtf>:
 800bae4:	b510      	push	{r4, lr}
 800bae6:	ed2d 8b02 	vpush	{d8}
 800baea:	b08a      	sub	sp, #40	; 0x28
 800baec:	eeb0 8a40 	vmov.f32	s16, s0
 800baf0:	f000 f8f8 	bl	800bce4 <__ieee754_sqrtf>
 800baf4:	4b21      	ldr	r3, [pc, #132]	; (800bb7c <sqrtf+0x98>)
 800baf6:	f993 4000 	ldrsb.w	r4, [r3]
 800bafa:	1c63      	adds	r3, r4, #1
 800bafc:	d02c      	beq.n	800bb58 <sqrtf+0x74>
 800bafe:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb06:	d627      	bvs.n	800bb58 <sqrtf+0x74>
 800bb08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb10:	d522      	bpl.n	800bb58 <sqrtf+0x74>
 800bb12:	2301      	movs	r3, #1
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	4b1a      	ldr	r3, [pc, #104]	; (800bb80 <sqrtf+0x9c>)
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	ee18 0a10 	vmov	r0, s16
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9308      	str	r3, [sp, #32]
 800bb22:	f7f4 fd91 	bl	8000648 <__aeabi_f2d>
 800bb26:	2200      	movs	r2, #0
 800bb28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb30:	2300      	movs	r3, #0
 800bb32:	b9ac      	cbnz	r4, 800bb60 <sqrtf+0x7c>
 800bb34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb38:	4668      	mov	r0, sp
 800bb3a:	f000 f8d6 	bl	800bcea <matherr>
 800bb3e:	b1b8      	cbz	r0, 800bb70 <sqrtf+0x8c>
 800bb40:	9b08      	ldr	r3, [sp, #32]
 800bb42:	b11b      	cbz	r3, 800bb4c <sqrtf+0x68>
 800bb44:	f7fd ff06 	bl	8009954 <__errno>
 800bb48:	9b08      	ldr	r3, [sp, #32]
 800bb4a:	6003      	str	r3, [r0, #0]
 800bb4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb50:	f7f5 f8aa 	bl	8000ca8 <__aeabi_d2f>
 800bb54:	ee00 0a10 	vmov	s0, r0
 800bb58:	b00a      	add	sp, #40	; 0x28
 800bb5a:	ecbd 8b02 	vpop	{d8}
 800bb5e:	bd10      	pop	{r4, pc}
 800bb60:	4610      	mov	r0, r2
 800bb62:	4619      	mov	r1, r3
 800bb64:	f7f4 fef2 	bl	800094c <__aeabi_ddiv>
 800bb68:	2c02      	cmp	r4, #2
 800bb6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb6e:	d1e3      	bne.n	800bb38 <sqrtf+0x54>
 800bb70:	f7fd fef0 	bl	8009954 <__errno>
 800bb74:	2321      	movs	r3, #33	; 0x21
 800bb76:	6003      	str	r3, [r0, #0]
 800bb78:	e7e2      	b.n	800bb40 <sqrtf+0x5c>
 800bb7a:	bf00      	nop
 800bb7c:	200001f0 	.word	0x200001f0
 800bb80:	08011fd5 	.word	0x08011fd5

0800bb84 <__ieee754_sqrt>:
 800bb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb88:	4955      	ldr	r1, [pc, #340]	; (800bce0 <__ieee754_sqrt+0x15c>)
 800bb8a:	ec55 4b10 	vmov	r4, r5, d0
 800bb8e:	43a9      	bics	r1, r5
 800bb90:	462b      	mov	r3, r5
 800bb92:	462a      	mov	r2, r5
 800bb94:	d112      	bne.n	800bbbc <__ieee754_sqrt+0x38>
 800bb96:	ee10 2a10 	vmov	r2, s0
 800bb9a:	ee10 0a10 	vmov	r0, s0
 800bb9e:	4629      	mov	r1, r5
 800bba0:	f7f4 fdaa 	bl	80006f8 <__aeabi_dmul>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4620      	mov	r0, r4
 800bbaa:	4629      	mov	r1, r5
 800bbac:	f7f4 fbee 	bl	800038c <__adddf3>
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	ec45 4b10 	vmov	d0, r4, r5
 800bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbbc:	2d00      	cmp	r5, #0
 800bbbe:	ee10 0a10 	vmov	r0, s0
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	dc0f      	bgt.n	800bbe6 <__ieee754_sqrt+0x62>
 800bbc6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bbca:	4330      	orrs	r0, r6
 800bbcc:	d0f2      	beq.n	800bbb4 <__ieee754_sqrt+0x30>
 800bbce:	b155      	cbz	r5, 800bbe6 <__ieee754_sqrt+0x62>
 800bbd0:	ee10 2a10 	vmov	r2, s0
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	4629      	mov	r1, r5
 800bbd8:	f7f4 fbd6 	bl	8000388 <__aeabi_dsub>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	460b      	mov	r3, r1
 800bbe0:	f7f4 feb4 	bl	800094c <__aeabi_ddiv>
 800bbe4:	e7e4      	b.n	800bbb0 <__ieee754_sqrt+0x2c>
 800bbe6:	151b      	asrs	r3, r3, #20
 800bbe8:	d073      	beq.n	800bcd2 <__ieee754_sqrt+0x14e>
 800bbea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bbee:	07dd      	lsls	r5, r3, #31
 800bbf0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bbf4:	bf48      	it	mi
 800bbf6:	0fc8      	lsrmi	r0, r1, #31
 800bbf8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bbfc:	bf44      	itt	mi
 800bbfe:	0049      	lslmi	r1, r1, #1
 800bc00:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800bc04:	2500      	movs	r5, #0
 800bc06:	1058      	asrs	r0, r3, #1
 800bc08:	0fcb      	lsrs	r3, r1, #31
 800bc0a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800bc0e:	0049      	lsls	r1, r1, #1
 800bc10:	2316      	movs	r3, #22
 800bc12:	462c      	mov	r4, r5
 800bc14:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bc18:	19a7      	adds	r7, r4, r6
 800bc1a:	4297      	cmp	r7, r2
 800bc1c:	bfde      	ittt	le
 800bc1e:	19bc      	addle	r4, r7, r6
 800bc20:	1bd2      	suble	r2, r2, r7
 800bc22:	19ad      	addle	r5, r5, r6
 800bc24:	0fcf      	lsrs	r7, r1, #31
 800bc26:	3b01      	subs	r3, #1
 800bc28:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800bc2c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc34:	d1f0      	bne.n	800bc18 <__ieee754_sqrt+0x94>
 800bc36:	f04f 0c20 	mov.w	ip, #32
 800bc3a:	469e      	mov	lr, r3
 800bc3c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bc40:	42a2      	cmp	r2, r4
 800bc42:	eb06 070e 	add.w	r7, r6, lr
 800bc46:	dc02      	bgt.n	800bc4e <__ieee754_sqrt+0xca>
 800bc48:	d112      	bne.n	800bc70 <__ieee754_sqrt+0xec>
 800bc4a:	428f      	cmp	r7, r1
 800bc4c:	d810      	bhi.n	800bc70 <__ieee754_sqrt+0xec>
 800bc4e:	2f00      	cmp	r7, #0
 800bc50:	eb07 0e06 	add.w	lr, r7, r6
 800bc54:	da42      	bge.n	800bcdc <__ieee754_sqrt+0x158>
 800bc56:	f1be 0f00 	cmp.w	lr, #0
 800bc5a:	db3f      	blt.n	800bcdc <__ieee754_sqrt+0x158>
 800bc5c:	f104 0801 	add.w	r8, r4, #1
 800bc60:	1b12      	subs	r2, r2, r4
 800bc62:	428f      	cmp	r7, r1
 800bc64:	bf88      	it	hi
 800bc66:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bc6a:	1bc9      	subs	r1, r1, r7
 800bc6c:	4433      	add	r3, r6
 800bc6e:	4644      	mov	r4, r8
 800bc70:	0052      	lsls	r2, r2, #1
 800bc72:	f1bc 0c01 	subs.w	ip, ip, #1
 800bc76:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800bc7a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc82:	d1dd      	bne.n	800bc40 <__ieee754_sqrt+0xbc>
 800bc84:	430a      	orrs	r2, r1
 800bc86:	d006      	beq.n	800bc96 <__ieee754_sqrt+0x112>
 800bc88:	1c5c      	adds	r4, r3, #1
 800bc8a:	bf13      	iteet	ne
 800bc8c:	3301      	addne	r3, #1
 800bc8e:	3501      	addeq	r5, #1
 800bc90:	4663      	moveq	r3, ip
 800bc92:	f023 0301 	bicne.w	r3, r3, #1
 800bc96:	106a      	asrs	r2, r5, #1
 800bc98:	085b      	lsrs	r3, r3, #1
 800bc9a:	07e9      	lsls	r1, r5, #31
 800bc9c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bca0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bca4:	bf48      	it	mi
 800bca6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bcaa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800bcae:	461c      	mov	r4, r3
 800bcb0:	e780      	b.n	800bbb4 <__ieee754_sqrt+0x30>
 800bcb2:	0aca      	lsrs	r2, r1, #11
 800bcb4:	3815      	subs	r0, #21
 800bcb6:	0549      	lsls	r1, r1, #21
 800bcb8:	2a00      	cmp	r2, #0
 800bcba:	d0fa      	beq.n	800bcb2 <__ieee754_sqrt+0x12e>
 800bcbc:	02d6      	lsls	r6, r2, #11
 800bcbe:	d50a      	bpl.n	800bcd6 <__ieee754_sqrt+0x152>
 800bcc0:	f1c3 0420 	rsb	r4, r3, #32
 800bcc4:	fa21 f404 	lsr.w	r4, r1, r4
 800bcc8:	1e5d      	subs	r5, r3, #1
 800bcca:	4099      	lsls	r1, r3
 800bccc:	4322      	orrs	r2, r4
 800bcce:	1b43      	subs	r3, r0, r5
 800bcd0:	e78b      	b.n	800bbea <__ieee754_sqrt+0x66>
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	e7f0      	b.n	800bcb8 <__ieee754_sqrt+0x134>
 800bcd6:	0052      	lsls	r2, r2, #1
 800bcd8:	3301      	adds	r3, #1
 800bcda:	e7ef      	b.n	800bcbc <__ieee754_sqrt+0x138>
 800bcdc:	46a0      	mov	r8, r4
 800bcde:	e7bf      	b.n	800bc60 <__ieee754_sqrt+0xdc>
 800bce0:	7ff00000 	.word	0x7ff00000

0800bce4 <__ieee754_sqrtf>:
 800bce4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bce8:	4770      	bx	lr

0800bcea <matherr>:
 800bcea:	2000      	movs	r0, #0
 800bcec:	4770      	bx	lr
	...

0800bcf0 <_init>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	bf00      	nop
 800bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf6:	bc08      	pop	{r3}
 800bcf8:	469e      	mov	lr, r3
 800bcfa:	4770      	bx	lr

0800bcfc <_fini>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr
